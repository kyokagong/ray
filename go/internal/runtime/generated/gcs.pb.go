// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.16.0
// source: src/ray/protobuf/gcs.proto

package ray_rpc

import (
	_go "./go"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TablePrefix int32

const (
	TablePrefix_TABLE_PREFIX_MIN         TablePrefix = 0
	TablePrefix_UNUSED                   TablePrefix = 1
	TablePrefix_TASK                     TablePrefix = 2
	TablePrefix_RAYLET_TASK              TablePrefix = 3
	TablePrefix_NODE                     TablePrefix = 4
	TablePrefix_OBJECT                   TablePrefix = 5
	TablePrefix_ACTOR                    TablePrefix = 6
	TablePrefix_FUNCTION                 TablePrefix = 7
	TablePrefix_TASK_RECONSTRUCTION      TablePrefix = 8
	TablePrefix_RESOURCE_USAGE_BATCH     TablePrefix = 9
	TablePrefix_JOB                      TablePrefix = 10
	TablePrefix_PROFILE                  TablePrefix = 11
	TablePrefix_TASK_LEASE               TablePrefix = 12
	TablePrefix_NODE_RESOURCE            TablePrefix = 13
	TablePrefix_DIRECT_ACTOR             TablePrefix = 14
	TablePrefix_WORKERS                  TablePrefix = 15
	TablePrefix_INTERNAL_CONFIG          TablePrefix = 16
	TablePrefix_TABLE_PREFIX_MAX         TablePrefix = 17
	TablePrefix_PLACEMENT_GROUP_SCHEDULE TablePrefix = 18
	TablePrefix_PLACEMENT_GROUP          TablePrefix = 19
	TablePrefix_KV                       TablePrefix = 20
)

// Enum value maps for TablePrefix.
var (
	TablePrefix_name = map[int32]string{
		0:  "TABLE_PREFIX_MIN",
		1:  "UNUSED",
		2:  "TASK",
		3:  "RAYLET_TASK",
		4:  "NODE",
		5:  "OBJECT",
		6:  "ACTOR",
		7:  "FUNCTION",
		8:  "TASK_RECONSTRUCTION",
		9:  "RESOURCE_USAGE_BATCH",
		10: "JOB",
		11: "PROFILE",
		12: "TASK_LEASE",
		13: "NODE_RESOURCE",
		14: "DIRECT_ACTOR",
		15: "WORKERS",
		16: "INTERNAL_CONFIG",
		17: "TABLE_PREFIX_MAX",
		18: "PLACEMENT_GROUP_SCHEDULE",
		19: "PLACEMENT_GROUP",
		20: "KV",
	}
	TablePrefix_value = map[string]int32{
		"TABLE_PREFIX_MIN":         0,
		"UNUSED":                   1,
		"TASK":                     2,
		"RAYLET_TASK":              3,
		"NODE":                     4,
		"OBJECT":                   5,
		"ACTOR":                    6,
		"FUNCTION":                 7,
		"TASK_RECONSTRUCTION":      8,
		"RESOURCE_USAGE_BATCH":     9,
		"JOB":                      10,
		"PROFILE":                  11,
		"TASK_LEASE":               12,
		"NODE_RESOURCE":            13,
		"DIRECT_ACTOR":             14,
		"WORKERS":                  15,
		"INTERNAL_CONFIG":          16,
		"TABLE_PREFIX_MAX":         17,
		"PLACEMENT_GROUP_SCHEDULE": 18,
		"PLACEMENT_GROUP":          19,
		"KV":                       20,
	}
)

func (x TablePrefix) Enum() *TablePrefix {
	p := new(TablePrefix)
	*p = x
	return p
}

func (x TablePrefix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TablePrefix) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_gcs_proto_enumTypes[0].Descriptor()
}

func (TablePrefix) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_gcs_proto_enumTypes[0]
}

func (x TablePrefix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TablePrefix.Descriptor instead.
func (TablePrefix) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{0}
}

type TablePubsub int32

const (
	TablePubsub_TABLE_PUBSUB_MIN            TablePubsub = 0
	TablePubsub_NO_PUBLISH                  TablePubsub = 1
	TablePubsub_TASK_PUBSUB                 TablePubsub = 2
	TablePubsub_RAYLET_TASK_PUBSUB          TablePubsub = 3
	TablePubsub_NODE_PUBSUB                 TablePubsub = 4
	TablePubsub_OBJECT_PUBSUB               TablePubsub = 5
	TablePubsub_ACTOR_PUBSUB                TablePubsub = 6
	TablePubsub_RESOURCE_USAGE_BATCH_PUBSUB TablePubsub = 7
	TablePubsub_TASK_LEASE_PUBSUB           TablePubsub = 8
	TablePubsub_JOB_PUBSUB                  TablePubsub = 9
	TablePubsub_NODE_RESOURCE_PUBSUB        TablePubsub = 10
	TablePubsub_DIRECT_ACTOR_PUBSUB         TablePubsub = 11
	TablePubsub_WORKER_FAILURE_PUBSUB       TablePubsub = 12
	TablePubsub_TABLE_PUBSUB_MAX            TablePubsub = 13
)

// Enum value maps for TablePubsub.
var (
	TablePubsub_name = map[int32]string{
		0:  "TABLE_PUBSUB_MIN",
		1:  "NO_PUBLISH",
		2:  "TASK_PUBSUB",
		3:  "RAYLET_TASK_PUBSUB",
		4:  "NODE_PUBSUB",
		5:  "OBJECT_PUBSUB",
		6:  "ACTOR_PUBSUB",
		7:  "RESOURCE_USAGE_BATCH_PUBSUB",
		8:  "TASK_LEASE_PUBSUB",
		9:  "JOB_PUBSUB",
		10: "NODE_RESOURCE_PUBSUB",
		11: "DIRECT_ACTOR_PUBSUB",
		12: "WORKER_FAILURE_PUBSUB",
		13: "TABLE_PUBSUB_MAX",
	}
	TablePubsub_value = map[string]int32{
		"TABLE_PUBSUB_MIN":            0,
		"NO_PUBLISH":                  1,
		"TASK_PUBSUB":                 2,
		"RAYLET_TASK_PUBSUB":          3,
		"NODE_PUBSUB":                 4,
		"OBJECT_PUBSUB":               5,
		"ACTOR_PUBSUB":                6,
		"RESOURCE_USAGE_BATCH_PUBSUB": 7,
		"TASK_LEASE_PUBSUB":           8,
		"JOB_PUBSUB":                  9,
		"NODE_RESOURCE_PUBSUB":        10,
		"DIRECT_ACTOR_PUBSUB":         11,
		"WORKER_FAILURE_PUBSUB":       12,
		"TABLE_PUBSUB_MAX":            13,
	}
)

func (x TablePubsub) Enum() *TablePubsub {
	p := new(TablePubsub)
	*p = x
	return p
}

func (x TablePubsub) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TablePubsub) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_gcs_proto_enumTypes[1].Descriptor()
}

func (TablePubsub) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_gcs_proto_enumTypes[1]
}

func (x TablePubsub) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TablePubsub.Descriptor instead.
func (TablePubsub) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{1}
}

type GcsChangeMode int32

const (
	GcsChangeMode_APPEND_OR_ADD GcsChangeMode = 0
	GcsChangeMode_REMOVE        GcsChangeMode = 1
)

// Enum value maps for GcsChangeMode.
var (
	GcsChangeMode_name = map[int32]string{
		0: "APPEND_OR_ADD",
		1: "REMOVE",
	}
	GcsChangeMode_value = map[string]int32{
		"APPEND_OR_ADD": 0,
		"REMOVE":        1,
	}
)

func (x GcsChangeMode) Enum() *GcsChangeMode {
	p := new(GcsChangeMode)
	*p = x
	return p
}

func (x GcsChangeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GcsChangeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_gcs_proto_enumTypes[2].Descriptor()
}

func (GcsChangeMode) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_gcs_proto_enumTypes[2]
}

func (x GcsChangeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GcsChangeMode.Descriptor instead.
func (GcsChangeMode) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{2}
}

type ActorTableData_ActorState int32

const (
	ActorTableData_DEPENDENCIES_UNREADY ActorTableData_ActorState = 0
	ActorTableData_PENDING_CREATION     ActorTableData_ActorState = 1
	ActorTableData_ALIVE                ActorTableData_ActorState = 2
	ActorTableData_RESTARTING           ActorTableData_ActorState = 3
	ActorTableData_DEAD                 ActorTableData_ActorState = 4
)

// Enum value maps for ActorTableData_ActorState.
var (
	ActorTableData_ActorState_name = map[int32]string{
		0: "DEPENDENCIES_UNREADY",
		1: "PENDING_CREATION",
		2: "ALIVE",
		3: "RESTARTING",
		4: "DEAD",
	}
	ActorTableData_ActorState_value = map[string]int32{
		"DEPENDENCIES_UNREADY": 0,
		"PENDING_CREATION":     1,
		"ALIVE":                2,
		"RESTARTING":           3,
		"DEAD":                 4,
	}
)

func (x ActorTableData_ActorState) Enum() *ActorTableData_ActorState {
	p := new(ActorTableData_ActorState)
	*p = x
	return p
}

func (x ActorTableData_ActorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorTableData_ActorState) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_gcs_proto_enumTypes[3].Descriptor()
}

func (ActorTableData_ActorState) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_gcs_proto_enumTypes[3]
}

func (x ActorTableData_ActorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorTableData_ActorState.Descriptor instead.
func (ActorTableData_ActorState) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{4, 0}
}

type GcsNodeInfo_GcsNodeState int32

const (
	GcsNodeInfo_ALIVE GcsNodeInfo_GcsNodeState = 0
	GcsNodeInfo_DEAD  GcsNodeInfo_GcsNodeState = 1
)

// Enum value maps for GcsNodeInfo_GcsNodeState.
var (
	GcsNodeInfo_GcsNodeState_name = map[int32]string{
		0: "ALIVE",
		1: "DEAD",
	}
	GcsNodeInfo_GcsNodeState_value = map[string]int32{
		"ALIVE": 0,
		"DEAD":  1,
	}
)

func (x GcsNodeInfo_GcsNodeState) Enum() *GcsNodeInfo_GcsNodeState {
	p := new(GcsNodeInfo_GcsNodeState)
	*p = x
	return p
}

func (x GcsNodeInfo_GcsNodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GcsNodeInfo_GcsNodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_gcs_proto_enumTypes[4].Descriptor()
}

func (GcsNodeInfo_GcsNodeState) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_gcs_proto_enumTypes[4]
}

func (x GcsNodeInfo_GcsNodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GcsNodeInfo_GcsNodeState.Descriptor instead.
func (GcsNodeInfo_GcsNodeState) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{10, 0}
}

type PlacementGroupTableData_PlacementGroupState int32

const (
	PlacementGroupTableData_PENDING      PlacementGroupTableData_PlacementGroupState = 0
	PlacementGroupTableData_CREATED      PlacementGroupTableData_PlacementGroupState = 1
	PlacementGroupTableData_REMOVED      PlacementGroupTableData_PlacementGroupState = 2
	PlacementGroupTableData_RESCHEDULING PlacementGroupTableData_PlacementGroupState = 3
)

// Enum value maps for PlacementGroupTableData_PlacementGroupState.
var (
	PlacementGroupTableData_PlacementGroupState_name = map[int32]string{
		0: "PENDING",
		1: "CREATED",
		2: "REMOVED",
		3: "RESCHEDULING",
	}
	PlacementGroupTableData_PlacementGroupState_value = map[string]int32{
		"PENDING":      0,
		"CREATED":      1,
		"REMOVED":      2,
		"RESCHEDULING": 3,
	}
)

func (x PlacementGroupTableData_PlacementGroupState) Enum() *PlacementGroupTableData_PlacementGroupState {
	p := new(PlacementGroupTableData_PlacementGroupState)
	*p = x
	return p
}

func (x PlacementGroupTableData_PlacementGroupState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlacementGroupTableData_PlacementGroupState) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_gcs_proto_enumTypes[5].Descriptor()
}

func (PlacementGroupTableData_PlacementGroupState) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_gcs_proto_enumTypes[5]
}

func (x PlacementGroupTableData_PlacementGroupState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlacementGroupTableData_PlacementGroupState.Descriptor instead.
func (PlacementGroupTableData_PlacementGroupState) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{30, 0}
}

type GcsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeMode GcsChangeMode `protobuf:"varint,1,opt,name=change_mode,json=changeMode,proto3,enum=ray.rpc.GcsChangeMode" json:"change_mode,omitempty"`
	Id         []byte        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Entries    [][]byte      `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GcsEntry) Reset() {
	*x = GcsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsEntry) ProtoMessage() {}

func (x *GcsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsEntry.ProtoReflect.Descriptor instead.
func (*GcsEntry) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{0}
}

func (x *GcsEntry) GetChangeMode() GcsChangeMode {
	if x != nil {
		return x.ChangeMode
	}
	return GcsChangeMode_APPEND_OR_ADD
}

func (x *GcsEntry) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GcsEntry) GetEntries() [][]byte {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ObjectTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manager []byte `protobuf:"bytes,1,opt,name=manager,proto3" json:"manager,omitempty"`
}

func (x *ObjectTableData) Reset() {
	*x = ObjectTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectTableData) ProtoMessage() {}

func (x *ObjectTableData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectTableData.ProtoReflect.Descriptor instead.
func (*ObjectTableData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{1}
}

func (x *ObjectTableData) GetManager() []byte {
	if x != nil {
		return x.Manager
	}
	return nil
}

type TaskReconstructionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId             []byte `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NumReconstructions uint64 `protobuf:"varint,2,opt,name=num_reconstructions,json=numReconstructions,proto3" json:"num_reconstructions,omitempty"`
	NodeManagerId      []byte `protobuf:"bytes,3,opt,name=node_manager_id,json=nodeManagerId,proto3" json:"node_manager_id,omitempty"`
}

func (x *TaskReconstructionData) Reset() {
	*x = TaskReconstructionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReconstructionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReconstructionData) ProtoMessage() {}

func (x *TaskReconstructionData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReconstructionData.ProtoReflect.Descriptor instead.
func (*TaskReconstructionData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{2}
}

func (x *TaskReconstructionData) GetTaskId() []byte {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskReconstructionData) GetNumReconstructions() uint64 {
	if x != nil {
		return x.NumReconstructions
	}
	return 0
}

func (x *TaskReconstructionData) GetNodeManagerId() []byte {
	if x != nil {
		return x.NodeManagerId
	}
	return nil
}

type TaskTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *_go.Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *TaskTableData) Reset() {
	*x = TaskTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTableData) ProtoMessage() {}

func (x *TaskTableData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTableData.ProtoReflect.Descriptor instead.
func (*TaskTableData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{3}
}

func (x *TaskTableData) GetTask() *_go.Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type ActorTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId                    []byte                    `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ParentId                   []byte                    `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	ActorCreationDummyObjectId []byte                    `protobuf:"bytes,3,opt,name=actor_creation_dummy_object_id,json=actorCreationDummyObjectId,proto3" json:"actor_creation_dummy_object_id,omitempty"`
	JobId                      []byte                    `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	State                      ActorTableData_ActorState `protobuf:"varint,6,opt,name=state,proto3,enum=ray.rpc.ActorTableData_ActorState" json:"state,omitempty"`
	MaxRestarts                int64                     `protobuf:"varint,7,opt,name=max_restarts,json=maxRestarts,proto3" json:"max_restarts,omitempty"`
	NumRestarts                uint64                    `protobuf:"varint,8,opt,name=num_restarts,json=numRestarts,proto3" json:"num_restarts,omitempty"`
	Address                    *_go.Address              `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`
	OwnerAddress               *_go.Address              `protobuf:"bytes,10,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	IsDetached                 bool                      `protobuf:"varint,11,opt,name=is_detached,json=isDetached,proto3" json:"is_detached,omitempty"`
	Name                       string                    `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	Timestamp                  float64                   `protobuf:"fixed64,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TaskSpec                   *_go.TaskSpec             `protobuf:"bytes,14,opt,name=task_spec,json=taskSpec,proto3" json:"task_spec,omitempty"`
	ResourceMapping            []*_go.ResourceMapEntry   `protobuf:"bytes,15,rep,name=resource_mapping,json=resourceMapping,proto3" json:"resource_mapping,omitempty"`
	Pid                        uint32                    `protobuf:"varint,16,opt,name=pid,proto3" json:"pid,omitempty"`
	CreationTaskException      *_go.RayException         `protobuf:"bytes,18,opt,name=creation_task_exception,json=creationTaskException,proto3" json:"creation_task_exception,omitempty"`
	RayNamespace               string                    `protobuf:"bytes,19,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
	StartTime                  uint64                    `protobuf:"varint,20,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                    uint64                    `protobuf:"varint,21,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SerializedRuntimeEnv       string                    `protobuf:"bytes,22,opt,name=serialized_runtime_env,json=serializedRuntimeEnv,proto3" json:"serialized_runtime_env,omitempty"`
	ClassName                  string                    `protobuf:"bytes,23,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
}

func (x *ActorTableData) Reset() {
	*x = ActorTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorTableData) ProtoMessage() {}

func (x *ActorTableData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorTableData.ProtoReflect.Descriptor instead.
func (*ActorTableData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{4}
}

func (x *ActorTableData) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ActorTableData) GetParentId() []byte {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *ActorTableData) GetActorCreationDummyObjectId() []byte {
	if x != nil {
		return x.ActorCreationDummyObjectId
	}
	return nil
}

func (x *ActorTableData) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *ActorTableData) GetState() ActorTableData_ActorState {
	if x != nil {
		return x.State
	}
	return ActorTableData_DEPENDENCIES_UNREADY
}

func (x *ActorTableData) GetMaxRestarts() int64 {
	if x != nil {
		return x.MaxRestarts
	}
	return 0
}

func (x *ActorTableData) GetNumRestarts() uint64 {
	if x != nil {
		return x.NumRestarts
	}
	return 0
}

func (x *ActorTableData) GetAddress() *_go.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ActorTableData) GetOwnerAddress() *_go.Address {
	if x != nil {
		return x.OwnerAddress
	}
	return nil
}

func (x *ActorTableData) GetIsDetached() bool {
	if x != nil {
		return x.IsDetached
	}
	return false
}

func (x *ActorTableData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActorTableData) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ActorTableData) GetTaskSpec() *_go.TaskSpec {
	if x != nil {
		return x.TaskSpec
	}
	return nil
}

func (x *ActorTableData) GetResourceMapping() []*_go.ResourceMapEntry {
	if x != nil {
		return x.ResourceMapping
	}
	return nil
}

func (x *ActorTableData) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ActorTableData) GetCreationTaskException() *_go.RayException {
	if x != nil {
		return x.CreationTaskException
	}
	return nil
}

func (x *ActorTableData) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

func (x *ActorTableData) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ActorTableData) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ActorTableData) GetSerializedRuntimeEnv() string {
	if x != nil {
		return x.SerializedRuntimeEnv
	}
	return ""
}

func (x *ActorTableData) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

type ErrorTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId        []byte  `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Type         string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ErrorMessage string  `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Timestamp    float64 `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ErrorTableData) Reset() {
	*x = ErrorTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorTableData) ProtoMessage() {}

func (x *ErrorTableData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorTableData.ProtoReflect.Descriptor instead.
func (*ErrorTableData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorTableData) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *ErrorTableData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ErrorTableData) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ErrorTableData) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ScheduleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulePlan map[string][]byte `protobuf:"bytes,1,rep,name=schedule_plan,json=schedulePlan,proto3" json:"schedule_plan,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ScheduleData) Reset() {
	*x = ScheduleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleData) ProtoMessage() {}

func (x *ScheduleData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleData.ProtoReflect.Descriptor instead.
func (*ScheduleData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{6}
}

func (x *ScheduleData) GetSchedulePlan() map[string][]byte {
	if x != nil {
		return x.SchedulePlan
	}
	return nil
}

type ProfileTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentType string                           `protobuf:"bytes,1,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	ComponentId   []byte                           `protobuf:"bytes,2,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	NodeIpAddress string                           `protobuf:"bytes,3,opt,name=node_ip_address,json=nodeIpAddress,proto3" json:"node_ip_address,omitempty"`
	ProfileEvents []*ProfileTableData_ProfileEvent `protobuf:"bytes,4,rep,name=profile_events,json=profileEvents,proto3" json:"profile_events,omitempty"`
}

func (x *ProfileTableData) Reset() {
	*x = ProfileTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTableData) ProtoMessage() {}

func (x *ProfileTableData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileTableData.ProtoReflect.Descriptor instead.
func (*ProfileTableData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{7}
}

func (x *ProfileTableData) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *ProfileTableData) GetComponentId() []byte {
	if x != nil {
		return x.ComponentId
	}
	return nil
}

func (x *ProfileTableData) GetNodeIpAddress() string {
	if x != nil {
		return x.NodeIpAddress
	}
	return ""
}

func (x *ProfileTableData) GetProfileEvents() []*ProfileTableData_ProfileEvent {
	if x != nil {
		return x.ProfileEvents
	}
	return nil
}

type ResourceTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceCapacity float64 `protobuf:"fixed64,1,opt,name=resource_capacity,json=resourceCapacity,proto3" json:"resource_capacity,omitempty"`
}

func (x *ResourceTableData) Reset() {
	*x = ResourceTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTableData) ProtoMessage() {}

func (x *ResourceTableData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTableData.ProtoReflect.Descriptor instead.
func (*ResourceTableData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceTableData) GetResourceCapacity() float64 {
	if x != nil {
		return x.ResourceCapacity
	}
	return 0
}

type AvailableResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId             []byte             `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ResourcesAvailable map[string]float64 `protobuf:"bytes,2,rep,name=resources_available,json=resourcesAvailable,proto3" json:"resources_available,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *AvailableResources) Reset() {
	*x = AvailableResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableResources) ProtoMessage() {}

func (x *AvailableResources) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableResources.ProtoReflect.Descriptor instead.
func (*AvailableResources) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{9}
}

func (x *AvailableResources) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *AvailableResources) GetResourcesAvailable() map[string]float64 {
	if x != nil {
		return x.ResourcesAvailable
	}
	return nil
}

type GcsNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId                []byte                   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeManagerAddress    string                   `protobuf:"bytes,2,opt,name=node_manager_address,json=nodeManagerAddress,proto3" json:"node_manager_address,omitempty"`
	RayletSocketName      string                   `protobuf:"bytes,3,opt,name=raylet_socket_name,json=rayletSocketName,proto3" json:"raylet_socket_name,omitempty"`
	ObjectStoreSocketName string                   `protobuf:"bytes,4,opt,name=object_store_socket_name,json=objectStoreSocketName,proto3" json:"object_store_socket_name,omitempty"`
	NodeManagerPort       int32                    `protobuf:"varint,5,opt,name=node_manager_port,json=nodeManagerPort,proto3" json:"node_manager_port,omitempty"`
	ObjectManagerPort     int32                    `protobuf:"varint,6,opt,name=object_manager_port,json=objectManagerPort,proto3" json:"object_manager_port,omitempty"`
	State                 GcsNodeInfo_GcsNodeState `protobuf:"varint,7,opt,name=state,proto3,enum=ray.rpc.GcsNodeInfo_GcsNodeState" json:"state,omitempty"`
	NodeManagerHostname   string                   `protobuf:"bytes,8,opt,name=node_manager_hostname,json=nodeManagerHostname,proto3" json:"node_manager_hostname,omitempty"`
	MetricsExportPort     int32                    `protobuf:"varint,9,opt,name=metrics_export_port,json=metricsExportPort,proto3" json:"metrics_export_port,omitempty"`
	Timestamp             int64                    `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ResourcesTotal        map[string]float64       `protobuf:"bytes,11,rep,name=resources_total,json=resourcesTotal,proto3" json:"resources_total,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *GcsNodeInfo) Reset() {
	*x = GcsNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsNodeInfo) ProtoMessage() {}

func (x *GcsNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsNodeInfo.ProtoReflect.Descriptor instead.
func (*GcsNodeInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{10}
}

func (x *GcsNodeInfo) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *GcsNodeInfo) GetNodeManagerAddress() string {
	if x != nil {
		return x.NodeManagerAddress
	}
	return ""
}

func (x *GcsNodeInfo) GetRayletSocketName() string {
	if x != nil {
		return x.RayletSocketName
	}
	return ""
}

func (x *GcsNodeInfo) GetObjectStoreSocketName() string {
	if x != nil {
		return x.ObjectStoreSocketName
	}
	return ""
}

func (x *GcsNodeInfo) GetNodeManagerPort() int32 {
	if x != nil {
		return x.NodeManagerPort
	}
	return 0
}

func (x *GcsNodeInfo) GetObjectManagerPort() int32 {
	if x != nil {
		return x.ObjectManagerPort
	}
	return 0
}

func (x *GcsNodeInfo) GetState() GcsNodeInfo_GcsNodeState {
	if x != nil {
		return x.State
	}
	return GcsNodeInfo_ALIVE
}

func (x *GcsNodeInfo) GetNodeManagerHostname() string {
	if x != nil {
		return x.NodeManagerHostname
	}
	return ""
}

func (x *GcsNodeInfo) GetMetricsExportPort() int32 {
	if x != nil {
		return x.MetricsExportPort
	}
	return 0
}

func (x *GcsNodeInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GcsNodeInfo) GetResourcesTotal() map[string]float64 {
	if x != nil {
		return x.ResourcesTotal
	}
	return nil
}

type HeartbeatTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId []byte `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *HeartbeatTableData) Reset() {
	*x = HeartbeatTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatTableData) ProtoMessage() {}

func (x *HeartbeatTableData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatTableData.ProtoReflect.Descriptor instead.
func (*HeartbeatTableData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{11}
}

func (x *HeartbeatTableData) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

type TaskLeaseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        []byte `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NodeManagerId []byte `protobuf:"bytes,2,opt,name=node_manager_id,json=nodeManagerId,proto3" json:"node_manager_id,omitempty"`
	AcquiredAt    uint64 `protobuf:"varint,3,opt,name=acquired_at,json=acquiredAt,proto3" json:"acquired_at,omitempty"`
	Timeout       uint64 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *TaskLeaseData) Reset() {
	*x = TaskLeaseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLeaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLeaseData) ProtoMessage() {}

func (x *TaskLeaseData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLeaseData.ProtoReflect.Descriptor instead.
func (*TaskLeaseData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{12}
}

func (x *TaskLeaseData) GetTaskId() []byte {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskLeaseData) GetNodeManagerId() []byte {
	if x != nil {
		return x.NodeManagerId
	}
	return nil
}

func (x *TaskLeaseData) GetAcquiredAt() uint64 {
	if x != nil {
		return x.AcquiredAt
	}
	return 0
}

func (x *TaskLeaseData) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type JobConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumJavaWorkersPerProcess uint32            `protobuf:"varint,1,opt,name=num_java_workers_per_process,json=numJavaWorkersPerProcess,proto3" json:"num_java_workers_per_process,omitempty"`
	JvmOptions               []string          `protobuf:"bytes,2,rep,name=jvm_options,json=jvmOptions,proto3" json:"jvm_options,omitempty"`
	CodeSearchPath           []string          `protobuf:"bytes,3,rep,name=code_search_path,json=codeSearchPath,proto3" json:"code_search_path,omitempty"`
	RuntimeEnv               *_go.RuntimeEnv   `protobuf:"bytes,4,opt,name=runtime_env,json=runtimeEnv,proto3" json:"runtime_env,omitempty"`
	RayNamespace             string            `protobuf:"bytes,5,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
	Metadata                 map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JobConfig) Reset() {
	*x = JobConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfig) ProtoMessage() {}

func (x *JobConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfig.ProtoReflect.Descriptor instead.
func (*JobConfig) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{13}
}

func (x *JobConfig) GetNumJavaWorkersPerProcess() uint32 {
	if x != nil {
		return x.NumJavaWorkersPerProcess
	}
	return 0
}

func (x *JobConfig) GetJvmOptions() []string {
	if x != nil {
		return x.JvmOptions
	}
	return nil
}

func (x *JobConfig) GetCodeSearchPath() []string {
	if x != nil {
		return x.CodeSearchPath
	}
	return nil
}

func (x *JobConfig) GetRuntimeEnv() *_go.RuntimeEnv {
	if x != nil {
		return x.RuntimeEnv
	}
	return nil
}

func (x *JobConfig) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

func (x *JobConfig) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type JobTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId           []byte     `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	IsDead          bool       `protobuf:"varint,2,opt,name=is_dead,json=isDead,proto3" json:"is_dead,omitempty"`
	Timestamp       int64      `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DriverIpAddress string     `protobuf:"bytes,4,opt,name=driver_ip_address,json=driverIpAddress,proto3" json:"driver_ip_address,omitempty"`
	DriverPid       int64      `protobuf:"varint,5,opt,name=driver_pid,json=driverPid,proto3" json:"driver_pid,omitempty"`
	Config          *JobConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	StartTime       uint64     `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         uint64     `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *JobTableData) Reset() {
	*x = JobTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobTableData) ProtoMessage() {}

func (x *JobTableData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobTableData.ProtoReflect.Descriptor instead.
func (*JobTableData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{14}
}

func (x *JobTableData) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobTableData) GetIsDead() bool {
	if x != nil {
		return x.IsDead
	}
	return false
}

func (x *JobTableData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *JobTableData) GetDriverIpAddress() string {
	if x != nil {
		return x.DriverIpAddress
	}
	return ""
}

func (x *JobTableData) GetDriverPid() int64 {
	if x != nil {
		return x.DriverPid
	}
	return 0
}

func (x *JobTableData) GetConfig() *JobConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *JobTableData) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *JobTableData) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type WorkerTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAlive               bool               `protobuf:"varint,1,opt,name=is_alive,json=isAlive,proto3" json:"is_alive,omitempty"`
	WorkerAddress         *_go.Address       `protobuf:"bytes,2,opt,name=worker_address,json=workerAddress,proto3" json:"worker_address,omitempty"`
	Timestamp             int64              `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExitType              _go.WorkerExitType `protobuf:"varint,4,opt,name=exit_type,json=exitType,proto3,enum=ray.rpc.WorkerExitType" json:"exit_type,omitempty"`
	WorkerType            _go.WorkerType     `protobuf:"varint,5,opt,name=worker_type,json=workerType,proto3,enum=ray.rpc.WorkerType" json:"worker_type,omitempty"`
	WorkerInfo            map[string][]byte  `protobuf:"bytes,6,rep,name=worker_info,json=workerInfo,proto3" json:"worker_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreationTaskException *_go.RayException  `protobuf:"bytes,18,opt,name=creation_task_exception,json=creationTaskException,proto3" json:"creation_task_exception,omitempty"`
}

func (x *WorkerTableData) Reset() {
	*x = WorkerTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerTableData) ProtoMessage() {}

func (x *WorkerTableData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerTableData.ProtoReflect.Descriptor instead.
func (*WorkerTableData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{15}
}

func (x *WorkerTableData) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *WorkerTableData) GetWorkerAddress() *_go.Address {
	if x != nil {
		return x.WorkerAddress
	}
	return nil
}

func (x *WorkerTableData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WorkerTableData) GetExitType() _go.WorkerExitType {
	if x != nil {
		return x.ExitType
	}
	return _go.WorkerExitType_SYSTEM_ERROR_EXIT
}

func (x *WorkerTableData) GetWorkerType() _go.WorkerType {
	if x != nil {
		return x.WorkerType
	}
	return _go.WorkerType_WORKER
}

func (x *WorkerTableData) GetWorkerInfo() map[string][]byte {
	if x != nil {
		return x.WorkerInfo
	}
	return nil
}

func (x *WorkerTableData) GetCreationTaskException() *_go.RayException {
	if x != nil {
		return x.CreationTaskException
	}
	return nil
}

type WorkerDeltaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RayletId []byte `protobuf:"bytes,1,opt,name=raylet_id,json=rayletId,proto3" json:"raylet_id,omitempty"`
	WorkerId []byte `protobuf:"bytes,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
}

func (x *WorkerDeltaData) Reset() {
	*x = WorkerDeltaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerDeltaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerDeltaData) ProtoMessage() {}

func (x *WorkerDeltaData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerDeltaData.ProtoReflect.Descriptor instead.
func (*WorkerDeltaData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{16}
}

func (x *WorkerDeltaData) GetRayletId() []byte {
	if x != nil {
		return x.RayletId
	}
	return nil
}

func (x *WorkerDeltaData) GetWorkerId() []byte {
	if x != nil {
		return x.WorkerId
	}
	return nil
}

type ResourceMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items map[string]*ResourceTableData `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResourceMap) Reset() {
	*x = ResourceMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMap) ProtoMessage() {}

func (x *ResourceMap) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMap.ProtoReflect.Descriptor instead.
func (*ResourceMap) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{17}
}

func (x *ResourceMap) GetItems() map[string]*ResourceTableData {
	if x != nil {
		return x.Items
	}
	return nil
}

type StoredConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config string `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *StoredConfig) Reset() {
	*x = StoredConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoredConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredConfig) ProtoMessage() {}

func (x *StoredConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredConfig.ProtoReflect.Descriptor instead.
func (*StoredConfig) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{18}
}

func (x *StoredConfig) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type ObjectLocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId      []byte             `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Locations     []*ObjectTableData `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	SpilledUrl    string             `protobuf:"bytes,3,opt,name=spilled_url,json=spilledUrl,proto3" json:"spilled_url,omitempty"`
	SpilledNodeId []byte             `protobuf:"bytes,4,opt,name=spilled_node_id,json=spilledNodeId,proto3" json:"spilled_node_id,omitempty"`
	Size          uint64             `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ObjectLocationInfo) Reset() {
	*x = ObjectLocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectLocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectLocationInfo) ProtoMessage() {}

func (x *ObjectLocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectLocationInfo.ProtoReflect.Descriptor instead.
func (*ObjectLocationInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{19}
}

func (x *ObjectLocationInfo) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectLocationInfo) GetLocations() []*ObjectTableData {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *ObjectLocationInfo) GetSpilledUrl() string {
	if x != nil {
		return x.SpilledUrl
	}
	return ""
}

func (x *ObjectLocationInfo) GetSpilledNodeId() []byte {
	if x != nil {
		return x.SpilledNodeId
	}
	return nil
}

func (x *ObjectLocationInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ObjectLocationChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAdd         bool   `protobuf:"varint,1,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	NodeId        []byte `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	SpilledUrl    string `protobuf:"bytes,3,opt,name=spilled_url,json=spilledUrl,proto3" json:"spilled_url,omitempty"`
	SpilledNodeId []byte `protobuf:"bytes,4,opt,name=spilled_node_id,json=spilledNodeId,proto3" json:"spilled_node_id,omitempty"`
	Size          uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ObjectLocationChange) Reset() {
	*x = ObjectLocationChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectLocationChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectLocationChange) ProtoMessage() {}

func (x *ObjectLocationChange) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectLocationChange.ProtoReflect.Descriptor instead.
func (*ObjectLocationChange) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{20}
}

func (x *ObjectLocationChange) GetIsAdd() bool {
	if x != nil {
		return x.IsAdd
	}
	return false
}

func (x *ObjectLocationChange) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *ObjectLocationChange) GetSpilledUrl() string {
	if x != nil {
		return x.SpilledUrl
	}
	return ""
}

func (x *ObjectLocationChange) GetSpilledNodeId() []byte {
	if x != nil {
		return x.SpilledNodeId
	}
	return nil
}

func (x *ObjectLocationChange) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type NodeResourceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId           []byte             `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	UpdatedResources map[string]float64 `protobuf:"bytes,2,rep,name=updated_resources,json=updatedResources,proto3" json:"updated_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	DeletedResources []string           `protobuf:"bytes,3,rep,name=deleted_resources,json=deletedResources,proto3" json:"deleted_resources,omitempty"`
}

func (x *NodeResourceChange) Reset() {
	*x = NodeResourceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResourceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResourceChange) ProtoMessage() {}

func (x *NodeResourceChange) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResourceChange.ProtoReflect.Descriptor instead.
func (*NodeResourceChange) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{21}
}

func (x *NodeResourceChange) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *NodeResourceChange) GetUpdatedResources() map[string]float64 {
	if x != nil {
		return x.UpdatedResources
	}
	return nil
}

func (x *NodeResourceChange) GetDeletedResources() []string {
	if x != nil {
		return x.DeletedResources
	}
	return nil
}

type PubSubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PubSubMessage) Reset() {
	*x = PubSubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubMessage) ProtoMessage() {}

func (x *PubSubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubMessage.ProtoReflect.Descriptor instead.
func (*PubSubMessage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{22}
}

func (x *PubSubMessage) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PubSubMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResourceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResourceChangeOrData:
	//	*ResourceUpdate_Change
	//	*ResourceUpdate_Data
	ResourceChangeOrData isResourceUpdate_ResourceChangeOrData `protobuf_oneof:"resource_change_or_data"`
}

func (x *ResourceUpdate) Reset() {
	*x = ResourceUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUpdate) ProtoMessage() {}

func (x *ResourceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUpdate.ProtoReflect.Descriptor instead.
func (*ResourceUpdate) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{23}
}

func (m *ResourceUpdate) GetResourceChangeOrData() isResourceUpdate_ResourceChangeOrData {
	if m != nil {
		return m.ResourceChangeOrData
	}
	return nil
}

func (x *ResourceUpdate) GetChange() *NodeResourceChange {
	if x, ok := x.GetResourceChangeOrData().(*ResourceUpdate_Change); ok {
		return x.Change
	}
	return nil
}

func (x *ResourceUpdate) GetData() *ResourcesData {
	if x, ok := x.GetResourceChangeOrData().(*ResourceUpdate_Data); ok {
		return x.Data
	}
	return nil
}

type isResourceUpdate_ResourceChangeOrData interface {
	isResourceUpdate_ResourceChangeOrData()
}

type ResourceUpdate_Change struct {
	Change *NodeResourceChange `protobuf:"bytes,1,opt,name=change,proto3,oneof"`
}

type ResourceUpdate_Data struct {
	Data *ResourcesData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*ResourceUpdate_Change) isResourceUpdate_ResourceChangeOrData() {}

func (*ResourceUpdate_Data) isResourceUpdate_ResourceChangeOrData() {}

type ResourceUsageBroadcastData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo int64             `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Batch []*ResourceUpdate `protobuf:"bytes,2,rep,name=batch,proto3" json:"batch,omitempty"`
}

func (x *ResourceUsageBroadcastData) Reset() {
	*x = ResourceUsageBroadcastData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUsageBroadcastData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsageBroadcastData) ProtoMessage() {}

func (x *ResourceUsageBroadcastData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsageBroadcastData.ProtoReflect.Descriptor instead.
func (*ResourceUsageBroadcastData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{24}
}

func (x *ResourceUsageBroadcastData) GetSeqNo() int64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *ResourceUsageBroadcastData) GetBatch() []*ResourceUpdate {
	if x != nil {
		return x.Batch
	}
	return nil
}

type ResourceDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shape                       map[string]float64 `protobuf:"bytes,1,rep,name=shape,proto3" json:"shape,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	NumReadyRequestsQueued      uint64             `protobuf:"varint,2,opt,name=num_ready_requests_queued,json=numReadyRequestsQueued,proto3" json:"num_ready_requests_queued,omitempty"`
	NumInfeasibleRequestsQueued uint64             `protobuf:"varint,3,opt,name=num_infeasible_requests_queued,json=numInfeasibleRequestsQueued,proto3" json:"num_infeasible_requests_queued,omitempty"`
	BacklogSize                 int64              `protobuf:"varint,4,opt,name=backlog_size,json=backlogSize,proto3" json:"backlog_size,omitempty"`
}

func (x *ResourceDemand) Reset() {
	*x = ResourceDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDemand) ProtoMessage() {}

func (x *ResourceDemand) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDemand.ProtoReflect.Descriptor instead.
func (*ResourceDemand) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{25}
}

func (x *ResourceDemand) GetShape() map[string]float64 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ResourceDemand) GetNumReadyRequestsQueued() uint64 {
	if x != nil {
		return x.NumReadyRequestsQueued
	}
	return 0
}

func (x *ResourceDemand) GetNumInfeasibleRequestsQueued() uint64 {
	if x != nil {
		return x.NumInfeasibleRequestsQueued
	}
	return 0
}

func (x *ResourceDemand) GetBacklogSize() int64 {
	if x != nil {
		return x.BacklogSize
	}
	return 0
}

type ResourceLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceDemands []*ResourceDemand `protobuf:"bytes,1,rep,name=resource_demands,json=resourceDemands,proto3" json:"resource_demands,omitempty"`
}

func (x *ResourceLoad) Reset() {
	*x = ResourceLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLoad) ProtoMessage() {}

func (x *ResourceLoad) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLoad.ProtoReflect.Descriptor instead.
func (*ResourceLoad) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{26}
}

func (x *ResourceLoad) GetResourceDemands() []*ResourceDemand {
	if x != nil {
		return x.ResourceDemands
	}
	return nil
}

type ResourcesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId                       []byte             `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ResourcesAvailable           map[string]float64 `protobuf:"bytes,2,rep,name=resources_available,json=resourcesAvailable,proto3" json:"resources_available,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	ResourcesAvailableChanged    bool               `protobuf:"varint,3,opt,name=resources_available_changed,json=resourcesAvailableChanged,proto3" json:"resources_available_changed,omitempty"`
	ResourcesTotal               map[string]float64 `protobuf:"bytes,4,rep,name=resources_total,json=resourcesTotal,proto3" json:"resources_total,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	ResourceLoad                 map[string]float64 `protobuf:"bytes,5,rep,name=resource_load,json=resourceLoad,proto3" json:"resource_load,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	ResourceLoadChanged          bool               `protobuf:"varint,6,opt,name=resource_load_changed,json=resourceLoadChanged,proto3" json:"resource_load_changed,omitempty"`
	ResourceLoadByShape          *ResourceLoad      `protobuf:"bytes,7,opt,name=resource_load_by_shape,json=resourceLoadByShape,proto3" json:"resource_load_by_shape,omitempty"`
	ShouldGlobalGc               bool               `protobuf:"varint,8,opt,name=should_global_gc,json=shouldGlobalGc,proto3" json:"should_global_gc,omitempty"`
	NodeManagerAddress           string             `protobuf:"bytes,9,opt,name=node_manager_address,json=nodeManagerAddress,proto3" json:"node_manager_address,omitempty"`
	ObjectPullsQueued            bool               `protobuf:"varint,10,opt,name=object_pulls_queued,json=objectPullsQueued,proto3" json:"object_pulls_queued,omitempty"`
	ResourcesNormalTask          map[string]float64 `protobuf:"bytes,11,rep,name=resources_normal_task,json=resourcesNormalTask,proto3" json:"resources_normal_task,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	ResourcesNormalTaskChanged   bool               `protobuf:"varint,12,opt,name=resources_normal_task_changed,json=resourcesNormalTaskChanged,proto3" json:"resources_normal_task_changed,omitempty"`
	ResourcesNormalTaskTimestamp int64              `protobuf:"varint,13,opt,name=resources_normal_task_timestamp,json=resourcesNormalTaskTimestamp,proto3" json:"resources_normal_task_timestamp,omitempty"`
	ClusterFullOfActorsDetected  bool               `protobuf:"varint,14,opt,name=cluster_full_of_actors_detected,json=clusterFullOfActorsDetected,proto3" json:"cluster_full_of_actors_detected,omitempty"`
}

func (x *ResourcesData) Reset() {
	*x = ResourcesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcesData) ProtoMessage() {}

func (x *ResourcesData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcesData.ProtoReflect.Descriptor instead.
func (*ResourcesData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{27}
}

func (x *ResourcesData) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *ResourcesData) GetResourcesAvailable() map[string]float64 {
	if x != nil {
		return x.ResourcesAvailable
	}
	return nil
}

func (x *ResourcesData) GetResourcesAvailableChanged() bool {
	if x != nil {
		return x.ResourcesAvailableChanged
	}
	return false
}

func (x *ResourcesData) GetResourcesTotal() map[string]float64 {
	if x != nil {
		return x.ResourcesTotal
	}
	return nil
}

func (x *ResourcesData) GetResourceLoad() map[string]float64 {
	if x != nil {
		return x.ResourceLoad
	}
	return nil
}

func (x *ResourcesData) GetResourceLoadChanged() bool {
	if x != nil {
		return x.ResourceLoadChanged
	}
	return false
}

func (x *ResourcesData) GetResourceLoadByShape() *ResourceLoad {
	if x != nil {
		return x.ResourceLoadByShape
	}
	return nil
}

func (x *ResourcesData) GetShouldGlobalGc() bool {
	if x != nil {
		return x.ShouldGlobalGc
	}
	return false
}

func (x *ResourcesData) GetNodeManagerAddress() string {
	if x != nil {
		return x.NodeManagerAddress
	}
	return ""
}

func (x *ResourcesData) GetObjectPullsQueued() bool {
	if x != nil {
		return x.ObjectPullsQueued
	}
	return false
}

func (x *ResourcesData) GetResourcesNormalTask() map[string]float64 {
	if x != nil {
		return x.ResourcesNormalTask
	}
	return nil
}

func (x *ResourcesData) GetResourcesNormalTaskChanged() bool {
	if x != nil {
		return x.ResourcesNormalTaskChanged
	}
	return false
}

func (x *ResourcesData) GetResourcesNormalTaskTimestamp() int64 {
	if x != nil {
		return x.ResourcesNormalTaskTimestamp
	}
	return 0
}

func (x *ResourcesData) GetClusterFullOfActorsDetected() bool {
	if x != nil {
		return x.ClusterFullOfActorsDetected
	}
	return false
}

type ResourceUsageBatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch               []*ResourcesData    `protobuf:"bytes,1,rep,name=batch,proto3" json:"batch,omitempty"`
	ResourceLoadByShape *ResourceLoad       `protobuf:"bytes,2,opt,name=resource_load_by_shape,json=resourceLoadByShape,proto3" json:"resource_load_by_shape,omitempty"`
	PlacementGroupLoad  *PlacementGroupLoad `protobuf:"bytes,3,opt,name=placement_group_load,json=placementGroupLoad,proto3" json:"placement_group_load,omitempty"`
}

func (x *ResourceUsageBatchData) Reset() {
	*x = ResourceUsageBatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUsageBatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsageBatchData) ProtoMessage() {}

func (x *ResourceUsageBatchData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsageBatchData.ProtoReflect.Descriptor instead.
func (*ResourceUsageBatchData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{28}
}

func (x *ResourceUsageBatchData) GetBatch() []*ResourcesData {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *ResourceUsageBatchData) GetResourceLoadByShape() *ResourceLoad {
	if x != nil {
		return x.ResourceLoadByShape
	}
	return nil
}

func (x *ResourceUsageBatchData) GetPlacementGroupLoad() *PlacementGroupLoad {
	if x != nil {
		return x.PlacementGroupLoad
	}
	return nil
}

type PlacementGroupLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementGroupData []*PlacementGroupTableData `protobuf:"bytes,1,rep,name=placement_group_data,json=placementGroupData,proto3" json:"placement_group_data,omitempty"`
}

func (x *PlacementGroupLoad) Reset() {
	*x = PlacementGroupLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementGroupLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementGroupLoad) ProtoMessage() {}

func (x *PlacementGroupLoad) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementGroupLoad.ProtoReflect.Descriptor instead.
func (*PlacementGroupLoad) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{29}
}

func (x *PlacementGroupLoad) GetPlacementGroupData() []*PlacementGroupTableData {
	if x != nil {
		return x.PlacementGroupData
	}
	return nil
}

type PlacementGroupTableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementGroupId []byte                                      `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
	Name             string                                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bundles          []*_go.Bundle                               `protobuf:"bytes,3,rep,name=bundles,proto3" json:"bundles,omitempty"`
	Strategy         _go.PlacementStrategy                       `protobuf:"varint,4,opt,name=strategy,proto3,enum=ray.rpc.PlacementStrategy" json:"strategy,omitempty"`
	State            PlacementGroupTableData_PlacementGroupState `protobuf:"varint,5,opt,name=state,proto3,enum=ray.rpc.PlacementGroupTableData_PlacementGroupState" json:"state,omitempty"`
	CreatorJobId     []byte                                      `protobuf:"bytes,6,opt,name=creator_job_id,json=creatorJobId,proto3" json:"creator_job_id,omitempty"`
	CreatorActorId   []byte                                      `protobuf:"bytes,7,opt,name=creator_actor_id,json=creatorActorId,proto3" json:"creator_actor_id,omitempty"`
	CreatorJobDead   bool                                        `protobuf:"varint,8,opt,name=creator_job_dead,json=creatorJobDead,proto3" json:"creator_job_dead,omitempty"`
	CreatorActorDead bool                                        `protobuf:"varint,9,opt,name=creator_actor_dead,json=creatorActorDead,proto3" json:"creator_actor_dead,omitempty"`
	IsDetached       bool                                        `protobuf:"varint,10,opt,name=is_detached,json=isDetached,proto3" json:"is_detached,omitempty"`
	RayNamespace     string                                      `protobuf:"bytes,11,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
}

func (x *PlacementGroupTableData) Reset() {
	*x = PlacementGroupTableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementGroupTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementGroupTableData) ProtoMessage() {}

func (x *PlacementGroupTableData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementGroupTableData.ProtoReflect.Descriptor instead.
func (*PlacementGroupTableData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{30}
}

func (x *PlacementGroupTableData) GetPlacementGroupId() []byte {
	if x != nil {
		return x.PlacementGroupId
	}
	return nil
}

func (x *PlacementGroupTableData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlacementGroupTableData) GetBundles() []*_go.Bundle {
	if x != nil {
		return x.Bundles
	}
	return nil
}

func (x *PlacementGroupTableData) GetStrategy() _go.PlacementStrategy {
	if x != nil {
		return x.Strategy
	}
	return _go.PlacementStrategy_PACK
}

func (x *PlacementGroupTableData) GetState() PlacementGroupTableData_PlacementGroupState {
	if x != nil {
		return x.State
	}
	return PlacementGroupTableData_PENDING
}

func (x *PlacementGroupTableData) GetCreatorJobId() []byte {
	if x != nil {
		return x.CreatorJobId
	}
	return nil
}

func (x *PlacementGroupTableData) GetCreatorActorId() []byte {
	if x != nil {
		return x.CreatorActorId
	}
	return nil
}

func (x *PlacementGroupTableData) GetCreatorJobDead() bool {
	if x != nil {
		return x.CreatorJobDead
	}
	return false
}

func (x *PlacementGroupTableData) GetCreatorActorDead() bool {
	if x != nil {
		return x.CreatorActorDead
	}
	return false
}

func (x *PlacementGroupTableData) GetIsDetached() bool {
	if x != nil {
		return x.IsDetached
	}
	return false
}

func (x *PlacementGroupTableData) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

type ProfileTableData_ProfileEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType string  `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	StartTime float64 `protobuf:"fixed64,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   float64 `protobuf:"fixed64,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ExtraData string  `protobuf:"bytes,4,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (x *ProfileTableData_ProfileEvent) Reset() {
	*x = ProfileTableData_ProfileEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_gcs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileTableData_ProfileEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTableData_ProfileEvent) ProtoMessage() {}

func (x *ProfileTableData_ProfileEvent) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_gcs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileTableData_ProfileEvent.ProtoReflect.Descriptor instead.
func (*ProfileTableData_ProfileEvent) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_gcs_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ProfileTableData_ProfileEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *ProfileTableData_ProfileEvent) GetStartTime() float64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ProfileTableData_ProfileEvent) GetEndTime() float64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ProfileTableData_ProfileEvent) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

var File_src_ray_protobuf_gcs_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_gcs_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x67, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1d, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x08, 0x47, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x63, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x22, 0x8a, 0x01, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a,
	0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x22, 0xc7, 0x07, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1e,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x44, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x61, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44,
	0x45, 0x4e, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x41, 0x44, 0x10, 0x04, 0x22, 0x7e, 0x0a, 0x0e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9d, 0x01, 0x0a, 0x0c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0d,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x02, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x86, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x11, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0xda, 0x01, 0x0a,
	0x12, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x13,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x1a, 0x45, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x05, 0x0a, 0x0b, 0x47, 0x63,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x5f, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x63, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x63, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x63, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x23, 0x0a, 0x0c, 0x47, 0x63, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x49, 0x56,
	0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x41, 0x44, 0x10, 0x01, 0x22, 0x2d, 0x0a,
	0x12, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a,
	0x0d, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xec, 0x02, 0x0a, 0x09, 0x4a,
	0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x5f,
	0x6a, 0x61, 0x76, 0x61, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18,
	0x6e, 0x75, 0x6d, 0x4a, 0x61, 0x76, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x76, 0x6d, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6a,
	0x76, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x52, 0x0a, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3c,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x02, 0x0a, 0x0c, 0x4a, 0x6f,
	0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x50, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x03, 0x0a, 0x0f, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x34, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x78, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x61, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x79, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x79, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x9a, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x54, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26,
	0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x70,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0xa3, 0x01, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x70, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x90, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x19, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x62, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x65, 0x71, 0x4e, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x22, 0xa7, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x6e,
	0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x42, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x22, 0xc1, 0x09, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x13,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a,
	0x1b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x53, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x61,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x67, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x63, 0x0a,
	0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x1f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x5f,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x75,
	0x6c, 0x6c, 0x4f, 0x66, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x1a, 0x45, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a,
	0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2c, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4a,
	0x0a, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x79, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x22, 0x68, 0x0a, 0x12, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x12,
	0x52, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xc8, 0x04, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4e,
	0x0a, 0x13, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x45, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0xea,
	0x02, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x41,
	0x59, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x09, 0x12, 0x07, 0x0a,
	0x03, 0x4a, 0x4f, 0x42, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x41, 0x53,
	0x45, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b,
	0x45, 0x52, 0x53, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x11,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x12, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x13, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x56, 0x10, 0x14, 0x2a, 0xbe, 0x02, 0x0a, 0x0b,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x41, 0x59, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x06,
	0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10,
	0x07, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f,
	0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x4f, 0x42, 0x5f,
	0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42,
	0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x57,
	0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x55,
	0x42, 0x53, 0x55, 0x42, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0d, 0x2a, 0x2e, 0x0a, 0x0d,
	0x47, 0x63, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x42, 0x1d, 0x0a, 0x18,
	0x69, 0x6f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_src_ray_protobuf_gcs_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_gcs_proto_rawDescData = file_src_ray_protobuf_gcs_proto_rawDesc
)

func file_src_ray_protobuf_gcs_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_gcs_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_gcs_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_gcs_proto_rawDescData)
	})
	return file_src_ray_protobuf_gcs_proto_rawDescData
}

var file_src_ray_protobuf_gcs_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_src_ray_protobuf_gcs_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_src_ray_protobuf_gcs_proto_goTypes = []interface{}{
	(TablePrefix)(0),                                 // 0: ray.rpc.TablePrefix
	(TablePubsub)(0),                                 // 1: ray.rpc.TablePubsub
	(GcsChangeMode)(0),                               // 2: ray.rpc.GcsChangeMode
	(ActorTableData_ActorState)(0),                   // 3: ray.rpc.ActorTableData.ActorState
	(GcsNodeInfo_GcsNodeState)(0),                    // 4: ray.rpc.GcsNodeInfo.GcsNodeState
	(PlacementGroupTableData_PlacementGroupState)(0), // 5: ray.rpc.PlacementGroupTableData.PlacementGroupState
	(*GcsEntry)(nil),                                 // 6: ray.rpc.GcsEntry
	(*ObjectTableData)(nil),                          // 7: ray.rpc.ObjectTableData
	(*TaskReconstructionData)(nil),                   // 8: ray.rpc.TaskReconstructionData
	(*TaskTableData)(nil),                            // 9: ray.rpc.TaskTableData
	(*ActorTableData)(nil),                           // 10: ray.rpc.ActorTableData
	(*ErrorTableData)(nil),                           // 11: ray.rpc.ErrorTableData
	(*ScheduleData)(nil),                             // 12: ray.rpc.ScheduleData
	(*ProfileTableData)(nil),                         // 13: ray.rpc.ProfileTableData
	(*ResourceTableData)(nil),                        // 14: ray.rpc.ResourceTableData
	(*AvailableResources)(nil),                       // 15: ray.rpc.AvailableResources
	(*GcsNodeInfo)(nil),                              // 16: ray.rpc.GcsNodeInfo
	(*HeartbeatTableData)(nil),                       // 17: ray.rpc.HeartbeatTableData
	(*TaskLeaseData)(nil),                            // 18: ray.rpc.TaskLeaseData
	(*JobConfig)(nil),                                // 19: ray.rpc.JobConfig
	(*JobTableData)(nil),                             // 20: ray.rpc.JobTableData
	(*WorkerTableData)(nil),                          // 21: ray.rpc.WorkerTableData
	(*WorkerDeltaData)(nil),                          // 22: ray.rpc.WorkerDeltaData
	(*ResourceMap)(nil),                              // 23: ray.rpc.ResourceMap
	(*StoredConfig)(nil),                             // 24: ray.rpc.StoredConfig
	(*ObjectLocationInfo)(nil),                       // 25: ray.rpc.ObjectLocationInfo
	(*ObjectLocationChange)(nil),                     // 26: ray.rpc.ObjectLocationChange
	(*NodeResourceChange)(nil),                       // 27: ray.rpc.NodeResourceChange
	(*PubSubMessage)(nil),                            // 28: ray.rpc.PubSubMessage
	(*ResourceUpdate)(nil),                           // 29: ray.rpc.ResourceUpdate
	(*ResourceUsageBroadcastData)(nil),               // 30: ray.rpc.ResourceUsageBroadcastData
	(*ResourceDemand)(nil),                           // 31: ray.rpc.ResourceDemand
	(*ResourceLoad)(nil),                             // 32: ray.rpc.ResourceLoad
	(*ResourcesData)(nil),                            // 33: ray.rpc.ResourcesData
	(*ResourceUsageBatchData)(nil),                   // 34: ray.rpc.ResourceUsageBatchData
	(*PlacementGroupLoad)(nil),                       // 35: ray.rpc.PlacementGroupLoad
	(*PlacementGroupTableData)(nil),                  // 36: ray.rpc.PlacementGroupTableData
	nil,                                              // 37: ray.rpc.ScheduleData.SchedulePlanEntry
	(*ProfileTableData_ProfileEvent)(nil),            // 38: ray.rpc.ProfileTableData.ProfileEvent
	nil,                                              // 39: ray.rpc.AvailableResources.ResourcesAvailableEntry
	nil,                                              // 40: ray.rpc.GcsNodeInfo.ResourcesTotalEntry
	nil,                                              // 41: ray.rpc.JobConfig.MetadataEntry
	nil,                                              // 42: ray.rpc.WorkerTableData.WorkerInfoEntry
	nil,                                              // 43: ray.rpc.ResourceMap.ItemsEntry
	nil,                                              // 44: ray.rpc.NodeResourceChange.UpdatedResourcesEntry
	nil,                                              // 45: ray.rpc.ResourceDemand.ShapeEntry
	nil,                                              // 46: ray.rpc.ResourcesData.ResourcesAvailableEntry
	nil,                                              // 47: ray.rpc.ResourcesData.ResourcesTotalEntry
	nil,                                              // 48: ray.rpc.ResourcesData.ResourceLoadEntry
	nil,                                              // 49: ray.rpc.ResourcesData.ResourcesNormalTaskEntry
	(*_go.Task)(nil),                                 // 50: ray.rpc.Task
	(*_go.Address)(nil),                              // 51: ray.rpc.Address
	(*_go.TaskSpec)(nil),                             // 52: ray.rpc.TaskSpec
	(*_go.ResourceMapEntry)(nil),                     // 53: ray.rpc.ResourceMapEntry
	(*_go.RayException)(nil),                         // 54: ray.rpc.RayException
	(*_go.RuntimeEnv)(nil),                           // 55: ray.rpc.RuntimeEnv
	(_go.WorkerExitType)(0),                          // 56: ray.rpc.WorkerExitType
	(_go.WorkerType)(0),                              // 57: ray.rpc.WorkerType
	(*_go.Bundle)(nil),                               // 58: ray.rpc.Bundle
	(_go.PlacementStrategy)(0),                       // 59: ray.rpc.PlacementStrategy
}
var file_src_ray_protobuf_gcs_proto_depIdxs = []int32{
	2,  // 0: ray.rpc.GcsEntry.change_mode:type_name -> ray.rpc.GcsChangeMode
	50, // 1: ray.rpc.TaskTableData.task:type_name -> ray.rpc.Task
	3,  // 2: ray.rpc.ActorTableData.state:type_name -> ray.rpc.ActorTableData.ActorState
	51, // 3: ray.rpc.ActorTableData.address:type_name -> ray.rpc.Address
	51, // 4: ray.rpc.ActorTableData.owner_address:type_name -> ray.rpc.Address
	52, // 5: ray.rpc.ActorTableData.task_spec:type_name -> ray.rpc.TaskSpec
	53, // 6: ray.rpc.ActorTableData.resource_mapping:type_name -> ray.rpc.ResourceMapEntry
	54, // 7: ray.rpc.ActorTableData.creation_task_exception:type_name -> ray.rpc.RayException
	37, // 8: ray.rpc.ScheduleData.schedule_plan:type_name -> ray.rpc.ScheduleData.SchedulePlanEntry
	38, // 9: ray.rpc.ProfileTableData.profile_events:type_name -> ray.rpc.ProfileTableData.ProfileEvent
	39, // 10: ray.rpc.AvailableResources.resources_available:type_name -> ray.rpc.AvailableResources.ResourcesAvailableEntry
	4,  // 11: ray.rpc.GcsNodeInfo.state:type_name -> ray.rpc.GcsNodeInfo.GcsNodeState
	40, // 12: ray.rpc.GcsNodeInfo.resources_total:type_name -> ray.rpc.GcsNodeInfo.ResourcesTotalEntry
	55, // 13: ray.rpc.JobConfig.runtime_env:type_name -> ray.rpc.RuntimeEnv
	41, // 14: ray.rpc.JobConfig.metadata:type_name -> ray.rpc.JobConfig.MetadataEntry
	19, // 15: ray.rpc.JobTableData.config:type_name -> ray.rpc.JobConfig
	51, // 16: ray.rpc.WorkerTableData.worker_address:type_name -> ray.rpc.Address
	56, // 17: ray.rpc.WorkerTableData.exit_type:type_name -> ray.rpc.WorkerExitType
	57, // 18: ray.rpc.WorkerTableData.worker_type:type_name -> ray.rpc.WorkerType
	42, // 19: ray.rpc.WorkerTableData.worker_info:type_name -> ray.rpc.WorkerTableData.WorkerInfoEntry
	54, // 20: ray.rpc.WorkerTableData.creation_task_exception:type_name -> ray.rpc.RayException
	43, // 21: ray.rpc.ResourceMap.items:type_name -> ray.rpc.ResourceMap.ItemsEntry
	7,  // 22: ray.rpc.ObjectLocationInfo.locations:type_name -> ray.rpc.ObjectTableData
	44, // 23: ray.rpc.NodeResourceChange.updated_resources:type_name -> ray.rpc.NodeResourceChange.UpdatedResourcesEntry
	27, // 24: ray.rpc.ResourceUpdate.change:type_name -> ray.rpc.NodeResourceChange
	33, // 25: ray.rpc.ResourceUpdate.data:type_name -> ray.rpc.ResourcesData
	29, // 26: ray.rpc.ResourceUsageBroadcastData.batch:type_name -> ray.rpc.ResourceUpdate
	45, // 27: ray.rpc.ResourceDemand.shape:type_name -> ray.rpc.ResourceDemand.ShapeEntry
	31, // 28: ray.rpc.ResourceLoad.resource_demands:type_name -> ray.rpc.ResourceDemand
	46, // 29: ray.rpc.ResourcesData.resources_available:type_name -> ray.rpc.ResourcesData.ResourcesAvailableEntry
	47, // 30: ray.rpc.ResourcesData.resources_total:type_name -> ray.rpc.ResourcesData.ResourcesTotalEntry
	48, // 31: ray.rpc.ResourcesData.resource_load:type_name -> ray.rpc.ResourcesData.ResourceLoadEntry
	32, // 32: ray.rpc.ResourcesData.resource_load_by_shape:type_name -> ray.rpc.ResourceLoad
	49, // 33: ray.rpc.ResourcesData.resources_normal_task:type_name -> ray.rpc.ResourcesData.ResourcesNormalTaskEntry
	33, // 34: ray.rpc.ResourceUsageBatchData.batch:type_name -> ray.rpc.ResourcesData
	32, // 35: ray.rpc.ResourceUsageBatchData.resource_load_by_shape:type_name -> ray.rpc.ResourceLoad
	35, // 36: ray.rpc.ResourceUsageBatchData.placement_group_load:type_name -> ray.rpc.PlacementGroupLoad
	36, // 37: ray.rpc.PlacementGroupLoad.placement_group_data:type_name -> ray.rpc.PlacementGroupTableData
	58, // 38: ray.rpc.PlacementGroupTableData.bundles:type_name -> ray.rpc.Bundle
	59, // 39: ray.rpc.PlacementGroupTableData.strategy:type_name -> ray.rpc.PlacementStrategy
	5,  // 40: ray.rpc.PlacementGroupTableData.state:type_name -> ray.rpc.PlacementGroupTableData.PlacementGroupState
	14, // 41: ray.rpc.ResourceMap.ItemsEntry.value:type_name -> ray.rpc.ResourceTableData
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_gcs_proto_init() }
func file_src_ray_protobuf_gcs_proto_init() {
	if File_src_ray_protobuf_gcs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_gcs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReconstructionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcsNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLeaseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerDeltaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoredConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectLocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectLocationChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResourceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceUsageBroadcastData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceUsageBatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementGroupLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementGroupTableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_gcs_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileTableData_ProfileEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_src_ray_protobuf_gcs_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*ResourceUpdate_Change)(nil),
		(*ResourceUpdate_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_gcs_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_src_ray_protobuf_gcs_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_gcs_proto_depIdxs,
		EnumInfos:         file_src_ray_protobuf_gcs_proto_enumTypes,
		MessageInfos:      file_src_ray_protobuf_gcs_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_gcs_proto = out.File
	file_src_ray_protobuf_gcs_proto_rawDesc = nil
	file_src_ray_protobuf_gcs_proto_goTypes = nil
	file_src_ray_protobuf_gcs_proto_depIdxs = nil
}
