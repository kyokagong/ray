// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: src/ray/protobuf/common.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Language of a task or worker.
type Language int32

const (
	Language_PYTHON Language = 0
	Language_JAVA   Language = 1
	Language_CPP    Language = 2
	Language_GO     Language = 3
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0: "PYTHON",
		1: "JAVA",
		2: "CPP",
		3: "GO",
	}
	Language_value = map[string]int32{
		"PYTHON": 0,
		"JAVA":   1,
		"CPP":    2,
		"GO":     3,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[0].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[0]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{0}
}

// Type of a worker.
type WorkerType int32

const (
	WorkerType_WORKER WorkerType = 0
	WorkerType_DRIVER WorkerType = 1
	// IO worker types.
	WorkerType_SPILL_WORKER   WorkerType = 2
	WorkerType_RESTORE_WORKER WorkerType = 3
)

// Enum value maps for WorkerType.
var (
	WorkerType_name = map[int32]string{
		0: "WORKER",
		1: "DRIVER",
		2: "SPILL_WORKER",
		3: "RESTORE_WORKER",
	}
	WorkerType_value = map[string]int32{
		"WORKER":         0,
		"DRIVER":         1,
		"SPILL_WORKER":   2,
		"RESTORE_WORKER": 3,
	}
)

func (x WorkerType) Enum() *WorkerType {
	p := new(WorkerType)
	*p = x
	return p
}

func (x WorkerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[1].Descriptor()
}

func (WorkerType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[1]
}

func (x WorkerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerType.Descriptor instead.
func (WorkerType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{1}
}

// Type of a task.
type TaskType int32

const (
	// Normal task.
	TaskType_NORMAL_TASK TaskType = 0
	// Actor creation task.
	TaskType_ACTOR_CREATION_TASK TaskType = 1
	// Actor task.
	TaskType_ACTOR_TASK TaskType = 2
	// Driver task.
	TaskType_DRIVER_TASK TaskType = 3
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "NORMAL_TASK",
		1: "ACTOR_CREATION_TASK",
		2: "ACTOR_TASK",
		3: "DRIVER_TASK",
	}
	TaskType_value = map[string]int32{
		"NORMAL_TASK":         0,
		"ACTOR_CREATION_TASK": 1,
		"ACTOR_TASK":          2,
		"DRIVER_TASK":         3,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[2].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[2]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{2}
}

// This enum type is used as object's metadata to indicate the object's
// creating task has failed because of a certain error.
// TODO(hchen): We may want to make these errors more specific. E.g., we may
// want to distinguish between intentional and expected actor failures, and
// between worker process failure and node failure.
type ErrorType int32

const (
	// Indicates that a task failed because the worker died unexpectedly while
	// executing it.
	ErrorType_WORKER_DIED ErrorType = 0
	// Indicates that a task failed because the actor died unexpectedly before
	// finishing it.
	ErrorType_ACTOR_DIED ErrorType = 1
	// This object was lost from distributed memory due to a node failure or
	// system error. We use this error when lineage reconstruction is enabled,
	// but this object is not reconstructable (created by actor, ray.put, or a
	// borrowed ObjectRef).
	ErrorType_OBJECT_UNRECONSTRUCTABLE ErrorType = 2
	// Indicates that a task failed due to user code failure.
	ErrorType_TASK_EXECUTION_EXCEPTION ErrorType = 3
	// Indicates that the object has been placed in plasma. This error shouldn't
	// ever be exposed to user code; it is only used internally to indicate the
	// result of a direct call has been placed in plasma.
	// IMPORTANT: Keep the enum index "4" in sync with ray_object.cc.
	ErrorType_OBJECT_IN_PLASMA ErrorType = 4
	// Indicates that an object has been cancelled.
	ErrorType_TASK_CANCELLED ErrorType = 5
	// Indicates that the GCS service failed to create the actor.
	ErrorType_ACTOR_CREATION_FAILED ErrorType = 6
	// Indicates that the runtime_env failed to be created.
	ErrorType_RUNTIME_ENV_SETUP_FAILED ErrorType = 7
	// This object was lost from distributed memory to a node failure or system
	// error. We use this error when lineage reconstruction is disabled.
	ErrorType_OBJECT_LOST ErrorType = 8
	// This object is unreachable because its owner has died.
	ErrorType_OWNER_DIED ErrorType = 9
	// This object is unreachable because the owner is alive but no longer has a
	// record of this object, meaning that the physical object has likely already
	// been deleted from distributed memory. This can happen in distributed
	// reference counting, due to a bug or corner case.
	ErrorType_OBJECT_DELETED ErrorType = 10
	// Indicates there is some error when resolving the dependence
	ErrorType_DEPENDENCY_RESOLUTION_FAILED ErrorType = 11
	// The object is reconstructable but we have already exceeded its maximum
	// number of task retries.
	ErrorType_OBJECT_UNRECONSTRUCTABLE_MAX_ATTEMPTS_EXCEEDED ErrorType = 12
	// The object is reconstructable, but its lineage was evicted due to memory
	// pressure.
	ErrorType_OBJECT_UNRECONSTRUCTABLE_LINEAGE_EVICTED ErrorType = 13
	// We use this error for object fetches that have timed out. This error will
	// get thrown if an object appears to be created, but the requestor is not
	// able to fetch it after the configured timeout.
	ErrorType_OBJECT_FETCH_TIMED_OUT ErrorType = 14
	// Indicates that a task failed because the local raylet died.
	ErrorType_LOCAL_RAYLET_DIED ErrorType = 15
	// Indicates that the placement group corresponding to a task has been removed.
	ErrorType_TASK_PLACEMENT_GROUP_REMOVED ErrorType = 16
	// Indicates that the placement group corresponding to an actor has been removed.
	ErrorType_ACTOR_PLACEMENT_GROUP_REMOVED ErrorType = 17
	// The task is unschedulable.
	ErrorType_TASK_UNSCHEDULABLE_ERROR ErrorType = 18
	// The actor is unschedulable.
	ErrorType_ACTOR_UNSCHEDULABLE_ERROR ErrorType = 19
	// We use this error for object fetches that failed due to out of disk.
	ErrorType_OUT_OF_DISK_ERROR ErrorType = 20
	// This object is unreachable because the application explicitly freed it,
	// using the internal free() call. We will only recover this object if it is
	// needed for reconstruction of another downstream object.
	ErrorType_OBJECT_FREED ErrorType = 21
	// We use this error for failure due to running out of memory.
	ErrorType_OUT_OF_MEMORY ErrorType = 22
	// We use this error for failure due to node died unexpectedly.
	ErrorType_NODE_DIED ErrorType = 23
	// This is a dummy object used to mark the end of a
	// ray.ObjectRefGenerator. It should never be returned directly to
	// application code (instead raise StopIteration).
	ErrorType_END_OF_STREAMING_GENERATOR ErrorType = 24
	// Actor is unavailable. Maybe there is a temporary network failure. Difference from
	// ACTOR_DIED is that the actor may still be alive and may become available again
	// after some retries.
	ErrorType_ACTOR_UNAVAILABLE ErrorType = 25
)

// Enum value maps for ErrorType.
var (
	ErrorType_name = map[int32]string{
		0:  "WORKER_DIED",
		1:  "ACTOR_DIED",
		2:  "OBJECT_UNRECONSTRUCTABLE",
		3:  "TASK_EXECUTION_EXCEPTION",
		4:  "OBJECT_IN_PLASMA",
		5:  "TASK_CANCELLED",
		6:  "ACTOR_CREATION_FAILED",
		7:  "RUNTIME_ENV_SETUP_FAILED",
		8:  "OBJECT_LOST",
		9:  "OWNER_DIED",
		10: "OBJECT_DELETED",
		11: "DEPENDENCY_RESOLUTION_FAILED",
		12: "OBJECT_UNRECONSTRUCTABLE_MAX_ATTEMPTS_EXCEEDED",
		13: "OBJECT_UNRECONSTRUCTABLE_LINEAGE_EVICTED",
		14: "OBJECT_FETCH_TIMED_OUT",
		15: "LOCAL_RAYLET_DIED",
		16: "TASK_PLACEMENT_GROUP_REMOVED",
		17: "ACTOR_PLACEMENT_GROUP_REMOVED",
		18: "TASK_UNSCHEDULABLE_ERROR",
		19: "ACTOR_UNSCHEDULABLE_ERROR",
		20: "OUT_OF_DISK_ERROR",
		21: "OBJECT_FREED",
		22: "OUT_OF_MEMORY",
		23: "NODE_DIED",
		24: "END_OF_STREAMING_GENERATOR",
		25: "ACTOR_UNAVAILABLE",
	}
	ErrorType_value = map[string]int32{
		"WORKER_DIED":                  0,
		"ACTOR_DIED":                   1,
		"OBJECT_UNRECONSTRUCTABLE":     2,
		"TASK_EXECUTION_EXCEPTION":     3,
		"OBJECT_IN_PLASMA":             4,
		"TASK_CANCELLED":               5,
		"ACTOR_CREATION_FAILED":        6,
		"RUNTIME_ENV_SETUP_FAILED":     7,
		"OBJECT_LOST":                  8,
		"OWNER_DIED":                   9,
		"OBJECT_DELETED":               10,
		"DEPENDENCY_RESOLUTION_FAILED": 11,
		"OBJECT_UNRECONSTRUCTABLE_MAX_ATTEMPTS_EXCEEDED": 12,
		"OBJECT_UNRECONSTRUCTABLE_LINEAGE_EVICTED":       13,
		"OBJECT_FETCH_TIMED_OUT":                         14,
		"LOCAL_RAYLET_DIED":                              15,
		"TASK_PLACEMENT_GROUP_REMOVED":                   16,
		"ACTOR_PLACEMENT_GROUP_REMOVED":                  17,
		"TASK_UNSCHEDULABLE_ERROR":                       18,
		"ACTOR_UNSCHEDULABLE_ERROR":                      19,
		"OUT_OF_DISK_ERROR":                              20,
		"OBJECT_FREED":                                   21,
		"OUT_OF_MEMORY":                                  22,
		"NODE_DIED":                                      23,
		"END_OF_STREAMING_GENERATOR":                     24,
		"ACTOR_UNAVAILABLE":                              25,
	}
)

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}

func (x ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[3].Descriptor()
}

func (ErrorType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[3]
}

func (x ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorType.Descriptor instead.
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{3}
}

// The current state of a task, in rough chronological order of transition.
// The typical order of states is as follows:
//
// Normal tasks go through scheduling (PENDING_* states) and when submitted
// to a worker begin running immediately:
//
//	PENDING_* -> SUBMITTED_TO_WORKER -> RUNNING_* -> FINISHED
//
// On the other hand, actor tasks are submitted to their actor's worker as soon
// as dependencies are available, and may still be waiting for arg download or
// earlier actor tasks to finish prior to running:
//
//	PENDING_* -> SUBMITTED_TO_WORKER -> PENDING_* -> RUNNING_* -> FINISHED
//
// The above is just a typical order. Due to failures or scheduler spillback,
// tasks may transition back to earlier states for scheduling.
type TaskStatus int32

const (
	// We don't have a status for this task because we are not the owner or the
	// task metadata has already been deleted.
	TaskStatus_NIL TaskStatus = 0
	// The task is waiting for its dependencies to be created. For actor tasks, this
	// can also indicate Ray is waiting for the target actor to be created.
	TaskStatus_PENDING_ARGS_AVAIL TaskStatus = 1
	// All dependencies have been created and Ray is confirming a node / worker for the
	// task to be executed on. This step is part of Ray's distributed scheduling protocol.
	TaskStatus_PENDING_NODE_ASSIGNMENT TaskStatus = 2
	// The task has been tentatively assigned to a node, but Ray is waiting for enough
	// object store memory on the node to free up for downloading task dependencies.
	// This state is a sub-state of PENDING_NODE_ASSIGNMENT and used for metrics only.
	TaskStatus_PENDING_OBJ_STORE_MEM_AVAIL TaskStatus = 3
	// The task has been tentatively assigned to a node, and its dependencies are being
	// actively downloaded onto the node.
	// This state is a sub-state of PENDING_NODE_ASSIGNMENT and used for metrics only.
	TaskStatus_PENDING_ARGS_FETCH TaskStatus = 4
	// A node / worker for the task has been selected, and the task has been submitted
	// to the worker. It will be executed shortly. For actor tasks, execution may be
	// delayed to satisfy ordering constraints or argument fetching.
	TaskStatus_SUBMITTED_TO_WORKER TaskStatus = 5
	// The task is running on a worker.
	TaskStatus_RUNNING TaskStatus = 6
	// The task is running on a worker, but is blocked in a ray.get() call.
	// This state is a sub-state of RUNNING and used for metrics only.
	TaskStatus_RUNNING_IN_RAY_GET TaskStatus = 7
	// The task is running on a worker, but is blocked in a ray.wait() call.
	// This state is a sub-state of RUNNING and used for metrics only.
	TaskStatus_RUNNING_IN_RAY_WAIT TaskStatus = 8
	// The task has finished.
	TaskStatus_FINISHED TaskStatus = 9
	// The task has finished but failed with an Exception or system error.
	TaskStatus_FAILED TaskStatus = 10
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0:  "NIL",
		1:  "PENDING_ARGS_AVAIL",
		2:  "PENDING_NODE_ASSIGNMENT",
		3:  "PENDING_OBJ_STORE_MEM_AVAIL",
		4:  "PENDING_ARGS_FETCH",
		5:  "SUBMITTED_TO_WORKER",
		6:  "RUNNING",
		7:  "RUNNING_IN_RAY_GET",
		8:  "RUNNING_IN_RAY_WAIT",
		9:  "FINISHED",
		10: "FAILED",
	}
	TaskStatus_value = map[string]int32{
		"NIL":                         0,
		"PENDING_ARGS_AVAIL":          1,
		"PENDING_NODE_ASSIGNMENT":     2,
		"PENDING_OBJ_STORE_MEM_AVAIL": 3,
		"PENDING_ARGS_FETCH":          4,
		"SUBMITTED_TO_WORKER":         5,
		"RUNNING":                     6,
		"RUNNING_IN_RAY_GET":          7,
		"RUNNING_IN_RAY_WAIT":         8,
		"FINISHED":                    9,
		"FAILED":                      10,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[4].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[4]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{4}
}

// Type of a worker exit.
type WorkerExitType int32

const (
	// Worker exits due to system level failures (i.e. worker crash).
	WorkerExitType_SYSTEM_ERROR WorkerExitType = 0
	// System-level exit that is intended. E.g.,
	// Workers that are killed because they are idle for a long time.
	WorkerExitType_INTENDED_SYSTEM_EXIT WorkerExitType = 1
	// Worker exits because of user error.
	// E.g., exceptions from the actor initialization.
	WorkerExitType_USER_ERROR WorkerExitType = 2
	// Intended exit from users (e.g., users exit workers with exit code 0
	// or exit initiated by Ray API such as ray.kill).
	WorkerExitType_INTENDED_USER_EXIT WorkerExitType = 3
	// Worker exits due to node running out of memory.
	WorkerExitType_NODE_OUT_OF_MEMORY WorkerExitType = 4
)

// Enum value maps for WorkerExitType.
var (
	WorkerExitType_name = map[int32]string{
		0: "SYSTEM_ERROR",
		1: "INTENDED_SYSTEM_EXIT",
		2: "USER_ERROR",
		3: "INTENDED_USER_EXIT",
		4: "NODE_OUT_OF_MEMORY",
	}
	WorkerExitType_value = map[string]int32{
		"SYSTEM_ERROR":         0,
		"INTENDED_SYSTEM_EXIT": 1,
		"USER_ERROR":           2,
		"INTENDED_USER_EXIT":   3,
		"NODE_OUT_OF_MEMORY":   4,
	}
)

func (x WorkerExitType) Enum() *WorkerExitType {
	p := new(WorkerExitType)
	*p = x
	return p
}

func (x WorkerExitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerExitType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[5].Descriptor()
}

func (WorkerExitType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[5]
}

func (x WorkerExitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerExitType.Descriptor instead.
func (WorkerExitType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{5}
}

// Type of placement group strategy.
type PlacementStrategy int32

const (
	// Packs Bundles into as few nodes as possible.
	PlacementStrategy_PACK PlacementStrategy = 0
	// Places Bundles across distinct nodes or processes as even as possible.
	PlacementStrategy_SPREAD PlacementStrategy = 1
	// Packs Bundles within one node. The group is not allowed to span multiple nodes.
	PlacementStrategy_STRICT_PACK PlacementStrategy = 2
	// Places Bundles across distinct nodes.
	// The group is not allowed to deploy more than one bundle on a node.
	PlacementStrategy_STRICT_SPREAD PlacementStrategy = 3
)

// Enum value maps for PlacementStrategy.
var (
	PlacementStrategy_name = map[int32]string{
		0: "PACK",
		1: "SPREAD",
		2: "STRICT_PACK",
		3: "STRICT_SPREAD",
	}
	PlacementStrategy_value = map[string]int32{
		"PACK":          0,
		"SPREAD":        1,
		"STRICT_PACK":   2,
		"STRICT_SPREAD": 3,
	}
)

func (x PlacementStrategy) Enum() *PlacementStrategy {
	p := new(PlacementStrategy)
	*p = x
	return p
}

func (x PlacementStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlacementStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[6].Descriptor()
}

func (PlacementStrategy) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[6]
}

func (x PlacementStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlacementStrategy.Descriptor instead.
func (PlacementStrategy) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{6}
}

// TODO(sang): Update drain reason
type NodeDeathInfo_Reason int32

const (
	NodeDeathInfo_UNSPECIFIED                NodeDeathInfo_Reason = 0
	NodeDeathInfo_EXPECTED_TERMINATION       NodeDeathInfo_Reason = 1
	NodeDeathInfo_UNEXPECTED_TERMINATION     NodeDeathInfo_Reason = 2
	NodeDeathInfo_AUTOSCALER_DRAIN_PREEMPTED NodeDeathInfo_Reason = 3
	NodeDeathInfo_AUTOSCALER_DRAIN_IDLE      NodeDeathInfo_Reason = 4
)

// Enum value maps for NodeDeathInfo_Reason.
var (
	NodeDeathInfo_Reason_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "EXPECTED_TERMINATION",
		2: "UNEXPECTED_TERMINATION",
		3: "AUTOSCALER_DRAIN_PREEMPTED",
		4: "AUTOSCALER_DRAIN_IDLE",
	}
	NodeDeathInfo_Reason_value = map[string]int32{
		"UNSPECIFIED":                0,
		"EXPECTED_TERMINATION":       1,
		"UNEXPECTED_TERMINATION":     2,
		"AUTOSCALER_DRAIN_PREEMPTED": 3,
		"AUTOSCALER_DRAIN_IDLE":      4,
	}
)

func (x NodeDeathInfo_Reason) Enum() *NodeDeathInfo_Reason {
	p := new(NodeDeathInfo_Reason)
	*p = x
	return p
}

func (x NodeDeathInfo_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeDeathInfo_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[7].Descriptor()
}

func (NodeDeathInfo_Reason) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[7]
}

func (x NodeDeathInfo_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeDeathInfo_Reason.Descriptor instead.
func (NodeDeathInfo_Reason) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{24, 0}
}

type JobConfig_ActorLifetime int32

const (
	JobConfig_DETACHED     JobConfig_ActorLifetime = 0
	JobConfig_NON_DETACHED JobConfig_ActorLifetime = 1
)

// Enum value maps for JobConfig_ActorLifetime.
var (
	JobConfig_ActorLifetime_name = map[int32]string{
		0: "DETACHED",
		1: "NON_DETACHED",
	}
	JobConfig_ActorLifetime_value = map[string]int32{
		"DETACHED":     0,
		"NON_DETACHED": 1,
	}
)

func (x JobConfig_ActorLifetime) Enum() *JobConfig_ActorLifetime {
	p := new(JobConfig_ActorLifetime)
	*p = x
	return p
}

func (x JobConfig_ActorLifetime) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobConfig_ActorLifetime) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[8].Descriptor()
}

func (JobConfig_ActorLifetime) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[8]
}

func (x JobConfig_ActorLifetime) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobConfig_ActorLifetime.Descriptor instead.
func (JobConfig_ActorLifetime) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{31, 0}
}

type LabelIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *LabelIn) Reset() {
	*x = LabelIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelIn) ProtoMessage() {}

func (x *LabelIn) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelIn.ProtoReflect.Descriptor instead.
func (*LabelIn) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{0}
}

func (x *LabelIn) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type LabelNotIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *LabelNotIn) Reset() {
	*x = LabelNotIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelNotIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelNotIn) ProtoMessage() {}

func (x *LabelNotIn) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelNotIn.ProtoReflect.Descriptor instead.
func (*LabelNotIn) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{1}
}

func (x *LabelNotIn) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type LabelExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LabelExists) Reset() {
	*x = LabelExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelExists) ProtoMessage() {}

func (x *LabelExists) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelExists.ProtoReflect.Descriptor instead.
func (*LabelExists) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{2}
}

type LabelDoesNotExist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LabelDoesNotExist) Reset() {
	*x = LabelDoesNotExist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelDoesNotExist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelDoesNotExist) ProtoMessage() {}

func (x *LabelDoesNotExist) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelDoesNotExist.ProtoReflect.Descriptor instead.
func (*LabelDoesNotExist) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{3}
}

type LabelOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to LabelOperator:
	//
	//	*LabelOperator_LabelIn
	//	*LabelOperator_LabelNotIn
	//	*LabelOperator_LabelExists
	//	*LabelOperator_LabelDoesNotExist
	LabelOperator isLabelOperator_LabelOperator `protobuf_oneof:"label_operator"`
}

func (x *LabelOperator) Reset() {
	*x = LabelOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelOperator) ProtoMessage() {}

func (x *LabelOperator) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelOperator.ProtoReflect.Descriptor instead.
func (*LabelOperator) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{4}
}

func (m *LabelOperator) GetLabelOperator() isLabelOperator_LabelOperator {
	if m != nil {
		return m.LabelOperator
	}
	return nil
}

func (x *LabelOperator) GetLabelIn() *LabelIn {
	if x, ok := x.GetLabelOperator().(*LabelOperator_LabelIn); ok {
		return x.LabelIn
	}
	return nil
}

func (x *LabelOperator) GetLabelNotIn() *LabelNotIn {
	if x, ok := x.GetLabelOperator().(*LabelOperator_LabelNotIn); ok {
		return x.LabelNotIn
	}
	return nil
}

func (x *LabelOperator) GetLabelExists() *LabelExists {
	if x, ok := x.GetLabelOperator().(*LabelOperator_LabelExists); ok {
		return x.LabelExists
	}
	return nil
}

func (x *LabelOperator) GetLabelDoesNotExist() *LabelDoesNotExist {
	if x, ok := x.GetLabelOperator().(*LabelOperator_LabelDoesNotExist); ok {
		return x.LabelDoesNotExist
	}
	return nil
}

type isLabelOperator_LabelOperator interface {
	isLabelOperator_LabelOperator()
}

type LabelOperator_LabelIn struct {
	LabelIn *LabelIn `protobuf:"bytes,1,opt,name=label_in,json=labelIn,proto3,oneof"`
}

type LabelOperator_LabelNotIn struct {
	LabelNotIn *LabelNotIn `protobuf:"bytes,2,opt,name=label_not_in,json=labelNotIn,proto3,oneof"`
}

type LabelOperator_LabelExists struct {
	LabelExists *LabelExists `protobuf:"bytes,3,opt,name=label_exists,json=labelExists,proto3,oneof"`
}

type LabelOperator_LabelDoesNotExist struct {
	LabelDoesNotExist *LabelDoesNotExist `protobuf:"bytes,4,opt,name=label_does_not_exist,json=labelDoesNotExist,proto3,oneof"`
}

func (*LabelOperator_LabelIn) isLabelOperator_LabelOperator() {}

func (*LabelOperator_LabelNotIn) isLabelOperator_LabelOperator() {}

func (*LabelOperator_LabelExists) isLabelOperator_LabelOperator() {}

func (*LabelOperator_LabelDoesNotExist) isLabelOperator_LabelOperator() {}

type LabelMatchExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Operator *LabelOperator `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *LabelMatchExpression) Reset() {
	*x = LabelMatchExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelMatchExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelMatchExpression) ProtoMessage() {}

func (x *LabelMatchExpression) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelMatchExpression.ProtoReflect.Descriptor instead.
func (*LabelMatchExpression) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{5}
}

func (x *LabelMatchExpression) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelMatchExpression) GetOperator() *LabelOperator {
	if x != nil {
		return x.Operator
	}
	return nil
}

type LabelMatchExpressions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expressions []*LabelMatchExpression `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *LabelMatchExpressions) Reset() {
	*x = LabelMatchExpressions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelMatchExpressions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelMatchExpressions) ProtoMessage() {}

func (x *LabelMatchExpressions) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelMatchExpressions.ProtoReflect.Descriptor instead.
func (*LabelMatchExpressions) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{6}
}

func (x *LabelMatchExpressions) GetExpressions() []*LabelMatchExpression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type NodeLabelSchedulingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required expressions to be satisfied
	Hard *LabelMatchExpressions `protobuf:"bytes,1,opt,name=hard,proto3" json:"hard,omitempty"`
	// Preferred expressions to be satisfied
	Soft *LabelMatchExpressions `protobuf:"bytes,2,opt,name=soft,proto3" json:"soft,omitempty"`
}

func (x *NodeLabelSchedulingStrategy) Reset() {
	*x = NodeLabelSchedulingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeLabelSchedulingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLabelSchedulingStrategy) ProtoMessage() {}

func (x *NodeLabelSchedulingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLabelSchedulingStrategy.ProtoReflect.Descriptor instead.
func (*NodeLabelSchedulingStrategy) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{7}
}

func (x *NodeLabelSchedulingStrategy) GetHard() *LabelMatchExpressions {
	if x != nil {
		return x.Hard
	}
	return nil
}

func (x *NodeLabelSchedulingStrategy) GetSoft() *LabelMatchExpressions {
	if x != nil {
		return x.Soft
	}
	return nil
}

type NodeAffinitySchedulingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId             []byte `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Soft               bool   `protobuf:"varint,2,opt,name=soft,proto3" json:"soft,omitempty"`
	SpillOnUnavailable bool   `protobuf:"varint,3,opt,name=spill_on_unavailable,json=spillOnUnavailable,proto3" json:"spill_on_unavailable,omitempty"`
	FailOnUnavailable  bool   `protobuf:"varint,4,opt,name=fail_on_unavailable,json=failOnUnavailable,proto3" json:"fail_on_unavailable,omitempty"`
}

func (x *NodeAffinitySchedulingStrategy) Reset() {
	*x = NodeAffinitySchedulingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAffinitySchedulingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAffinitySchedulingStrategy) ProtoMessage() {}

func (x *NodeAffinitySchedulingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAffinitySchedulingStrategy.ProtoReflect.Descriptor instead.
func (*NodeAffinitySchedulingStrategy) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{8}
}

func (x *NodeAffinitySchedulingStrategy) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *NodeAffinitySchedulingStrategy) GetSoft() bool {
	if x != nil {
		return x.Soft
	}
	return false
}

func (x *NodeAffinitySchedulingStrategy) GetSpillOnUnavailable() bool {
	if x != nil {
		return x.SpillOnUnavailable
	}
	return false
}

func (x *NodeAffinitySchedulingStrategy) GetFailOnUnavailable() bool {
	if x != nil {
		return x.FailOnUnavailable
	}
	return false
}

type PlacementGroupSchedulingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Placement group that is associated with this task.
	PlacementGroupId []byte `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
	// Placement group bundle that is associated with this task.
	PlacementGroupBundleIndex int64 `protobuf:"varint,2,opt,name=placement_group_bundle_index,json=placementGroupBundleIndex,proto3" json:"placement_group_bundle_index,omitempty"`
	// Whether or not this task should capture parent's placement group automatically.
	PlacementGroupCaptureChildTasks bool `protobuf:"varint,3,opt,name=placement_group_capture_child_tasks,json=placementGroupCaptureChildTasks,proto3" json:"placement_group_capture_child_tasks,omitempty"`
}

func (x *PlacementGroupSchedulingStrategy) Reset() {
	*x = PlacementGroupSchedulingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementGroupSchedulingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementGroupSchedulingStrategy) ProtoMessage() {}

func (x *PlacementGroupSchedulingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementGroupSchedulingStrategy.ProtoReflect.Descriptor instead.
func (*PlacementGroupSchedulingStrategy) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{9}
}

func (x *PlacementGroupSchedulingStrategy) GetPlacementGroupId() []byte {
	if x != nil {
		return x.PlacementGroupId
	}
	return nil
}

func (x *PlacementGroupSchedulingStrategy) GetPlacementGroupBundleIndex() int64 {
	if x != nil {
		return x.PlacementGroupBundleIndex
	}
	return 0
}

func (x *PlacementGroupSchedulingStrategy) GetPlacementGroupCaptureChildTasks() bool {
	if x != nil {
		return x.PlacementGroupCaptureChildTasks
	}
	return false
}

type DefaultSchedulingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DefaultSchedulingStrategy) Reset() {
	*x = DefaultSchedulingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultSchedulingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultSchedulingStrategy) ProtoMessage() {}

func (x *DefaultSchedulingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultSchedulingStrategy.ProtoReflect.Descriptor instead.
func (*DefaultSchedulingStrategy) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{10}
}

type SpreadSchedulingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpreadSchedulingStrategy) Reset() {
	*x = SpreadSchedulingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpreadSchedulingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadSchedulingStrategy) ProtoMessage() {}

func (x *SpreadSchedulingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadSchedulingStrategy.ProtoReflect.Descriptor instead.
func (*SpreadSchedulingStrategy) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{11}
}

// Update std::hash<SchedulingStrategy> and operator== in task_spec.h when this is
// changed.
type SchedulingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SchedulingStrategy:
	//
	//	*SchedulingStrategy_DefaultSchedulingStrategy
	//	*SchedulingStrategy_PlacementGroupSchedulingStrategy
	//	*SchedulingStrategy_SpreadSchedulingStrategy
	//	*SchedulingStrategy_NodeAffinitySchedulingStrategy
	//	*SchedulingStrategy_NodeLabelSchedulingStrategy
	SchedulingStrategy isSchedulingStrategy_SchedulingStrategy `protobuf_oneof:"scheduling_strategy"`
}

func (x *SchedulingStrategy) Reset() {
	*x = SchedulingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingStrategy) ProtoMessage() {}

func (x *SchedulingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingStrategy.ProtoReflect.Descriptor instead.
func (*SchedulingStrategy) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{12}
}

func (m *SchedulingStrategy) GetSchedulingStrategy() isSchedulingStrategy_SchedulingStrategy {
	if m != nil {
		return m.SchedulingStrategy
	}
	return nil
}

func (x *SchedulingStrategy) GetDefaultSchedulingStrategy() *DefaultSchedulingStrategy {
	if x, ok := x.GetSchedulingStrategy().(*SchedulingStrategy_DefaultSchedulingStrategy); ok {
		return x.DefaultSchedulingStrategy
	}
	return nil
}

func (x *SchedulingStrategy) GetPlacementGroupSchedulingStrategy() *PlacementGroupSchedulingStrategy {
	if x, ok := x.GetSchedulingStrategy().(*SchedulingStrategy_PlacementGroupSchedulingStrategy); ok {
		return x.PlacementGroupSchedulingStrategy
	}
	return nil
}

func (x *SchedulingStrategy) GetSpreadSchedulingStrategy() *SpreadSchedulingStrategy {
	if x, ok := x.GetSchedulingStrategy().(*SchedulingStrategy_SpreadSchedulingStrategy); ok {
		return x.SpreadSchedulingStrategy
	}
	return nil
}

func (x *SchedulingStrategy) GetNodeAffinitySchedulingStrategy() *NodeAffinitySchedulingStrategy {
	if x, ok := x.GetSchedulingStrategy().(*SchedulingStrategy_NodeAffinitySchedulingStrategy); ok {
		return x.NodeAffinitySchedulingStrategy
	}
	return nil
}

func (x *SchedulingStrategy) GetNodeLabelSchedulingStrategy() *NodeLabelSchedulingStrategy {
	if x, ok := x.GetSchedulingStrategy().(*SchedulingStrategy_NodeLabelSchedulingStrategy); ok {
		return x.NodeLabelSchedulingStrategy
	}
	return nil
}

type isSchedulingStrategy_SchedulingStrategy interface {
	isSchedulingStrategy_SchedulingStrategy()
}

type SchedulingStrategy_DefaultSchedulingStrategy struct {
	// Default hybrid scheduling strategy.
	DefaultSchedulingStrategy *DefaultSchedulingStrategy `protobuf:"bytes,1,opt,name=default_scheduling_strategy,json=defaultSchedulingStrategy,proto3,oneof"`
}

type SchedulingStrategy_PlacementGroupSchedulingStrategy struct {
	// Placement group based scheduling strategy.
	PlacementGroupSchedulingStrategy *PlacementGroupSchedulingStrategy `protobuf:"bytes,2,opt,name=placement_group_scheduling_strategy,json=placementGroupSchedulingStrategy,proto3,oneof"`
}

type SchedulingStrategy_SpreadSchedulingStrategy struct {
	// Best effort spread scheduling strategy.
	SpreadSchedulingStrategy *SpreadSchedulingStrategy `protobuf:"bytes,3,opt,name=spread_scheduling_strategy,json=spreadSchedulingStrategy,proto3,oneof"`
}

type SchedulingStrategy_NodeAffinitySchedulingStrategy struct {
	NodeAffinitySchedulingStrategy *NodeAffinitySchedulingStrategy `protobuf:"bytes,4,opt,name=node_affinity_scheduling_strategy,json=nodeAffinitySchedulingStrategy,proto3,oneof"`
}

type SchedulingStrategy_NodeLabelSchedulingStrategy struct {
	NodeLabelSchedulingStrategy *NodeLabelSchedulingStrategy `protobuf:"bytes,5,opt,name=node_label_scheduling_strategy,json=nodeLabelSchedulingStrategy,proto3,oneof"`
}

func (*SchedulingStrategy_DefaultSchedulingStrategy) isSchedulingStrategy_SchedulingStrategy() {}

func (*SchedulingStrategy_PlacementGroupSchedulingStrategy) isSchedulingStrategy_SchedulingStrategy() {
}

func (*SchedulingStrategy_SpreadSchedulingStrategy) isSchedulingStrategy_SchedulingStrategy() {}

func (*SchedulingStrategy_NodeAffinitySchedulingStrategy) isSchedulingStrategy_SchedulingStrategy() {}

func (*SchedulingStrategy_NodeLabelSchedulingStrategy) isSchedulingStrategy_SchedulingStrategy() {}

// Address of a worker or node manager.
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RayletId  []byte `protobuf:"bytes,1,opt,name=raylet_id,json=rayletId,proto3" json:"raylet_id,omitempty"`
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Port      int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Optional unique id for the worker.
	WorkerId []byte `protobuf:"bytes,4,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{13}
}

func (x *Address) GetRayletId() []byte {
	if x != nil {
		return x.RayletId
	}
	return nil
}

func (x *Address) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Address) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Address) GetWorkerId() []byte {
	if x != nil {
		return x.WorkerId
	}
	return nil
}

// / Function descriptor for Java.
type JavaFunctionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName    string `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	FunctionName string `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Signature    string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *JavaFunctionDescriptor) Reset() {
	*x = JavaFunctionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaFunctionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaFunctionDescriptor) ProtoMessage() {}

func (x *JavaFunctionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaFunctionDescriptor.ProtoReflect.Descriptor instead.
func (*JavaFunctionDescriptor) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{14}
}

func (x *JavaFunctionDescriptor) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *JavaFunctionDescriptor) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *JavaFunctionDescriptor) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

// / Function descriptor for Python.
type PythonFunctionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName   string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ClassName    string `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	FunctionName string `protobuf:"bytes,3,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	FunctionHash string `protobuf:"bytes,4,opt,name=function_hash,json=functionHash,proto3" json:"function_hash,omitempty"`
}

func (x *PythonFunctionDescriptor) Reset() {
	*x = PythonFunctionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonFunctionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonFunctionDescriptor) ProtoMessage() {}

func (x *PythonFunctionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonFunctionDescriptor.ProtoReflect.Descriptor instead.
func (*PythonFunctionDescriptor) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{15}
}

func (x *PythonFunctionDescriptor) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *PythonFunctionDescriptor) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *PythonFunctionDescriptor) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *PythonFunctionDescriptor) GetFunctionHash() string {
	if x != nil {
		return x.FunctionHash
	}
	return ""
}

// / Function descriptor for C/C++.
type CppFunctionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Remote function name.
	FunctionName string `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Caller       string `protobuf:"bytes,2,opt,name=caller,proto3" json:"caller,omitempty"`
	ClassName    string `protobuf:"bytes,3,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
}

func (x *CppFunctionDescriptor) Reset() {
	*x = CppFunctionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppFunctionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppFunctionDescriptor) ProtoMessage() {}

func (x *CppFunctionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppFunctionDescriptor.ProtoReflect.Descriptor instead.
func (*CppFunctionDescriptor) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{16}
}

func (x *CppFunctionDescriptor) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *CppFunctionDescriptor) GetCaller() string {
	if x != nil {
		return x.Caller
	}
	return ""
}

func (x *CppFunctionDescriptor) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

type GoFunctionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Remote function name.
	FunctionName string `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
}

func (x *GoFunctionDescriptor) Reset() {
	*x = GoFunctionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoFunctionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoFunctionDescriptor) ProtoMessage() {}

func (x *GoFunctionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoFunctionDescriptor.ProtoReflect.Descriptor instead.
func (*GoFunctionDescriptor) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{17}
}

func (x *GoFunctionDescriptor) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

// A union wrapper for various function descriptor types.
type FunctionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FunctionDescriptor:
	//
	//	*FunctionDescriptor_JavaFunctionDescriptor
	//	*FunctionDescriptor_PythonFunctionDescriptor
	//	*FunctionDescriptor_CppFunctionDescriptor
	//	*FunctionDescriptor_GoFunctionDescriptor
	FunctionDescriptor isFunctionDescriptor_FunctionDescriptor `protobuf_oneof:"function_descriptor"`
}

func (x *FunctionDescriptor) Reset() {
	*x = FunctionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionDescriptor) ProtoMessage() {}

func (x *FunctionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionDescriptor.ProtoReflect.Descriptor instead.
func (*FunctionDescriptor) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{18}
}

func (m *FunctionDescriptor) GetFunctionDescriptor() isFunctionDescriptor_FunctionDescriptor {
	if m != nil {
		return m.FunctionDescriptor
	}
	return nil
}

func (x *FunctionDescriptor) GetJavaFunctionDescriptor() *JavaFunctionDescriptor {
	if x, ok := x.GetFunctionDescriptor().(*FunctionDescriptor_JavaFunctionDescriptor); ok {
		return x.JavaFunctionDescriptor
	}
	return nil
}

func (x *FunctionDescriptor) GetPythonFunctionDescriptor() *PythonFunctionDescriptor {
	if x, ok := x.GetFunctionDescriptor().(*FunctionDescriptor_PythonFunctionDescriptor); ok {
		return x.PythonFunctionDescriptor
	}
	return nil
}

func (x *FunctionDescriptor) GetCppFunctionDescriptor() *CppFunctionDescriptor {
	if x, ok := x.GetFunctionDescriptor().(*FunctionDescriptor_CppFunctionDescriptor); ok {
		return x.CppFunctionDescriptor
	}
	return nil
}

func (x *FunctionDescriptor) GetGoFunctionDescriptor() *GoFunctionDescriptor {
	if x, ok := x.GetFunctionDescriptor().(*FunctionDescriptor_GoFunctionDescriptor); ok {
		return x.GoFunctionDescriptor
	}
	return nil
}

type isFunctionDescriptor_FunctionDescriptor interface {
	isFunctionDescriptor_FunctionDescriptor()
}

type FunctionDescriptor_JavaFunctionDescriptor struct {
	JavaFunctionDescriptor *JavaFunctionDescriptor `protobuf:"bytes,1,opt,name=java_function_descriptor,json=javaFunctionDescriptor,proto3,oneof"`
}

type FunctionDescriptor_PythonFunctionDescriptor struct {
	PythonFunctionDescriptor *PythonFunctionDescriptor `protobuf:"bytes,2,opt,name=python_function_descriptor,json=pythonFunctionDescriptor,proto3,oneof"`
}

type FunctionDescriptor_CppFunctionDescriptor struct {
	CppFunctionDescriptor *CppFunctionDescriptor `protobuf:"bytes,3,opt,name=cpp_function_descriptor,json=cppFunctionDescriptor,proto3,oneof"`
}

type FunctionDescriptor_GoFunctionDescriptor struct {
	GoFunctionDescriptor *GoFunctionDescriptor `protobuf:"bytes,4,opt,name=go_function_descriptor,json=goFunctionDescriptor,proto3,oneof"`
}

func (*FunctionDescriptor_JavaFunctionDescriptor) isFunctionDescriptor_FunctionDescriptor() {}

func (*FunctionDescriptor_PythonFunctionDescriptor) isFunctionDescriptor_FunctionDescriptor() {}

func (*FunctionDescriptor_CppFunctionDescriptor) isFunctionDescriptor_FunctionDescriptor() {}

func (*FunctionDescriptor_GoFunctionDescriptor) isFunctionDescriptor_FunctionDescriptor() {}

// Actor concurrency group is used to define a concurrent
// unit to indicate how some methods are performed concurrently.
type ConcurrencyGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the method concurrency group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The maximum concurrency of this group.
	MaxConcurrency int32 `protobuf:"varint,2,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	// Function descriptors of the actor methods that will run in this concurrency group.
	FunctionDescriptors []*FunctionDescriptor `protobuf:"bytes,3,rep,name=function_descriptors,json=functionDescriptors,proto3" json:"function_descriptors,omitempty"`
}

func (x *ConcurrencyGroup) Reset() {
	*x = ConcurrencyGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrencyGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyGroup) ProtoMessage() {}

func (x *ConcurrencyGroup) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyGroup.ProtoReflect.Descriptor instead.
func (*ConcurrencyGroup) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{19}
}

func (x *ConcurrencyGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConcurrencyGroup) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *ConcurrencyGroup) GetFunctionDescriptors() []*FunctionDescriptor {
	if x != nil {
		return x.FunctionDescriptors
	}
	return nil
}

// / The information per ray error type.
type RayErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// More detailed error context for various error types.
	//
	// Types that are assignable to Error:
	//
	//	*RayErrorInfo_ActorDiedError
	//	*RayErrorInfo_RuntimeEnvSetupFailedError
	//	*RayErrorInfo_ActorUnavailableError
	Error        isRayErrorInfo_Error `protobuf_oneof:"error"`
	ErrorMessage string               `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The type of error that caused the exception.
	ErrorType ErrorType `protobuf:"varint,11,opt,name=error_type,json=errorType,proto3,enum=ray.rpc.ErrorType" json:"error_type,omitempty"`
}

func (x *RayErrorInfo) Reset() {
	*x = RayErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RayErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RayErrorInfo) ProtoMessage() {}

func (x *RayErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RayErrorInfo.ProtoReflect.Descriptor instead.
func (*RayErrorInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{20}
}

func (m *RayErrorInfo) GetError() isRayErrorInfo_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (x *RayErrorInfo) GetActorDiedError() *ActorDeathCause {
	if x, ok := x.GetError().(*RayErrorInfo_ActorDiedError); ok {
		return x.ActorDiedError
	}
	return nil
}

func (x *RayErrorInfo) GetRuntimeEnvSetupFailedError() *RuntimeEnvFailedContext {
	if x, ok := x.GetError().(*RayErrorInfo_RuntimeEnvSetupFailedError); ok {
		return x.RuntimeEnvSetupFailedError
	}
	return nil
}

func (x *RayErrorInfo) GetActorUnavailableError() *ActorUnavailableContext {
	if x, ok := x.GetError().(*RayErrorInfo_ActorUnavailableError); ok {
		return x.ActorUnavailableError
	}
	return nil
}

func (x *RayErrorInfo) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RayErrorInfo) GetErrorType() ErrorType {
	if x != nil {
		return x.ErrorType
	}
	return ErrorType_WORKER_DIED
}

type isRayErrorInfo_Error interface {
	isRayErrorInfo_Error()
}

type RayErrorInfo_ActorDiedError struct {
	// for ErrorType::ACTOR_DIED
	ActorDiedError *ActorDeathCause `protobuf:"bytes,2,opt,name=actor_died_error,json=actorDiedError,proto3,oneof"`
}

type RayErrorInfo_RuntimeEnvSetupFailedError struct {
	// for ErrorType::RUNTIME_ENV_SETUP_FAILED
	RuntimeEnvSetupFailedError *RuntimeEnvFailedContext `protobuf:"bytes,3,opt,name=runtime_env_setup_failed_error,json=runtimeEnvSetupFailedError,proto3,oneof"`
}

type RayErrorInfo_ActorUnavailableError struct {
	// for ErrorType::ACTOR_UNAVAILABLE
	ActorUnavailableError *ActorUnavailableContext `protobuf:"bytes,4,opt,name=actor_unavailable_error,json=actorUnavailableError,proto3,oneof"`
}

func (*RayErrorInfo_ActorDiedError) isRayErrorInfo_Error() {}

func (*RayErrorInfo_RuntimeEnvSetupFailedError) isRayErrorInfo_Error() {}

func (*RayErrorInfo_ActorUnavailableError) isRayErrorInfo_Error() {}

type OutOfMemoryErrorContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task id of the task evicted due to node running out of memory.
	TaskId []byte `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// The task name of the task evicted due to node running out of memory.
	TaskName string `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	// The IP address of the node that was running the task.
	NodeIpAddress string `protobuf:"bytes,3,opt,name=node_ip_address,json=nodeIpAddress,proto3" json:"node_ip_address,omitempty"`
	// The memory used by the node.
	MemoryUsedBytes uint64 `protobuf:"varint,4,opt,name=memory_used_bytes,json=memoryUsedBytes,proto3" json:"memory_used_bytes,omitempty"`
	// The memory total by the node.
	MemoryTotalBytes uint64 `protobuf:"varint,5,opt,name=memory_total_bytes,json=memoryTotalBytes,proto3" json:"memory_total_bytes,omitempty"`
	// The fraction of memory used, i.e. used / total.
	MemoryUsageFraction float64 `protobuf:"fixed64,6,opt,name=memory_usage_fraction,json=memoryUsageFraction,proto3" json:"memory_usage_fraction,omitempty"`
	// The threshold when task will be evicted to free up memory.
	MemoryThreshold float64 `protobuf:"fixed64,7,opt,name=memory_threshold,json=memoryThreshold,proto3" json:"memory_threshold,omitempty"`
}

func (x *OutOfMemoryErrorContext) Reset() {
	*x = OutOfMemoryErrorContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutOfMemoryErrorContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutOfMemoryErrorContext) ProtoMessage() {}

func (x *OutOfMemoryErrorContext) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutOfMemoryErrorContext.ProtoReflect.Descriptor instead.
func (*OutOfMemoryErrorContext) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{21}
}

func (x *OutOfMemoryErrorContext) GetTaskId() []byte {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *OutOfMemoryErrorContext) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *OutOfMemoryErrorContext) GetNodeIpAddress() string {
	if x != nil {
		return x.NodeIpAddress
	}
	return ""
}

func (x *OutOfMemoryErrorContext) GetMemoryUsedBytes() uint64 {
	if x != nil {
		return x.MemoryUsedBytes
	}
	return 0
}

func (x *OutOfMemoryErrorContext) GetMemoryTotalBytes() uint64 {
	if x != nil {
		return x.MemoryTotalBytes
	}
	return 0
}

func (x *OutOfMemoryErrorContext) GetMemoryUsageFraction() float64 {
	if x != nil {
		return x.MemoryUsageFraction
	}
	return 0
}

func (x *OutOfMemoryErrorContext) GetMemoryThreshold() float64 {
	if x != nil {
		return x.MemoryThreshold
	}
	return 0
}

type NodeDiedErrorContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the node that died.
	NodeId []byte `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// The IP address of the node that died.
	NodeIpAddress string `protobuf:"bytes,2,opt,name=node_ip_address,json=nodeIpAddress,proto3" json:"node_ip_address,omitempty"`
}

func (x *NodeDiedErrorContext) Reset() {
	*x = NodeDiedErrorContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDiedErrorContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDiedErrorContext) ProtoMessage() {}

func (x *NodeDiedErrorContext) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDiedErrorContext.ProtoReflect.Descriptor instead.
func (*NodeDiedErrorContext) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{22}
}

func (x *NodeDiedErrorContext) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *NodeDiedErrorContext) GetNodeIpAddress() string {
	if x != nil {
		return x.NodeIpAddress
	}
	return ""
}

// / The task exception encapsulates the information about task
// / execution exceptions. This should be used by the frontend
// / to represent a user application error. Errors originating from the
// / backend such as from the raylet should be propagated as RayErrorInfo.
type RayException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Language of this exception.
	Language Language `protobuf:"varint,1,opt,name=language,proto3,enum=ray.rpc.Language" json:"language,omitempty"`
	// The serialized exception.
	SerializedException []byte `protobuf:"bytes,2,opt,name=serialized_exception,json=serializedException,proto3" json:"serialized_exception,omitempty"`
	// The formatted exception string.
	FormattedExceptionString string `protobuf:"bytes,3,opt,name=formatted_exception_string,json=formattedExceptionString,proto3" json:"formatted_exception_string,omitempty"`
}

func (x *RayException) Reset() {
	*x = RayException{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RayException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RayException) ProtoMessage() {}

func (x *RayException) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RayException.ProtoReflect.Descriptor instead.
func (*RayException) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{23}
}

func (x *RayException) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_PYTHON
}

func (x *RayException) GetSerializedException() []byte {
	if x != nil {
		return x.SerializedException
	}
	return nil
}

func (x *RayException) GetFormattedExceptionString() string {
	if x != nil {
		return x.FormattedExceptionString
	}
	return ""
}

type NodeDeathInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason NodeDeathInfo_Reason `protobuf:"varint,1,opt,name=reason,proto3,enum=ray.rpc.NodeDeathInfo_Reason" json:"reason,omitempty"`
	// A message describing the reason for the node death.
	ReasonMessage string `protobuf:"bytes,2,opt,name=reason_message,json=reasonMessage,proto3" json:"reason_message,omitempty"`
}

func (x *NodeDeathInfo) Reset() {
	*x = NodeDeathInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDeathInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDeathInfo) ProtoMessage() {}

func (x *NodeDeathInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDeathInfo.ProtoReflect.Descriptor instead.
func (*NodeDeathInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{24}
}

func (x *NodeDeathInfo) GetReason() NodeDeathInfo_Reason {
	if x != nil {
		return x.Reason
	}
	return NodeDeathInfo_UNSPECIFIED
}

func (x *NodeDeathInfo) GetReasonMessage() string {
	if x != nil {
		return x.ReasonMessage
	}
	return ""
}

type ActorDeathCause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Context:
	//
	//	*ActorDeathCause_CreationTaskFailureContext
	//	*ActorDeathCause_RuntimeEnvFailedContext
	//	*ActorDeathCause_ActorDiedErrorContext
	//	*ActorDeathCause_ActorUnschedulableContext
	//	*ActorDeathCause_OomContext
	Context isActorDeathCause_Context `protobuf_oneof:"context"`
}

func (x *ActorDeathCause) Reset() {
	*x = ActorDeathCause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorDeathCause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorDeathCause) ProtoMessage() {}

func (x *ActorDeathCause) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorDeathCause.ProtoReflect.Descriptor instead.
func (*ActorDeathCause) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{25}
}

func (m *ActorDeathCause) GetContext() isActorDeathCause_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *ActorDeathCause) GetCreationTaskFailureContext() *RayException {
	if x, ok := x.GetContext().(*ActorDeathCause_CreationTaskFailureContext); ok {
		return x.CreationTaskFailureContext
	}
	return nil
}

func (x *ActorDeathCause) GetRuntimeEnvFailedContext() *RuntimeEnvFailedContext {
	if x, ok := x.GetContext().(*ActorDeathCause_RuntimeEnvFailedContext); ok {
		return x.RuntimeEnvFailedContext
	}
	return nil
}

func (x *ActorDeathCause) GetActorDiedErrorContext() *ActorDiedErrorContext {
	if x, ok := x.GetContext().(*ActorDeathCause_ActorDiedErrorContext); ok {
		return x.ActorDiedErrorContext
	}
	return nil
}

func (x *ActorDeathCause) GetActorUnschedulableContext() *ActorUnschedulableContext {
	if x, ok := x.GetContext().(*ActorDeathCause_ActorUnschedulableContext); ok {
		return x.ActorUnschedulableContext
	}
	return nil
}

func (x *ActorDeathCause) GetOomContext() *OomContext {
	if x, ok := x.GetContext().(*ActorDeathCause_OomContext); ok {
		return x.OomContext
	}
	return nil
}

type isActorDeathCause_Context interface {
	isActorDeathCause_Context()
}

type ActorDeathCause_CreationTaskFailureContext struct {
	// Indicates that this actor is marked as DEAD due to actor creation task failure.
	CreationTaskFailureContext *RayException `protobuf:"bytes,1,opt,name=creation_task_failure_context,json=creationTaskFailureContext,proto3,oneof"`
}

type ActorDeathCause_RuntimeEnvFailedContext struct {
	RuntimeEnvFailedContext *RuntimeEnvFailedContext `protobuf:"bytes,2,opt,name=runtime_env_failed_context,json=runtimeEnvFailedContext,proto3,oneof"`
}

type ActorDeathCause_ActorDiedErrorContext struct {
	ActorDiedErrorContext *ActorDiedErrorContext `protobuf:"bytes,3,opt,name=actor_died_error_context,json=actorDiedErrorContext,proto3,oneof"`
}

type ActorDeathCause_ActorUnschedulableContext struct {
	ActorUnschedulableContext *ActorUnschedulableContext `protobuf:"bytes,4,opt,name=actor_unschedulable_context,json=actorUnschedulableContext,proto3,oneof"`
}

type ActorDeathCause_OomContext struct {
	OomContext *OomContext `protobuf:"bytes,5,opt,name=oom_context,json=oomContext,proto3,oneof"`
}

func (*ActorDeathCause_CreationTaskFailureContext) isActorDeathCause_Context() {}

func (*ActorDeathCause_RuntimeEnvFailedContext) isActorDeathCause_Context() {}

func (*ActorDeathCause_ActorDiedErrorContext) isActorDeathCause_Context() {}

func (*ActorDeathCause_ActorUnschedulableContext) isActorDeathCause_Context() {}

func (*ActorDeathCause_OomContext) isActorDeathCause_Context() {}

// ---Actor death contexts start----
// Indicates that this actor is marked as DEAD due to runtime environment setup failure.
type RuntimeEnvFailedContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(sang,lixin) Get this error message from agent.
	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *RuntimeEnvFailedContext) Reset() {
	*x = RuntimeEnvFailedContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeEnvFailedContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeEnvFailedContext) ProtoMessage() {}

func (x *RuntimeEnvFailedContext) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeEnvFailedContext.ProtoReflect.Descriptor instead.
func (*RuntimeEnvFailedContext) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{26}
}

func (x *RuntimeEnvFailedContext) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ActorUnschedulableContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ActorUnschedulableContext) Reset() {
	*x = ActorUnschedulableContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorUnschedulableContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorUnschedulableContext) ProtoMessage() {}

func (x *ActorUnschedulableContext) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorUnschedulableContext.ProtoReflect.Descriptor instead.
func (*ActorUnschedulableContext) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{27}
}

func (x *ActorUnschedulableContext) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type ActorDiedErrorContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The id of owner of the actor.
	OwnerId []byte `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// The ip address of the owner worker.
	OwnerIpAddress string `protobuf:"bytes,3,opt,name=owner_ip_address,json=ownerIpAddress,proto3" json:"owner_ip_address,omitempty"`
	// The IP address where actor was created.
	NodeIpAddress string `protobuf:"bytes,4,opt,name=node_ip_address,json=nodeIpAddress,proto3" json:"node_ip_address,omitempty"`
	// The process id of this actor.
	Pid uint32 `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
	// Name of the actor.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// The actor's namespace. Named `ray_namespace` to avoid confusions when invoked in c++.
	RayNamespace string `protobuf:"bytes,7,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
	// The actor's class name.
	ClassName string `protobuf:"bytes,8,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	// The id of the actor
	ActorId []byte `protobuf:"bytes,9,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	// Whether the actor had never started running before it died, i.e. it was cancelled
	// before scheduling had completed.
	NeverStarted bool `protobuf:"varint,10,opt,name=never_started,json=neverStarted,proto3" json:"never_started,omitempty"`
	// The node death info, if node death is the cause of actor death.
	NodeDeathInfo *NodeDeathInfo `protobuf:"bytes,11,opt,name=node_death_info,json=nodeDeathInfo,proto3,oneof" json:"node_death_info,omitempty"`
}

func (x *ActorDiedErrorContext) Reset() {
	*x = ActorDiedErrorContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorDiedErrorContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorDiedErrorContext) ProtoMessage() {}

func (x *ActorDiedErrorContext) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorDiedErrorContext.ProtoReflect.Descriptor instead.
func (*ActorDiedErrorContext) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{28}
}

func (x *ActorDiedErrorContext) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ActorDiedErrorContext) GetOwnerId() []byte {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *ActorDiedErrorContext) GetOwnerIpAddress() string {
	if x != nil {
		return x.OwnerIpAddress
	}
	return ""
}

func (x *ActorDiedErrorContext) GetNodeIpAddress() string {
	if x != nil {
		return x.NodeIpAddress
	}
	return ""
}

func (x *ActorDiedErrorContext) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ActorDiedErrorContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActorDiedErrorContext) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

func (x *ActorDiedErrorContext) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ActorDiedErrorContext) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ActorDiedErrorContext) GetNeverStarted() bool {
	if x != nil {
		return x.NeverStarted
	}
	return false
}

func (x *ActorDiedErrorContext) GetNodeDeathInfo() *NodeDeathInfo {
	if x != nil {
		return x.NodeDeathInfo
	}
	return nil
}

// Context for task OOM.
type OomContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error message
	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Whether the task / actor should fail immediately and not be retried.
	FailImmediately bool `protobuf:"varint,2,opt,name=fail_immediately,json=failImmediately,proto3" json:"fail_immediately,omitempty"`
}

func (x *OomContext) Reset() {
	*x = OomContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OomContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OomContext) ProtoMessage() {}

func (x *OomContext) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OomContext.ProtoReflect.Descriptor instead.
func (*OomContext) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{29}
}

func (x *OomContext) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *OomContext) GetFailImmediately() bool {
	if x != nil {
		return x.FailImmediately
	}
	return false
}

type ActorUnavailableContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId []byte `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3,oneof" json:"actor_id,omitempty"`
}

func (x *ActorUnavailableContext) Reset() {
	*x = ActorUnavailableContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorUnavailableContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorUnavailableContext) ProtoMessage() {}

func (x *ActorUnavailableContext) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorUnavailableContext.ProtoReflect.Descriptor instead.
func (*ActorUnavailableContext) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{30}
}

func (x *ActorUnavailableContext) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

type JobConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The jvm options for java workers of the job.
	JvmOptions []string `protobuf:"bytes,2,rep,name=jvm_options,json=jvmOptions,proto3" json:"jvm_options,omitempty"`
	// A list of directories or files (jar files or dynamic libraries) that specify the
	// search path for user code. This will be used as `CLASSPATH` in Java, and `PYTHONPATH`
	// in Python. In C++, libraries under these paths will be loaded by 'dlopen'.
	CodeSearchPath []string `protobuf:"bytes,3,rep,name=code_search_path,json=codeSearchPath,proto3" json:"code_search_path,omitempty"`
	// Runtime environment to run the code
	RuntimeEnvInfo *RuntimeEnvInfo `protobuf:"bytes,4,opt,name=runtime_env_info,json=runtimeEnvInfo,proto3" json:"runtime_env_info,omitempty"`
	// The job's namespace. Named `ray_namespace` to avoid confusions when invoked in c++.
	RayNamespace string `protobuf:"bytes,5,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
	// An opaque kv store for job related metadata.
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The default lifetime of actors in this job.
	// If the lifetime of an actor is not specified explicitly at runtime, this
	// default value will be applied.
	DefaultActorLifetime JobConfig_ActorLifetime `protobuf:"varint,7,opt,name=default_actor_lifetime,json=defaultActorLifetime,proto3,enum=ray.rpc.JobConfig_ActorLifetime" json:"default_actor_lifetime,omitempty"`
	// System paths of the driver scripts. Python workers need to search
	// these paths to load modules.
	PyDriverSysPath []string `protobuf:"bytes,8,rep,name=py_driver_sys_path,json=pyDriverSysPath,proto3" json:"py_driver_sys_path,omitempty"`
	// Python logging configurations that will be passed to Ray tasks/actors.
	SerializedPyLoggingConfig []byte `protobuf:"bytes,9,opt,name=serialized_py_logging_config,json=serializedPyLoggingConfig,proto3" json:"serialized_py_logging_config,omitempty"`
}

func (x *JobConfig) Reset() {
	*x = JobConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfig) ProtoMessage() {}

func (x *JobConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfig.ProtoReflect.Descriptor instead.
func (*JobConfig) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{31}
}

func (x *JobConfig) GetJvmOptions() []string {
	if x != nil {
		return x.JvmOptions
	}
	return nil
}

func (x *JobConfig) GetCodeSearchPath() []string {
	if x != nil {
		return x.CodeSearchPath
	}
	return nil
}

func (x *JobConfig) GetRuntimeEnvInfo() *RuntimeEnvInfo {
	if x != nil {
		return x.RuntimeEnvInfo
	}
	return nil
}

func (x *JobConfig) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

func (x *JobConfig) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JobConfig) GetDefaultActorLifetime() JobConfig_ActorLifetime {
	if x != nil {
		return x.DefaultActorLifetime
	}
	return JobConfig_DETACHED
}

func (x *JobConfig) GetPyDriverSysPath() []string {
	if x != nil {
		return x.PyDriverSysPath
	}
	return nil
}

func (x *JobConfig) GetSerializedPyLoggingConfig() []byte {
	if x != nil {
		return x.SerializedPyLoggingConfig
	}
	return nil
}

type StreamingGeneratorReturnIdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The object ID of a streaming generator return.
	ObjectId []byte `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Whether or not if the object is in plasma store.
	IsPlasmaObject bool `protobuf:"varint,2,opt,name=is_plasma_object,json=isPlasmaObject,proto3" json:"is_plasma_object,omitempty"`
}

func (x *StreamingGeneratorReturnIdInfo) Reset() {
	*x = StreamingGeneratorReturnIdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingGeneratorReturnIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingGeneratorReturnIdInfo) ProtoMessage() {}

func (x *StreamingGeneratorReturnIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingGeneratorReturnIdInfo.ProtoReflect.Descriptor instead.
func (*StreamingGeneratorReturnIdInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{32}
}

func (x *StreamingGeneratorReturnIdInfo) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *StreamingGeneratorReturnIdInfo) GetIsPlasmaObject() bool {
	if x != nil {
		return x.IsPlasmaObject
	}
	return false
}

// / The task specification encapsulates all immutable information about the
// / task.
type TaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of this task.
	Type TaskType `protobuf:"varint,1,opt,name=type,proto3,enum=ray.rpc.TaskType" json:"type,omitempty"`
	// Name of this task.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Language of this task.
	Language Language `protobuf:"varint,3,opt,name=language,proto3,enum=ray.rpc.Language" json:"language,omitempty"`
	// Function descriptor of this task uniquely describe the function to execute.
	FunctionDescriptor *FunctionDescriptor `protobuf:"bytes,4,opt,name=function_descriptor,json=functionDescriptor,proto3" json:"function_descriptor,omitempty"`
	// ID of the job that this task belongs to.
	JobId []byte `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Task ID of the task.
	TaskId []byte `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Task ID of the parent task.
	ParentTaskId []byte `protobuf:"bytes,7,opt,name=parent_task_id,json=parentTaskId,proto3" json:"parent_task_id,omitempty"`
	// A count of the number of tasks submitted by the parent task before this one.
	ParentCounter uint64 `protobuf:"varint,8,opt,name=parent_counter,json=parentCounter,proto3" json:"parent_counter,omitempty"`
	// Task ID of the caller. This is the same as parent_task_id for non-actors.
	// This is the actor ID (embedded in a nil task ID) for actors.
	CallerId []byte `protobuf:"bytes,9,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	// / Address of the caller.
	CallerAddress *Address `protobuf:"bytes,10,opt,name=caller_address,json=callerAddress,proto3" json:"caller_address,omitempty"`
	// Task arguments.
	Args []*TaskArg `protobuf:"bytes,11,rep,name=args,proto3" json:"args,omitempty"`
	// Number of return objects.
	NumReturns uint64 `protobuf:"varint,12,opt,name=num_returns,json=numReturns,proto3" json:"num_returns,omitempty"`
	// Quantities of the different resources required by this task.
	RequiredResources map[string]float64 `protobuf:"bytes,13,rep,name=required_resources,json=requiredResources,proto3" json:"required_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// The resources required for placing this task on a node. If this is empty,
	// then the placement resources are equal to the required_resources.
	RequiredPlacementResources map[string]float64 `protobuf:"bytes,14,rep,name=required_placement_resources,json=requiredPlacementResources,proto3" json:"required_placement_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// Task specification for an actor creation task.
	// This field is only valid when `type == ACTOR_CREATION_TASK`.
	ActorCreationTaskSpec *ActorCreationTaskSpec `protobuf:"bytes,15,opt,name=actor_creation_task_spec,json=actorCreationTaskSpec,proto3" json:"actor_creation_task_spec,omitempty"`
	// Task specification for an actor task.
	// This field is only valid when `type == ACTOR_TASK`.
	ActorTaskSpec *ActorTaskSpec `protobuf:"bytes,16,opt,name=actor_task_spec,json=actorTaskSpec,proto3" json:"actor_task_spec,omitempty"`
	// Number of times this task may be retried on worker failure.
	MaxRetries int32 `protobuf:"varint,17,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// Whether or not to skip the execution of this task. When it's true,
	// the receiver will not execute the task. This field is used by async actors
	// to guarantee task submission order after restart.
	SkipExecution bool `protobuf:"varint,21,opt,name=skip_execution,json=skipExecution,proto3" json:"skip_execution,omitempty"`
	// Breakpoint if this task should drop into the debugger when it starts executing
	// and "" if the task should not drop into the debugger.
	DebuggerBreakpoint []byte `protobuf:"bytes,22,opt,name=debugger_breakpoint,json=debuggerBreakpoint,proto3" json:"debugger_breakpoint,omitempty"`
	// Runtime environment for this task.
	RuntimeEnvInfo *RuntimeEnvInfo `protobuf:"bytes,23,opt,name=runtime_env_info,json=runtimeEnvInfo,proto3" json:"runtime_env_info,omitempty"`
	// The concurrency group name in which this task will be performed.
	ConcurrencyGroupName string `protobuf:"bytes,24,opt,name=concurrency_group_name,json=concurrencyGroupName,proto3" json:"concurrency_group_name,omitempty"`
	// Whether application-level errors (exceptions) should be retried.
	RetryExceptions bool `protobuf:"varint,25,opt,name=retry_exceptions,json=retryExceptions,proto3" json:"retry_exceptions,omitempty"`
	// A serialized exception list that serves as an allowlist of frontend-language
	// exceptions/errors that should be retried.
	SerializedRetryExceptionAllowlist []byte `protobuf:"bytes,26,opt,name=serialized_retry_exception_allowlist,json=serializedRetryExceptionAllowlist,proto3" json:"serialized_retry_exception_allowlist,omitempty"`
	// The depth of the task. The driver has depth 0, anything it calls has depth
	// 1, etc.
	Depth int64 `protobuf:"varint,27,opt,name=depth,proto3" json:"depth,omitempty"`
	// Strategy about how to schedule this task.
	SchedulingStrategy *SchedulingStrategy `protobuf:"bytes,28,opt,name=scheduling_strategy,json=schedulingStrategy,proto3" json:"scheduling_strategy,omitempty"`
	// A count of the number of times this task has been attempted so far. 0
	// means this is the first execution.
	AttemptNumber uint64 `protobuf:"varint,29,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
	// This task returns a dynamic number of objects.
	ReturnsDynamic bool `protobuf:"varint,30,opt,name=returns_dynamic,json=returnsDynamic,proto3" json:"returns_dynamic,omitempty"`
	// A list of ObjectIDs that were created by this task but that should be
	// owned by the task's caller. The task should return the corresponding
	// ObjectRefs in its actual return value.
	// NOTE(swang): This should only be set when the attempt number > 0. On the
	// first execution, we do not yet know whether the task has dynamic return
	// objects.
	DynamicReturnIds [][]byte `protobuf:"bytes,31,rep,name=dynamic_return_ids,json=dynamicReturnIds,proto3" json:"dynamic_return_ids,omitempty"`
	// Job config for the task. Only set for normal task or actor creation task.
	JobConfig *JobConfig `protobuf:"bytes,32,opt,name=job_config,json=jobConfig,proto3,oneof" json:"job_config,omitempty"`
	// TODO(rickyx): Remove this once we figure out a way to handle task ids
	// across multiple threads properly.
	// The task id of the CoreWorker's main thread from which the task is submitted.
	// This will be the actor creation task's task id for concurrent actors. Or
	// the main thread's task id for other cases.
	SubmitterTaskId []byte `protobuf:"bytes,33,opt,name=submitter_task_id,json=submitterTaskId,proto3" json:"submitter_task_id,omitempty"`
	// True if the task is a streaming generator. When it is true,
	// returns_dynamic has to be true as well. This is a temporary flag
	// until we migrate the generator implementation to streaming.
	// TODO(sang): Remove it once migrating to the streaming generator
	// by default.
	StreamingGenerator bool `protobuf:"varint,34,opt,name=streaming_generator,json=streamingGenerator,proto3" json:"streaming_generator,omitempty"`
	// Some timestamps of the task's lifetime, useful for metrics.
	// The time the task's dependencies have been resolved.
	DependencyResolutionTimestampMs int64 `protobuf:"varint,35,opt,name=dependency_resolution_timestamp_ms,json=dependencyResolutionTimestampMs,proto3" json:"dependency_resolution_timestamp_ms,omitempty"`
	// The time that the task is given a lease, and sent to the executing core
	// worker.
	LeaseGrantTimestampMs int64 `protobuf:"varint,36,opt,name=lease_grant_timestamp_ms,json=leaseGrantTimestampMs,proto3" json:"lease_grant_timestamp_ms,omitempty"`
	// Number of return values from a completed streaming generator return.
	// The value is set only when a task is completed once.
	NumStreamingGeneratorReturns *uint64 `protobuf:"varint,37,opt,name=num_streaming_generator_returns,json=numStreamingGeneratorReturns,proto3,oneof" json:"num_streaming_generator_returns,omitempty"`
	// The number of unconsumed objects where the streaming
	// generator pauses until the caller
	// reads object ref stream.
	// -1 means there's no backpressure enabled.
	// TODO(sang): Maybe we should consolidate all streaming generator related config
	// to a separate message?
	GeneratorBackpressureNumObjects int64 `protobuf:"varint,38,opt,name=generator_backpressure_num_objects,json=generatorBackpressureNumObjects,proto3" json:"generator_backpressure_num_objects,omitempty"`
	// Boolean if task events enabled, i.e tasks events would be reported.
	EnableTaskEvents bool `protobuf:"varint,39,opt,name=enable_task_events,json=enableTaskEvents,proto3" json:"enable_task_events,omitempty"`
	// If this task is originated from a detached actor,
	// this field contains the detached actor id.
	// Otherwise it's empty and is originated from a driver.
	RootDetachedActorId []byte `protobuf:"bytes,40,opt,name=root_detached_actor_id,json=rootDetachedActorId,proto3" json:"root_detached_actor_id,omitempty"`
}

func (x *TaskSpec) Reset() {
	*x = TaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSpec) ProtoMessage() {}

func (x *TaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSpec.ProtoReflect.Descriptor instead.
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{33}
}

func (x *TaskSpec) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_NORMAL_TASK
}

func (x *TaskSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskSpec) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_PYTHON
}

func (x *TaskSpec) GetFunctionDescriptor() *FunctionDescriptor {
	if x != nil {
		return x.FunctionDescriptor
	}
	return nil
}

func (x *TaskSpec) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *TaskSpec) GetTaskId() []byte {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskSpec) GetParentTaskId() []byte {
	if x != nil {
		return x.ParentTaskId
	}
	return nil
}

func (x *TaskSpec) GetParentCounter() uint64 {
	if x != nil {
		return x.ParentCounter
	}
	return 0
}

func (x *TaskSpec) GetCallerId() []byte {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *TaskSpec) GetCallerAddress() *Address {
	if x != nil {
		return x.CallerAddress
	}
	return nil
}

func (x *TaskSpec) GetArgs() []*TaskArg {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TaskSpec) GetNumReturns() uint64 {
	if x != nil {
		return x.NumReturns
	}
	return 0
}

func (x *TaskSpec) GetRequiredResources() map[string]float64 {
	if x != nil {
		return x.RequiredResources
	}
	return nil
}

func (x *TaskSpec) GetRequiredPlacementResources() map[string]float64 {
	if x != nil {
		return x.RequiredPlacementResources
	}
	return nil
}

func (x *TaskSpec) GetActorCreationTaskSpec() *ActorCreationTaskSpec {
	if x != nil {
		return x.ActorCreationTaskSpec
	}
	return nil
}

func (x *TaskSpec) GetActorTaskSpec() *ActorTaskSpec {
	if x != nil {
		return x.ActorTaskSpec
	}
	return nil
}

func (x *TaskSpec) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *TaskSpec) GetSkipExecution() bool {
	if x != nil {
		return x.SkipExecution
	}
	return false
}

func (x *TaskSpec) GetDebuggerBreakpoint() []byte {
	if x != nil {
		return x.DebuggerBreakpoint
	}
	return nil
}

func (x *TaskSpec) GetRuntimeEnvInfo() *RuntimeEnvInfo {
	if x != nil {
		return x.RuntimeEnvInfo
	}
	return nil
}

func (x *TaskSpec) GetConcurrencyGroupName() string {
	if x != nil {
		return x.ConcurrencyGroupName
	}
	return ""
}

func (x *TaskSpec) GetRetryExceptions() bool {
	if x != nil {
		return x.RetryExceptions
	}
	return false
}

func (x *TaskSpec) GetSerializedRetryExceptionAllowlist() []byte {
	if x != nil {
		return x.SerializedRetryExceptionAllowlist
	}
	return nil
}

func (x *TaskSpec) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *TaskSpec) GetSchedulingStrategy() *SchedulingStrategy {
	if x != nil {
		return x.SchedulingStrategy
	}
	return nil
}

func (x *TaskSpec) GetAttemptNumber() uint64 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

func (x *TaskSpec) GetReturnsDynamic() bool {
	if x != nil {
		return x.ReturnsDynamic
	}
	return false
}

func (x *TaskSpec) GetDynamicReturnIds() [][]byte {
	if x != nil {
		return x.DynamicReturnIds
	}
	return nil
}

func (x *TaskSpec) GetJobConfig() *JobConfig {
	if x != nil {
		return x.JobConfig
	}
	return nil
}

func (x *TaskSpec) GetSubmitterTaskId() []byte {
	if x != nil {
		return x.SubmitterTaskId
	}
	return nil
}

func (x *TaskSpec) GetStreamingGenerator() bool {
	if x != nil {
		return x.StreamingGenerator
	}
	return false
}

func (x *TaskSpec) GetDependencyResolutionTimestampMs() int64 {
	if x != nil {
		return x.DependencyResolutionTimestampMs
	}
	return 0
}

func (x *TaskSpec) GetLeaseGrantTimestampMs() int64 {
	if x != nil {
		return x.LeaseGrantTimestampMs
	}
	return 0
}

func (x *TaskSpec) GetNumStreamingGeneratorReturns() uint64 {
	if x != nil && x.NumStreamingGeneratorReturns != nil {
		return *x.NumStreamingGeneratorReturns
	}
	return 0
}

func (x *TaskSpec) GetGeneratorBackpressureNumObjects() int64 {
	if x != nil {
		return x.GeneratorBackpressureNumObjects
	}
	return 0
}

func (x *TaskSpec) GetEnableTaskEvents() bool {
	if x != nil {
		return x.EnableTaskEvents
	}
	return false
}

func (x *TaskSpec) GetRootDetachedActorId() []byte {
	if x != nil {
		return x.RootDetachedActorId
	}
	return nil
}

type TaskInfoEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of this task.
	Type TaskType `protobuf:"varint,1,opt,name=type,proto3,enum=ray.rpc.TaskType" json:"type,omitempty"`
	// Name of this task.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Language of this task.
	Language Language `protobuf:"varint,3,opt,name=language,proto3,enum=ray.rpc.Language" json:"language,omitempty"`
	// Function descriptor of this task uniquely describe the function to execute.
	FuncOrClassName string     `protobuf:"bytes,4,opt,name=func_or_class_name,json=funcOrClassName,proto3" json:"func_or_class_name,omitempty"`
	SchedulingState TaskStatus `protobuf:"varint,5,opt,name=scheduling_state,json=schedulingState,proto3,enum=ray.rpc.TaskStatus" json:"scheduling_state,omitempty"`
	// ID of the job that this task belongs to.
	JobId []byte `protobuf:"bytes,6,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Task ID of the task.
	TaskId []byte `protobuf:"bytes,7,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Task ID of the parent task.
	ParentTaskId []byte `protobuf:"bytes,8,opt,name=parent_task_id,json=parentTaskId,proto3" json:"parent_task_id,omitempty"`
	// Quantities of the different resources required by this task.
	RequiredResources map[string]float64 `protobuf:"bytes,13,rep,name=required_resources,json=requiredResources,proto3" json:"required_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// Runtime environment for this task.
	RuntimeEnvInfo *RuntimeEnvInfo `protobuf:"bytes,23,opt,name=runtime_env_info,json=runtimeEnvInfo,proto3" json:"runtime_env_info,omitempty"`
	// The node if of the task. If the task is retried, it could
	// contain the node id of the previous executed task.
	NodeId []byte `protobuf:"bytes,24,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	// The actor id for this task.
	// If the task type is Actor creation task or Actor task
	// this is set. Otherwise, it is empty.
	ActorId []byte `protobuf:"bytes,25,opt,name=actor_id,json=actorId,proto3,oneof" json:"actor_id,omitempty"`
	// The placement group id of this task.
	// If the task/actor is created within a placement group,
	// this value is configured.
	PlacementGroupId []byte `protobuf:"bytes,26,opt,name=placement_group_id,json=placementGroupId,proto3,oneof" json:"placement_group_id,omitempty"`
}

func (x *TaskInfoEntry) Reset() {
	*x = TaskInfoEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfoEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfoEntry) ProtoMessage() {}

func (x *TaskInfoEntry) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfoEntry.ProtoReflect.Descriptor instead.
func (*TaskInfoEntry) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{34}
}

func (x *TaskInfoEntry) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_NORMAL_TASK
}

func (x *TaskInfoEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskInfoEntry) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_PYTHON
}

func (x *TaskInfoEntry) GetFuncOrClassName() string {
	if x != nil {
		return x.FuncOrClassName
	}
	return ""
}

func (x *TaskInfoEntry) GetSchedulingState() TaskStatus {
	if x != nil {
		return x.SchedulingState
	}
	return TaskStatus_NIL
}

func (x *TaskInfoEntry) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *TaskInfoEntry) GetTaskId() []byte {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskInfoEntry) GetParentTaskId() []byte {
	if x != nil {
		return x.ParentTaskId
	}
	return nil
}

func (x *TaskInfoEntry) GetRequiredResources() map[string]float64 {
	if x != nil {
		return x.RequiredResources
	}
	return nil
}

func (x *TaskInfoEntry) GetRuntimeEnvInfo() *RuntimeEnvInfo {
	if x != nil {
		return x.RuntimeEnvInfo
	}
	return nil
}

func (x *TaskInfoEntry) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *TaskInfoEntry) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *TaskInfoEntry) GetPlacementGroupId() []byte {
	if x != nil {
		return x.PlacementGroupId
	}
	return nil
}

type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleId      *Bundle_BundleIdentifier `protobuf:"bytes,1,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	UnitResources map[string]float64       `protobuf:"bytes,2,rep,name=unit_resources,json=unitResources,proto3" json:"unit_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// The location of this bundle.
	NodeId []byte `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{35}
}

func (x *Bundle) GetBundleId() *Bundle_BundleIdentifier {
	if x != nil {
		return x.BundleId
	}
	return nil
}

func (x *Bundle) GetUnitResources() map[string]float64 {
	if x != nil {
		return x.UnitResources
	}
	return nil
}

func (x *Bundle) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

type PlacementGroupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the PlacementGroup.
	PlacementGroupId []byte `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
	// The name of the placement group.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The array of the bundle in Placement Group.
	Bundles []*Bundle `protobuf:"bytes,3,rep,name=bundles,proto3" json:"bundles,omitempty"`
	// The schedule strategy of this Placement Group.
	Strategy PlacementStrategy `protobuf:"varint,4,opt,name=strategy,proto3,enum=ray.rpc.PlacementStrategy" json:"strategy,omitempty"`
	// The job id that created this placement group.
	CreatorJobId []byte `protobuf:"bytes,5,opt,name=creator_job_id,json=creatorJobId,proto3" json:"creator_job_id,omitempty"`
	// The actor id that created this placement group.
	CreatorActorId []byte `protobuf:"bytes,6,opt,name=creator_actor_id,json=creatorActorId,proto3" json:"creator_actor_id,omitempty"`
	// Whether or not if the creator job is dead.
	CreatorJobDead bool `protobuf:"varint,7,opt,name=creator_job_dead,json=creatorJobDead,proto3" json:"creator_job_dead,omitempty"`
	// Whether or not if the creator actor is dead.
	CreatorActorDead bool `protobuf:"varint,8,opt,name=creator_actor_dead,json=creatorActorDead,proto3" json:"creator_actor_dead,omitempty"`
	// Whether the placement group is persistent.
	IsDetached bool `protobuf:"varint,9,opt,name=is_detached,json=isDetached,proto3" json:"is_detached,omitempty"`
	// The maximum fraction of CPU cores that this placement group can use on each node.
	MaxCpuFractionPerNode float64 `protobuf:"fixed64,10,opt,name=max_cpu_fraction_per_node,json=maxCpuFractionPerNode,proto3" json:"max_cpu_fraction_per_node,omitempty"`
	// Binary ID of the target node where bundles should be placed
	// iff the target node has enough available resources and alive.
	// Otherwise, the bundles can be placed elsewhere.
	// This only applies to STRICT_PACK pg.
	SoftTargetNodeId []byte `protobuf:"bytes,11,opt,name=soft_target_node_id,json=softTargetNodeId,proto3" json:"soft_target_node_id,omitempty"`
}

func (x *PlacementGroupSpec) Reset() {
	*x = PlacementGroupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementGroupSpec) ProtoMessage() {}

func (x *PlacementGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementGroupSpec.ProtoReflect.Descriptor instead.
func (*PlacementGroupSpec) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{36}
}

func (x *PlacementGroupSpec) GetPlacementGroupId() []byte {
	if x != nil {
		return x.PlacementGroupId
	}
	return nil
}

func (x *PlacementGroupSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlacementGroupSpec) GetBundles() []*Bundle {
	if x != nil {
		return x.Bundles
	}
	return nil
}

func (x *PlacementGroupSpec) GetStrategy() PlacementStrategy {
	if x != nil {
		return x.Strategy
	}
	return PlacementStrategy_PACK
}

func (x *PlacementGroupSpec) GetCreatorJobId() []byte {
	if x != nil {
		return x.CreatorJobId
	}
	return nil
}

func (x *PlacementGroupSpec) GetCreatorActorId() []byte {
	if x != nil {
		return x.CreatorActorId
	}
	return nil
}

func (x *PlacementGroupSpec) GetCreatorJobDead() bool {
	if x != nil {
		return x.CreatorJobDead
	}
	return false
}

func (x *PlacementGroupSpec) GetCreatorActorDead() bool {
	if x != nil {
		return x.CreatorActorDead
	}
	return false
}

func (x *PlacementGroupSpec) GetIsDetached() bool {
	if x != nil {
		return x.IsDetached
	}
	return false
}

func (x *PlacementGroupSpec) GetMaxCpuFractionPerNode() float64 {
	if x != nil {
		return x.MaxCpuFractionPerNode
	}
	return 0
}

func (x *PlacementGroupSpec) GetSoftTargetNodeId() []byte {
	if x != nil {
		return x.SoftTargetNodeId
	}
	return nil
}

type ObjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ObjectID that the worker has a reference to.
	ObjectId []byte `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// The address of the object's owner.
	OwnerAddress *Address `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	// Language call site of the object reference (i.e., file and line number).
	// Used to print debugging information if there is an error retrieving the
	// object.
	CallSite string `protobuf:"bytes,3,opt,name=call_site,json=callSite,proto3" json:"call_site,omitempty"`
}

func (x *ObjectReference) Reset() {
	*x = ObjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectReference) ProtoMessage() {}

func (x *ObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectReference.ProtoReflect.Descriptor instead.
func (*ObjectReference) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{37}
}

func (x *ObjectReference) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectReference) GetOwnerAddress() *Address {
	if x != nil {
		return x.OwnerAddress
	}
	return nil
}

func (x *ObjectReference) GetCallSite() string {
	if x != nil {
		return x.CallSite
	}
	return ""
}

type ObjectReferenceCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference that the worker has or had a reference to.
	Reference *ObjectReference `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	// Whether the worker is still using the ObjectID locally. This means that
	// it has a copy of the ObjectID in the language frontend, has a pending task
	// that depends on the object, and/or owns an ObjectID that is in scope and
	// that contains the ObjectID.
	HasLocalRef bool `protobuf:"varint,2,opt,name=has_local_ref,json=hasLocalRef,proto3" json:"has_local_ref,omitempty"`
	// Any other borrowers that the worker created (by passing the ID on to them).
	Borrowers []*Address `protobuf:"bytes,3,rep,name=borrowers,proto3" json:"borrowers,omitempty"`
	// The borrower may have returned the object ID nested inside the return
	// value of a task that it executed. This list contains all task returns that
	// were owned by a process other than the borrower. Then, the process that
	// owns the task's return value is also a borrower for as long as it has the
	// task return ID in scope. Note that only the object ID and owner address
	// are used for elements in this list.
	StoredInObjects []*ObjectReference `protobuf:"bytes,4,rep,name=stored_in_objects,json=storedInObjects,proto3" json:"stored_in_objects,omitempty"`
	// The borrowed object ID that contained this object, if any. This is used
	// for nested object IDs.
	ContainedInBorrowedIds [][]byte `protobuf:"bytes,5,rep,name=contained_in_borrowed_ids,json=containedInBorrowedIds,proto3" json:"contained_in_borrowed_ids,omitempty"`
	// The object IDs that this object contains, if any. This is used for nested
	// object IDs.
	Contains [][]byte `protobuf:"bytes,6,rep,name=contains,proto3" json:"contains,omitempty"`
}

func (x *ObjectReferenceCount) Reset() {
	*x = ObjectReferenceCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectReferenceCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectReferenceCount) ProtoMessage() {}

func (x *ObjectReferenceCount) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectReferenceCount.ProtoReflect.Descriptor instead.
func (*ObjectReferenceCount) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{38}
}

func (x *ObjectReferenceCount) GetReference() *ObjectReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *ObjectReferenceCount) GetHasLocalRef() bool {
	if x != nil {
		return x.HasLocalRef
	}
	return false
}

func (x *ObjectReferenceCount) GetBorrowers() []*Address {
	if x != nil {
		return x.Borrowers
	}
	return nil
}

func (x *ObjectReferenceCount) GetStoredInObjects() []*ObjectReference {
	if x != nil {
		return x.StoredInObjects
	}
	return nil
}

func (x *ObjectReferenceCount) GetContainedInBorrowedIds() [][]byte {
	if x != nil {
		return x.ContainedInBorrowedIds
	}
	return nil
}

func (x *ObjectReferenceCount) GetContains() [][]byte {
	if x != nil {
		return x.Contains
	}
	return nil
}

// Argument in the task.
type TaskArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pass-by-ref argument.
	ObjectRef *ObjectReference `protobuf:"bytes,1,opt,name=object_ref,json=objectRef,proto3" json:"object_ref,omitempty"`
	// Data for pass-by-value arguments.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Metadata for pass-by-value arguments.
	Metadata []byte `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// ObjectIDs that were nested in the inlined arguments of the data field.
	NestedInlinedRefs []*ObjectReference `protobuf:"bytes,4,rep,name=nested_inlined_refs,json=nestedInlinedRefs,proto3" json:"nested_inlined_refs,omitempty"`
}

func (x *TaskArg) Reset() {
	*x = TaskArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskArg) ProtoMessage() {}

func (x *TaskArg) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskArg.ProtoReflect.Descriptor instead.
func (*TaskArg) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{39}
}

func (x *TaskArg) GetObjectRef() *ObjectReference {
	if x != nil {
		return x.ObjectRef
	}
	return nil
}

func (x *TaskArg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskArg) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaskArg) GetNestedInlinedRefs() []*ObjectReference {
	if x != nil {
		return x.NestedInlinedRefs
	}
	return nil
}

type ReturnObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Object ID.
	ObjectId []byte `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// If set, indicates the data is in plasma instead of inline. This
	// means that data and metadata will be empty.
	InPlasma bool `protobuf:"varint,2,opt,name=in_plasma,json=inPlasma,proto3" json:"in_plasma,omitempty"`
	// Data of the object.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Metadata of the object.
	Metadata []byte `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// ObjectIDs that were nested in data. This is only set for inlined objects.
	NestedInlinedRefs []*ObjectReference `protobuf:"bytes,5,rep,name=nested_inlined_refs,json=nestedInlinedRefs,proto3" json:"nested_inlined_refs,omitempty"`
	// Size of this object.
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ReturnObject) Reset() {
	*x = ReturnObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnObject) ProtoMessage() {}

func (x *ReturnObject) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnObject.ProtoReflect.Descriptor instead.
func (*ReturnObject) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{40}
}

func (x *ReturnObject) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ReturnObject) GetInPlasma() bool {
	if x != nil {
		return x.InPlasma
	}
	return false
}

func (x *ReturnObject) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReturnObject) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ReturnObject) GetNestedInlinedRefs() []*ObjectReference {
	if x != nil {
		return x.NestedInlinedRefs
	}
	return nil
}

func (x *ReturnObject) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Task spec of an actor creation task.
type ActorCreationTaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the actor that will be created by this task.
	ActorId []byte `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	// The max number of times this actor should be restarted.
	// If this number is 0 the actor won't be restarted.
	// If this number is -1 the actor will be restarted indefinitely.
	MaxActorRestarts int64 `protobuf:"varint,3,opt,name=max_actor_restarts,json=maxActorRestarts,proto3" json:"max_actor_restarts,omitempty"`
	// The max number of times tasks submitted on this actor should be retried
	// if the actor fails and is restarted.
	// If this number is 0 the tasks won't be resubmitted.
	// If this number is -1 the tasks will be resubmitted indefinitely.
	MaxTaskRetries int64 `protobuf:"varint,4,opt,name=max_task_retries,json=maxTaskRetries,proto3" json:"max_task_retries,omitempty"`
	// The dynamic options used in the worker command when starting a worker process for
	// an actor creation task. If the list isn't empty, the options will be used to replace
	// the placeholder string `RAY_WORKER_DYNAMIC_OPTION_PLACEHOLDER` in the worker command.
	DynamicWorkerOptions []string `protobuf:"bytes,5,rep,name=dynamic_worker_options,json=dynamicWorkerOptions,proto3" json:"dynamic_worker_options,omitempty"`
	// The max number of concurrent calls for default concurrency group of this actor.
	MaxConcurrency int32 `protobuf:"varint,6,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	// Whether the actor is persistent.
	IsDetached bool `protobuf:"varint,7,opt,name=is_detached,json=isDetached,proto3" json:"is_detached,omitempty"`
	// Globally-unique name of the actor. Should only be populated when is_detached is true.
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace of the actor. Should only be populated when is_detached is true.
	RayNamespace string `protobuf:"bytes,9,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
	// Whether the actor use async actor calls.
	IsAsyncio bool `protobuf:"varint,10,opt,name=is_asyncio,json=isAsyncio,proto3" json:"is_asyncio,omitempty"`
	// Field used for storing application-level extensions to the actor definition.
	ExtensionData string `protobuf:"bytes,11,opt,name=extension_data,json=extensionData,proto3" json:"extension_data,omitempty"`
	// Serialized bytes of the Handle to the actor that will be created by this task.
	SerializedActorHandle []byte `protobuf:"bytes,12,opt,name=serialized_actor_handle,json=serializedActorHandle,proto3" json:"serialized_actor_handle,omitempty"`
	// The concurrency groups of this actor.
	ConcurrencyGroups []*ConcurrencyGroup `protobuf:"bytes,13,rep,name=concurrency_groups,json=concurrencyGroups,proto3" json:"concurrency_groups,omitempty"`
	// Whether to enable out of order execution.
	ExecuteOutOfOrder bool `protobuf:"varint,14,opt,name=execute_out_of_order,json=executeOutOfOrder,proto3" json:"execute_out_of_order,omitempty"`
	// The max number of pending actor calls.
	MaxPendingCalls int32 `protobuf:"varint,15,opt,name=max_pending_calls,json=maxPendingCalls,proto3" json:"max_pending_calls,omitempty"`
}

func (x *ActorCreationTaskSpec) Reset() {
	*x = ActorCreationTaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorCreationTaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorCreationTaskSpec) ProtoMessage() {}

func (x *ActorCreationTaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorCreationTaskSpec.ProtoReflect.Descriptor instead.
func (*ActorCreationTaskSpec) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{41}
}

func (x *ActorCreationTaskSpec) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ActorCreationTaskSpec) GetMaxActorRestarts() int64 {
	if x != nil {
		return x.MaxActorRestarts
	}
	return 0
}

func (x *ActorCreationTaskSpec) GetMaxTaskRetries() int64 {
	if x != nil {
		return x.MaxTaskRetries
	}
	return 0
}

func (x *ActorCreationTaskSpec) GetDynamicWorkerOptions() []string {
	if x != nil {
		return x.DynamicWorkerOptions
	}
	return nil
}

func (x *ActorCreationTaskSpec) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *ActorCreationTaskSpec) GetIsDetached() bool {
	if x != nil {
		return x.IsDetached
	}
	return false
}

func (x *ActorCreationTaskSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActorCreationTaskSpec) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

func (x *ActorCreationTaskSpec) GetIsAsyncio() bool {
	if x != nil {
		return x.IsAsyncio
	}
	return false
}

func (x *ActorCreationTaskSpec) GetExtensionData() string {
	if x != nil {
		return x.ExtensionData
	}
	return ""
}

func (x *ActorCreationTaskSpec) GetSerializedActorHandle() []byte {
	if x != nil {
		return x.SerializedActorHandle
	}
	return nil
}

func (x *ActorCreationTaskSpec) GetConcurrencyGroups() []*ConcurrencyGroup {
	if x != nil {
		return x.ConcurrencyGroups
	}
	return nil
}

func (x *ActorCreationTaskSpec) GetExecuteOutOfOrder() bool {
	if x != nil {
		return x.ExecuteOutOfOrder
	}
	return false
}

func (x *ActorCreationTaskSpec) GetMaxPendingCalls() int32 {
	if x != nil {
		return x.MaxPendingCalls
	}
	return 0
}

// Task spec of an actor task.
type ActorTaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actor ID of the actor that this task is executed on.
	ActorId []byte `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	// The dummy object ID of the actor creation task.
	ActorCreationDummyObjectId []byte `protobuf:"bytes,4,opt,name=actor_creation_dummy_object_id,json=actorCreationDummyObjectId,proto3" json:"actor_creation_dummy_object_id,omitempty"`
	// Number of tasks that have been submitted to this actor so far.
	ActorCounter uint64 `protobuf:"varint,5,opt,name=actor_counter,json=actorCounter,proto3" json:"actor_counter,omitempty"`
}

func (x *ActorTaskSpec) Reset() {
	*x = ActorTaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorTaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorTaskSpec) ProtoMessage() {}

func (x *ActorTaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorTaskSpec.ProtoReflect.Descriptor instead.
func (*ActorTaskSpec) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{42}
}

func (x *ActorTaskSpec) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ActorTaskSpec) GetActorCreationDummyObjectId() []byte {
	if x != nil {
		return x.ActorCreationDummyObjectId
	}
	return nil
}

func (x *ActorTaskSpec) GetActorCounter() uint64 {
	if x != nil {
		return x.ActorCounter
	}
	return 0
}

// Represents a task, including task spec.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskSpec *TaskSpec `protobuf:"bytes,1,opt,name=task_spec,json=taskSpec,proto3" json:"task_spec,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{43}
}

func (x *Task) GetTaskSpec() *TaskSpec {
	if x != nil {
		return x.TaskSpec
	}
	return nil
}

// Represents a resource id.
type ResourceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the resource (i.e., CPU #3).
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The quantity of the resource assigned (i.e., 0.5 CPU).
	Quantity float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *ResourceId) Reset() {
	*x = ResourceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceId) ProtoMessage() {}

func (x *ResourceId) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceId.ProtoReflect.Descriptor instead.
func (*ResourceId) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{44}
}

func (x *ResourceId) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ResourceId) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// Represents a set of resource ids.
type ResourceMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the resource (i.e., "CPU").
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The set of resource ids assigned.
	ResourceIds []*ResourceId `protobuf:"bytes,2,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
}

func (x *ResourceMapEntry) Reset() {
	*x = ResourceMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMapEntry) ProtoMessage() {}

func (x *ResourceMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMapEntry.ProtoReflect.Descriptor instead.
func (*ResourceMapEntry) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{45}
}

func (x *ResourceMapEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceMapEntry) GetResourceIds() []*ResourceId {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

type ViewData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this Census view.
	ViewName string `protobuf:"bytes,1,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	// The list of measures recorded under this view.
	Measures []*ViewData_Measure `protobuf:"bytes,2,rep,name=measures,proto3" json:"measures,omitempty"`
}

func (x *ViewData) Reset() {
	*x = ViewData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewData) ProtoMessage() {}

func (x *ViewData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewData.ProtoReflect.Descriptor instead.
func (*ViewData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{46}
}

func (x *ViewData) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *ViewData) GetMeasures() []*ViewData_Measure {
	if x != nil {
		return x.Measures
	}
	return nil
}

// Debug info for a referenced object.
type ObjectRefInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Object id that is referenced.
	ObjectId []byte `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Language call site of the object reference (i.e., file and line number).
	CallSite string `protobuf:"bytes,2,opt,name=call_site,json=callSite,proto3" json:"call_site,omitempty"`
	// Size of the object if this core worker is the owner, otherwise -1.
	ObjectSize int64 `protobuf:"varint,3,opt,name=object_size,json=objectSize,proto3" json:"object_size,omitempty"`
	// Number of local references to the object.
	LocalRefCount int64 `protobuf:"varint,4,opt,name=local_ref_count,json=localRefCount,proto3" json:"local_ref_count,omitempty"`
	// Number of references in submitted tasks.
	SubmittedTaskRefCount int64 `protobuf:"varint,5,opt,name=submitted_task_ref_count,json=submittedTaskRefCount,proto3" json:"submitted_task_ref_count,omitempty"`
	// Object ids that contain this object.
	ContainedInOwned [][]byte `protobuf:"bytes,6,rep,name=contained_in_owned,json=containedInOwned,proto3" json:"contained_in_owned,omitempty"`
	// True if this object is pinned in memory by the current process.
	PinnedInMemory bool `protobuf:"varint,7,opt,name=pinned_in_memory,json=pinnedInMemory,proto3" json:"pinned_in_memory,omitempty"`
	// Status of the task that creates this object.
	TaskStatus TaskStatus `protobuf:"varint,8,opt,name=task_status,json=taskStatus,proto3,enum=ray.rpc.TaskStatus" json:"task_status,omitempty"`
	// A count of the number of times this task has been attempted so far. 0
	// means this is the first execution.
	AttemptNumber uint64 `protobuf:"varint,9,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
}

func (x *ObjectRefInfo) Reset() {
	*x = ObjectRefInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectRefInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectRefInfo) ProtoMessage() {}

func (x *ObjectRefInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectRefInfo.ProtoReflect.Descriptor instead.
func (*ObjectRefInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{47}
}

func (x *ObjectRefInfo) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectRefInfo) GetCallSite() string {
	if x != nil {
		return x.CallSite
	}
	return ""
}

func (x *ObjectRefInfo) GetObjectSize() int64 {
	if x != nil {
		return x.ObjectSize
	}
	return 0
}

func (x *ObjectRefInfo) GetLocalRefCount() int64 {
	if x != nil {
		return x.LocalRefCount
	}
	return 0
}

func (x *ObjectRefInfo) GetSubmittedTaskRefCount() int64 {
	if x != nil {
		return x.SubmittedTaskRefCount
	}
	return 0
}

func (x *ObjectRefInfo) GetContainedInOwned() [][]byte {
	if x != nil {
		return x.ContainedInOwned
	}
	return nil
}

func (x *ObjectRefInfo) GetPinnedInMemory() bool {
	if x != nil {
		return x.PinnedInMemory
	}
	return false
}

func (x *ObjectRefInfo) GetTaskStatus() TaskStatus {
	if x != nil {
		return x.TaskStatus
	}
	return TaskStatus_NIL
}

func (x *ObjectRefInfo) GetAttemptNumber() uint64 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

// Details about the allocation of a given resource. Some resources
// (e.g., GPUs) have individually allocatable units that are represented
// as "slots" here.
type ResourceAllocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceSlots []*ResourceAllocations_ResourceSlot `protobuf:"bytes,1,rep,name=resource_slots,json=resourceSlots,proto3" json:"resource_slots,omitempty"`
}

func (x *ResourceAllocations) Reset() {
	*x = ResourceAllocations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAllocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAllocations) ProtoMessage() {}

func (x *ResourceAllocations) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAllocations.ProtoReflect.Descriptor instead.
func (*ResourceAllocations) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{48}
}

func (x *ResourceAllocations) GetResourceSlots() []*ResourceAllocations_ResourceSlot {
	if x != nil {
		return x.ResourceSlots
	}
	return nil
}

// Debug info returned from the core worker.
type CoreWorkerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of pending normal and actor tasks.
	NumPendingTasks int32 `protobuf:"varint,2,opt,name=num_pending_tasks,json=numPendingTasks,proto3" json:"num_pending_tasks,omitempty"`
	// Number of object refs in local scope.
	NumObjectRefsInScope int32 `protobuf:"varint,3,opt,name=num_object_refs_in_scope,json=numObjectRefsInScope,proto3" json:"num_object_refs_in_scope,omitempty"`
	// IP address of the core worker.
	IpAddress string `protobuf:"bytes,7,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Port of the core worker.
	Port int64 `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
	// Actor ID.
	ActorId []byte `protobuf:"bytes,9,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	// A map from the resource name (e.g. "CPU") to its allocation.
	UsedResources map[string]*ResourceAllocations `protobuf:"bytes,10,rep,name=used_resources,json=usedResources,proto3" json:"used_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A string displayed on Dashboard.
	WebuiDisplay map[string]string `protobuf:"bytes,11,rep,name=webui_display,json=webuiDisplay,proto3" json:"webui_display,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Number of objects that are IN_PLASMA_ERROR in the local memory store.
	NumInPlasma int32 `protobuf:"varint,12,opt,name=num_in_plasma,json=numInPlasma,proto3" json:"num_in_plasma,omitempty"`
	// Number of objects stored in local memory.
	NumLocalObjects int32 `protobuf:"varint,13,opt,name=num_local_objects,json=numLocalObjects,proto3" json:"num_local_objects,omitempty"`
	// Used local object store memory.
	UsedObjectStoreMemory int64 `protobuf:"varint,14,opt,name=used_object_store_memory,json=usedObjectStoreMemory,proto3" json:"used_object_store_memory,omitempty"`
	// Length of the task queue.
	TaskQueueLength int32 `protobuf:"varint,15,opt,name=task_queue_length,json=taskQueueLength,proto3" json:"task_queue_length,omitempty"`
	// Number of executed tasks.
	NumExecutedTasks int32 `protobuf:"varint,16,opt,name=num_executed_tasks,json=numExecutedTasks,proto3" json:"num_executed_tasks,omitempty"`
	// Actor constructor.
	ActorTitle string `protobuf:"bytes,17,opt,name=actor_title,json=actorTitle,proto3" json:"actor_title,omitempty"`
	// Local reference table.
	ObjectRefs []*ObjectRefInfo `protobuf:"bytes,18,rep,name=object_refs,json=objectRefs,proto3" json:"object_refs,omitempty"`
	// Job ID.
	JobId []byte `protobuf:"bytes,19,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Worker id of core worker.
	WorkerId []byte `protobuf:"bytes,20,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Language
	Language Language `protobuf:"varint,21,opt,name=language,proto3,enum=ray.rpc.Language" json:"language,omitempty"`
	// PID of the worker process.
	Pid uint32 `protobuf:"varint,22,opt,name=pid,proto3" json:"pid,omitempty"`
	// The worker type.
	WorkerType WorkerType `protobuf:"varint,23,opt,name=worker_type,json=workerType,proto3,enum=ray.rpc.WorkerType" json:"worker_type,omitempty"`
	// Length of the number of objects without truncation.
	ObjectsTotal int64 `protobuf:"varint,24,opt,name=objects_total,json=objectsTotal,proto3" json:"objects_total,omitempty"`
	// Number of objects owned by the worker.
	NumOwnedObjects int64 `protobuf:"varint,25,opt,name=num_owned_objects,json=numOwnedObjects,proto3" json:"num_owned_objects,omitempty"`
	// Number of actors owned by the worker.
	NumOwnedActors int64 `protobuf:"varint,26,opt,name=num_owned_actors,json=numOwnedActors,proto3" json:"num_owned_actors,omitempty"`
	// Number of running tasks
	NumRunningTasks int64 `protobuf:"varint,27,opt,name=num_running_tasks,json=numRunningTasks,proto3" json:"num_running_tasks,omitempty"`
}

func (x *CoreWorkerStats) Reset() {
	*x = CoreWorkerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreWorkerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreWorkerStats) ProtoMessage() {}

func (x *CoreWorkerStats) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreWorkerStats.ProtoReflect.Descriptor instead.
func (*CoreWorkerStats) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{49}
}

func (x *CoreWorkerStats) GetNumPendingTasks() int32 {
	if x != nil {
		return x.NumPendingTasks
	}
	return 0
}

func (x *CoreWorkerStats) GetNumObjectRefsInScope() int32 {
	if x != nil {
		return x.NumObjectRefsInScope
	}
	return 0
}

func (x *CoreWorkerStats) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *CoreWorkerStats) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CoreWorkerStats) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *CoreWorkerStats) GetUsedResources() map[string]*ResourceAllocations {
	if x != nil {
		return x.UsedResources
	}
	return nil
}

func (x *CoreWorkerStats) GetWebuiDisplay() map[string]string {
	if x != nil {
		return x.WebuiDisplay
	}
	return nil
}

func (x *CoreWorkerStats) GetNumInPlasma() int32 {
	if x != nil {
		return x.NumInPlasma
	}
	return 0
}

func (x *CoreWorkerStats) GetNumLocalObjects() int32 {
	if x != nil {
		return x.NumLocalObjects
	}
	return 0
}

func (x *CoreWorkerStats) GetUsedObjectStoreMemory() int64 {
	if x != nil {
		return x.UsedObjectStoreMemory
	}
	return 0
}

func (x *CoreWorkerStats) GetTaskQueueLength() int32 {
	if x != nil {
		return x.TaskQueueLength
	}
	return 0
}

func (x *CoreWorkerStats) GetNumExecutedTasks() int32 {
	if x != nil {
		return x.NumExecutedTasks
	}
	return 0
}

func (x *CoreWorkerStats) GetActorTitle() string {
	if x != nil {
		return x.ActorTitle
	}
	return ""
}

func (x *CoreWorkerStats) GetObjectRefs() []*ObjectRefInfo {
	if x != nil {
		return x.ObjectRefs
	}
	return nil
}

func (x *CoreWorkerStats) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *CoreWorkerStats) GetWorkerId() []byte {
	if x != nil {
		return x.WorkerId
	}
	return nil
}

func (x *CoreWorkerStats) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_PYTHON
}

func (x *CoreWorkerStats) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *CoreWorkerStats) GetWorkerType() WorkerType {
	if x != nil {
		return x.WorkerType
	}
	return WorkerType_WORKER
}

func (x *CoreWorkerStats) GetObjectsTotal() int64 {
	if x != nil {
		return x.ObjectsTotal
	}
	return 0
}

func (x *CoreWorkerStats) GetNumOwnedObjects() int64 {
	if x != nil {
		return x.NumOwnedObjects
	}
	return 0
}

func (x *CoreWorkerStats) GetNumOwnedActors() int64 {
	if x != nil {
		return x.NumOwnedActors
	}
	return 0
}

func (x *CoreWorkerStats) GetNumRunningTasks() int64 {
	if x != nil {
		return x.NumRunningTasks
	}
	return 0
}

// Resource usage reported by the node reporter.
type NodeResourceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node resource usage in serialized json.
	// TODO: add schema for the subfields, e.g.
	// https://github.com/ray-project/ray/blob/e54d3117a40c20ca5441d38ffc72b908bc1b0609/dashboard/modules/reporter/reporter_agent.py#L330-L347
	Json string `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *NodeResourceUsage) Reset() {
	*x = NodeResourceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResourceUsage) ProtoMessage() {}

func (x *NodeResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResourceUsage.ProtoReflect.Descriptor instead.
func (*NodeResourceUsage) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{50}
}

func (x *NodeResourceUsage) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

// Info about a named actor.
type NamedActorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RayNamespace string `protobuf:"bytes,1,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NamedActorInfo) Reset() {
	*x = NamedActorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedActorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedActorInfo) ProtoMessage() {}

func (x *NamedActorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedActorInfo.ProtoReflect.Descriptor instead.
func (*NamedActorInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{51}
}

func (x *NamedActorInfo) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

func (x *NamedActorInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Bundle_BundleIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementGroupId []byte `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
	BundleIndex      int32  `protobuf:"varint,2,opt,name=bundle_index,json=bundleIndex,proto3" json:"bundle_index,omitempty"`
}

func (x *Bundle_BundleIdentifier) Reset() {
	*x = Bundle_BundleIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle_BundleIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle_BundleIdentifier) ProtoMessage() {}

func (x *Bundle_BundleIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle_BundleIdentifier.ProtoReflect.Descriptor instead.
func (*Bundle_BundleIdentifier) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{35, 0}
}

func (x *Bundle_BundleIdentifier) GetPlacementGroupId() []byte {
	if x != nil {
		return x.PlacementGroupId
	}
	return nil
}

func (x *Bundle_BundleIdentifier) GetBundleIndex() int32 {
	if x != nil {
		return x.BundleIndex
	}
	return 0
}

type ViewData_Measure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A short string that describes the tags for this measure, e.g.,
	// "Tag1:Value1,Tag2:Value2,Tag3:Value3"
	Tags string `protobuf:"bytes,1,opt,name=tags,proto3" json:"tags,omitempty"`
	// Int64 type value (if present).
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3" json:"int_value,omitempty"`
	// Double type value (if present).
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	// Distribution type value (if present).
	DistributionMin              float64   `protobuf:"fixed64,4,opt,name=distribution_min,json=distributionMin,proto3" json:"distribution_min,omitempty"`
	DistributionMean             float64   `protobuf:"fixed64,5,opt,name=distribution_mean,json=distributionMean,proto3" json:"distribution_mean,omitempty"`
	DistributionMax              float64   `protobuf:"fixed64,6,opt,name=distribution_max,json=distributionMax,proto3" json:"distribution_max,omitempty"`
	DistributionCount            float64   `protobuf:"fixed64,7,opt,name=distribution_count,json=distributionCount,proto3" json:"distribution_count,omitempty"`
	DistributionBucketBoundaries []float64 `protobuf:"fixed64,8,rep,packed,name=distribution_bucket_boundaries,json=distributionBucketBoundaries,proto3" json:"distribution_bucket_boundaries,omitempty"`
	DistributionBucketCounts     []float64 `protobuf:"fixed64,9,rep,packed,name=distribution_bucket_counts,json=distributionBucketCounts,proto3" json:"distribution_bucket_counts,omitempty"`
}

func (x *ViewData_Measure) Reset() {
	*x = ViewData_Measure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewData_Measure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewData_Measure) ProtoMessage() {}

func (x *ViewData_Measure) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewData_Measure.ProtoReflect.Descriptor instead.
func (*ViewData_Measure) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{46, 0}
}

func (x *ViewData_Measure) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *ViewData_Measure) GetIntValue() int64 {
	if x != nil {
		return x.IntValue
	}
	return 0
}

func (x *ViewData_Measure) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *ViewData_Measure) GetDistributionMin() float64 {
	if x != nil {
		return x.DistributionMin
	}
	return 0
}

func (x *ViewData_Measure) GetDistributionMean() float64 {
	if x != nil {
		return x.DistributionMean
	}
	return 0
}

func (x *ViewData_Measure) GetDistributionMax() float64 {
	if x != nil {
		return x.DistributionMax
	}
	return 0
}

func (x *ViewData_Measure) GetDistributionCount() float64 {
	if x != nil {
		return x.DistributionCount
	}
	return 0
}

func (x *ViewData_Measure) GetDistributionBucketBoundaries() []float64 {
	if x != nil {
		return x.DistributionBucketBoundaries
	}
	return nil
}

func (x *ViewData_Measure) GetDistributionBucketCounts() []float64 {
	if x != nil {
		return x.DistributionBucketCounts
	}
	return nil
}

type ResourceAllocations_ResourceSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot       int64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Allocation float64 `protobuf:"fixed64,2,opt,name=allocation,proto3" json:"allocation,omitempty"`
}

func (x *ResourceAllocations_ResourceSlot) Reset() {
	*x = ResourceAllocations_ResourceSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAllocations_ResourceSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAllocations_ResourceSlot) ProtoMessage() {}

func (x *ResourceAllocations_ResourceSlot) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAllocations_ResourceSlot.ProtoReflect.Descriptor instead.
func (*ResourceAllocations_ResourceSlot) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{48, 0}
}

func (x *ResourceAllocations_ResourceSlot) GetSlot() int64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ResourceAllocations_ResourceSlot) GetAllocation() float64 {
	if x != nil {
		return x.Allocation
	}
	return 0
}

var File_src_ray_protobuf_common_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_common_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x29, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61,
	0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x07, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e,
	0x6f, 0x74, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x0d, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x22, 0x93, 0x02, 0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64,
	0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x14, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x32, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x15, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x1b, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x32,
	0x0a, 0x04, 0x68, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x68, 0x61,
	0x72, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x04, 0x73, 0x6f, 0x66, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x1e, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x73, 0x6f, 0x66, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x5f,
	0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x4f, 0x6e, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x4f, 0x6e, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x20, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x23,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x22, 0xd3, 0x04, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x64, 0x0a, 0x1b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x7a, 0x0a, 0x23, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x20, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x61, 0x0a, 0x1a,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x18, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x74, 0x0a, 0x21, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x1e, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x6b, 0x0a, 0x1e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x1b, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x76, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x7a, 0x0a, 0x16, 0x4a, 0x61, 0x76, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa4, 0x01,
	0x0a, 0x18, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x73, 0x0a, 0x15, 0x43, 0x70, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x14, 0x47, 0x6f, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x5b, 0x0a,
	0x18, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x16, 0x6a, 0x61, 0x76, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x61, 0x0a, 0x1a, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x18, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x58, 0x0a,
	0x17, 0x63, 0x70, 0x70, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x70, 0x70, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x15, 0x63, 0x70, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x67, 0x6f, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x6f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x14, 0x67, 0x6f, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x15,
	0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x9f, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4e, 0x0a, 0x14, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x13, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x0c, 0x52, 0x61, 0x79, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x64, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x66,
	0x0a, 0x1e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x53, 0x65, 0x74, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x15, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x17, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x57, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x69,
	0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xae, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65,
	0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0xfa, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x61, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x8a, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x4f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x52,
	0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54, 0x4f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x52,
	0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x04, 0x22, 0xd2, 0x03,
	0x0a, 0x0f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x61, 0x74, 0x68, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x5a, 0x0a, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x61, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5f, 0x0a,
	0x1a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x17, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x76, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x59,
	0x0a, 0x18, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x69, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x48, 0x00, 0x52, 0x15, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x65, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x64, 0x0a, 0x1b, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x6e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x48, 0x00, 0x52, 0x19, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6f, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x3e, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x40, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xac, 0x03, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69,
	0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a, 0x0a, 0x4f, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x22, 0x46, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xb0, 0x04, 0x0a, 0x09, 0x4a, 0x6f,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x76, 0x6d, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x76,
	0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x41, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x70, 0x79, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x79,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x79,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x79, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3f, 0x0a,
	0x1c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x79, 0x5f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x19, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50,
	0x79, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x0d, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x01, 0x22, 0x67, 0x0a, 0x1e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x73, 0x6d, 0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x61, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xf2, 0x10, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x13,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x67, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x73, 0x0a,
	0x1c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x15, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x0f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x24, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x21, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x4c, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x5f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x6a,
	0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x4b, 0x0a, 0x22, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x4a, 0x0a, 0x1f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x1c, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x4b, 0x0a, 0x22, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x72,
	0x6f, 0x6f, 0x74, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x1a, 0x44, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x1f, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x22, 0xc4, 0x05, 0x0a, 0x0d, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6f,
	0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x4f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x22, 0xd2, 0x02, 0x0a, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x1a,
	0x63, 0x0a, 0x10, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x1a, 0x40, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x03, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6a, 0x6f,
	0x62, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x6d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x14, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x61,
	0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x2e,
	0x0a, 0x09, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x09, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x44,
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x07,
	0x54, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x67, 0x12, 0x37, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x48, 0x0a, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x66, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x70,
	0x6c, 0x61, 0x73, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x50,
	0x6c, 0x61, 0x73, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x66, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0xe8, 0x04, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x36, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x15, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x93,
	0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75,
	0x6d, 0x6d, 0x79, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x1a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x22, 0x3e, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x5e, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0xf4, 0x03, 0x0a,
	0x08, 0x56, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x93, 0x03,
	0x0a, 0x07, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78,
	0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x1e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x01, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x01, 0x52, 0x18, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6c, 0x6f,
	0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73,
	0x1a, 0x42, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x09, 0x0a, 0x0f, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4f,
	0x0a, 0x0d, 0x77, 0x65, 0x62, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x57, 0x65, 0x62, 0x75, 0x69, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x77, 0x65, 0x62, 0x75, 0x69, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x73, 0x6d, 0x61,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x50, 0x6c, 0x61,
	0x73, 0x6d, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6e, 0x75, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x37, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x75, 0x73, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x34, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x77, 0x6e, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e,
	0x75, 0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x5e,
	0x0a, 0x12, 0x55, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f,
	0x0a, 0x11, 0x57, 0x65, 0x62, 0x75, 0x69, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x27, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x49,
	0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x31, 0x0a, 0x08, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x41, 0x56, 0x41, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x50, 0x50, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x4f, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x0a,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x4f,
	0x52, 0x4b, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x49, 0x4c, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x55, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x2a,
	0xbb, 0x05, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x53, 0x4d, 0x41, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x53,
	0x45, 0x54, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a,
	0x0b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x44, 0x10, 0x09, 0x12, 0x12,
	0x0a, 0x0e, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x0b, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55,
	0x4e, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x53, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x56, 0x49,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54,
	0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x59, 0x4c,
	0x45, 0x54, 0x5f, 0x44, 0x49, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x11, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x45,
	0x45, 0x44, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x49, 0x45, 0x44, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x19, 0x2a, 0xf4, 0x01,
	0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x49, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x52, 0x47, 0x53, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x4d, 0x45, 0x4d, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x47, 0x53, 0x5f, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44,
	0x5f, 0x54, 0x4f, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x59, 0x5f, 0x47, 0x45, 0x54, 0x10,
	0x07, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x5f,
	0x52, 0x41, 0x59, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x0a, 0x2a, 0x7c, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x45, 0x78,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x58, 0x49, 0x54,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x10, 0x04, 0x2a, 0x4d, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x43, 0x4b, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x10,
	0x03, 0x42, 0x57, 0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5a, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x79, 0x2d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_src_ray_protobuf_common_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_common_proto_rawDescData = file_src_ray_protobuf_common_proto_rawDesc
)

func file_src_ray_protobuf_common_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_common_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_common_proto_rawDescData)
	})
	return file_src_ray_protobuf_common_proto_rawDescData
}

var file_src_ray_protobuf_common_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_src_ray_protobuf_common_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_src_ray_protobuf_common_proto_goTypes = []any{
	(Language)(0),                            // 0: ray.rpc.Language
	(WorkerType)(0),                          // 1: ray.rpc.WorkerType
	(TaskType)(0),                            // 2: ray.rpc.TaskType
	(ErrorType)(0),                           // 3: ray.rpc.ErrorType
	(TaskStatus)(0),                          // 4: ray.rpc.TaskStatus
	(WorkerExitType)(0),                      // 5: ray.rpc.WorkerExitType
	(PlacementStrategy)(0),                   // 6: ray.rpc.PlacementStrategy
	(NodeDeathInfo_Reason)(0),                // 7: ray.rpc.NodeDeathInfo.Reason
	(JobConfig_ActorLifetime)(0),             // 8: ray.rpc.JobConfig.ActorLifetime
	(*LabelIn)(nil),                          // 9: ray.rpc.LabelIn
	(*LabelNotIn)(nil),                       // 10: ray.rpc.LabelNotIn
	(*LabelExists)(nil),                      // 11: ray.rpc.LabelExists
	(*LabelDoesNotExist)(nil),                // 12: ray.rpc.LabelDoesNotExist
	(*LabelOperator)(nil),                    // 13: ray.rpc.LabelOperator
	(*LabelMatchExpression)(nil),             // 14: ray.rpc.LabelMatchExpression
	(*LabelMatchExpressions)(nil),            // 15: ray.rpc.LabelMatchExpressions
	(*NodeLabelSchedulingStrategy)(nil),      // 16: ray.rpc.NodeLabelSchedulingStrategy
	(*NodeAffinitySchedulingStrategy)(nil),   // 17: ray.rpc.NodeAffinitySchedulingStrategy
	(*PlacementGroupSchedulingStrategy)(nil), // 18: ray.rpc.PlacementGroupSchedulingStrategy
	(*DefaultSchedulingStrategy)(nil),        // 19: ray.rpc.DefaultSchedulingStrategy
	(*SpreadSchedulingStrategy)(nil),         // 20: ray.rpc.SpreadSchedulingStrategy
	(*SchedulingStrategy)(nil),               // 21: ray.rpc.SchedulingStrategy
	(*Address)(nil),                          // 22: ray.rpc.Address
	(*JavaFunctionDescriptor)(nil),           // 23: ray.rpc.JavaFunctionDescriptor
	(*PythonFunctionDescriptor)(nil),         // 24: ray.rpc.PythonFunctionDescriptor
	(*CppFunctionDescriptor)(nil),            // 25: ray.rpc.CppFunctionDescriptor
	(*GoFunctionDescriptor)(nil),             // 26: ray.rpc.GoFunctionDescriptor
	(*FunctionDescriptor)(nil),               // 27: ray.rpc.FunctionDescriptor
	(*ConcurrencyGroup)(nil),                 // 28: ray.rpc.ConcurrencyGroup
	(*RayErrorInfo)(nil),                     // 29: ray.rpc.RayErrorInfo
	(*OutOfMemoryErrorContext)(nil),          // 30: ray.rpc.OutOfMemoryErrorContext
	(*NodeDiedErrorContext)(nil),             // 31: ray.rpc.NodeDiedErrorContext
	(*RayException)(nil),                     // 32: ray.rpc.RayException
	(*NodeDeathInfo)(nil),                    // 33: ray.rpc.NodeDeathInfo
	(*ActorDeathCause)(nil),                  // 34: ray.rpc.ActorDeathCause
	(*RuntimeEnvFailedContext)(nil),          // 35: ray.rpc.RuntimeEnvFailedContext
	(*ActorUnschedulableContext)(nil),        // 36: ray.rpc.ActorUnschedulableContext
	(*ActorDiedErrorContext)(nil),            // 37: ray.rpc.ActorDiedErrorContext
	(*OomContext)(nil),                       // 38: ray.rpc.OomContext
	(*ActorUnavailableContext)(nil),          // 39: ray.rpc.ActorUnavailableContext
	(*JobConfig)(nil),                        // 40: ray.rpc.JobConfig
	(*StreamingGeneratorReturnIdInfo)(nil),   // 41: ray.rpc.StreamingGeneratorReturnIdInfo
	(*TaskSpec)(nil),                         // 42: ray.rpc.TaskSpec
	(*TaskInfoEntry)(nil),                    // 43: ray.rpc.TaskInfoEntry
	(*Bundle)(nil),                           // 44: ray.rpc.Bundle
	(*PlacementGroupSpec)(nil),               // 45: ray.rpc.PlacementGroupSpec
	(*ObjectReference)(nil),                  // 46: ray.rpc.ObjectReference
	(*ObjectReferenceCount)(nil),             // 47: ray.rpc.ObjectReferenceCount
	(*TaskArg)(nil),                          // 48: ray.rpc.TaskArg
	(*ReturnObject)(nil),                     // 49: ray.rpc.ReturnObject
	(*ActorCreationTaskSpec)(nil),            // 50: ray.rpc.ActorCreationTaskSpec
	(*ActorTaskSpec)(nil),                    // 51: ray.rpc.ActorTaskSpec
	(*Task)(nil),                             // 52: ray.rpc.Task
	(*ResourceId)(nil),                       // 53: ray.rpc.ResourceId
	(*ResourceMapEntry)(nil),                 // 54: ray.rpc.ResourceMapEntry
	(*ViewData)(nil),                         // 55: ray.rpc.ViewData
	(*ObjectRefInfo)(nil),                    // 56: ray.rpc.ObjectRefInfo
	(*ResourceAllocations)(nil),              // 57: ray.rpc.ResourceAllocations
	(*CoreWorkerStats)(nil),                  // 58: ray.rpc.CoreWorkerStats
	(*NodeResourceUsage)(nil),                // 59: ray.rpc.NodeResourceUsage
	(*NamedActorInfo)(nil),                   // 60: ray.rpc.NamedActorInfo
	nil,                                      // 61: ray.rpc.JobConfig.MetadataEntry
	nil,                                      // 62: ray.rpc.TaskSpec.RequiredResourcesEntry
	nil,                                      // 63: ray.rpc.TaskSpec.RequiredPlacementResourcesEntry
	nil,                                      // 64: ray.rpc.TaskInfoEntry.RequiredResourcesEntry
	(*Bundle_BundleIdentifier)(nil),          // 65: ray.rpc.Bundle.BundleIdentifier
	nil,                                      // 66: ray.rpc.Bundle.UnitResourcesEntry
	(*ViewData_Measure)(nil),                 // 67: ray.rpc.ViewData.Measure
	(*ResourceAllocations_ResourceSlot)(nil), // 68: ray.rpc.ResourceAllocations.ResourceSlot
	nil,                                      // 69: ray.rpc.CoreWorkerStats.UsedResourcesEntry
	nil,                                      // 70: ray.rpc.CoreWorkerStats.WebuiDisplayEntry
	(*RuntimeEnvInfo)(nil),                   // 71: ray.rpc.RuntimeEnvInfo
}
var file_src_ray_protobuf_common_proto_depIdxs = []int32{
	9,  // 0: ray.rpc.LabelOperator.label_in:type_name -> ray.rpc.LabelIn
	10, // 1: ray.rpc.LabelOperator.label_not_in:type_name -> ray.rpc.LabelNotIn
	11, // 2: ray.rpc.LabelOperator.label_exists:type_name -> ray.rpc.LabelExists
	12, // 3: ray.rpc.LabelOperator.label_does_not_exist:type_name -> ray.rpc.LabelDoesNotExist
	13, // 4: ray.rpc.LabelMatchExpression.operator:type_name -> ray.rpc.LabelOperator
	14, // 5: ray.rpc.LabelMatchExpressions.expressions:type_name -> ray.rpc.LabelMatchExpression
	15, // 6: ray.rpc.NodeLabelSchedulingStrategy.hard:type_name -> ray.rpc.LabelMatchExpressions
	15, // 7: ray.rpc.NodeLabelSchedulingStrategy.soft:type_name -> ray.rpc.LabelMatchExpressions
	19, // 8: ray.rpc.SchedulingStrategy.default_scheduling_strategy:type_name -> ray.rpc.DefaultSchedulingStrategy
	18, // 9: ray.rpc.SchedulingStrategy.placement_group_scheduling_strategy:type_name -> ray.rpc.PlacementGroupSchedulingStrategy
	20, // 10: ray.rpc.SchedulingStrategy.spread_scheduling_strategy:type_name -> ray.rpc.SpreadSchedulingStrategy
	17, // 11: ray.rpc.SchedulingStrategy.node_affinity_scheduling_strategy:type_name -> ray.rpc.NodeAffinitySchedulingStrategy
	16, // 12: ray.rpc.SchedulingStrategy.node_label_scheduling_strategy:type_name -> ray.rpc.NodeLabelSchedulingStrategy
	23, // 13: ray.rpc.FunctionDescriptor.java_function_descriptor:type_name -> ray.rpc.JavaFunctionDescriptor
	24, // 14: ray.rpc.FunctionDescriptor.python_function_descriptor:type_name -> ray.rpc.PythonFunctionDescriptor
	25, // 15: ray.rpc.FunctionDescriptor.cpp_function_descriptor:type_name -> ray.rpc.CppFunctionDescriptor
	26, // 16: ray.rpc.FunctionDescriptor.go_function_descriptor:type_name -> ray.rpc.GoFunctionDescriptor
	27, // 17: ray.rpc.ConcurrencyGroup.function_descriptors:type_name -> ray.rpc.FunctionDescriptor
	34, // 18: ray.rpc.RayErrorInfo.actor_died_error:type_name -> ray.rpc.ActorDeathCause
	35, // 19: ray.rpc.RayErrorInfo.runtime_env_setup_failed_error:type_name -> ray.rpc.RuntimeEnvFailedContext
	39, // 20: ray.rpc.RayErrorInfo.actor_unavailable_error:type_name -> ray.rpc.ActorUnavailableContext
	3,  // 21: ray.rpc.RayErrorInfo.error_type:type_name -> ray.rpc.ErrorType
	0,  // 22: ray.rpc.RayException.language:type_name -> ray.rpc.Language
	7,  // 23: ray.rpc.NodeDeathInfo.reason:type_name -> ray.rpc.NodeDeathInfo.Reason
	32, // 24: ray.rpc.ActorDeathCause.creation_task_failure_context:type_name -> ray.rpc.RayException
	35, // 25: ray.rpc.ActorDeathCause.runtime_env_failed_context:type_name -> ray.rpc.RuntimeEnvFailedContext
	37, // 26: ray.rpc.ActorDeathCause.actor_died_error_context:type_name -> ray.rpc.ActorDiedErrorContext
	36, // 27: ray.rpc.ActorDeathCause.actor_unschedulable_context:type_name -> ray.rpc.ActorUnschedulableContext
	38, // 28: ray.rpc.ActorDeathCause.oom_context:type_name -> ray.rpc.OomContext
	33, // 29: ray.rpc.ActorDiedErrorContext.node_death_info:type_name -> ray.rpc.NodeDeathInfo
	71, // 30: ray.rpc.JobConfig.runtime_env_info:type_name -> ray.rpc.RuntimeEnvInfo
	61, // 31: ray.rpc.JobConfig.metadata:type_name -> ray.rpc.JobConfig.MetadataEntry
	8,  // 32: ray.rpc.JobConfig.default_actor_lifetime:type_name -> ray.rpc.JobConfig.ActorLifetime
	2,  // 33: ray.rpc.TaskSpec.type:type_name -> ray.rpc.TaskType
	0,  // 34: ray.rpc.TaskSpec.language:type_name -> ray.rpc.Language
	27, // 35: ray.rpc.TaskSpec.function_descriptor:type_name -> ray.rpc.FunctionDescriptor
	22, // 36: ray.rpc.TaskSpec.caller_address:type_name -> ray.rpc.Address
	48, // 37: ray.rpc.TaskSpec.args:type_name -> ray.rpc.TaskArg
	62, // 38: ray.rpc.TaskSpec.required_resources:type_name -> ray.rpc.TaskSpec.RequiredResourcesEntry
	63, // 39: ray.rpc.TaskSpec.required_placement_resources:type_name -> ray.rpc.TaskSpec.RequiredPlacementResourcesEntry
	50, // 40: ray.rpc.TaskSpec.actor_creation_task_spec:type_name -> ray.rpc.ActorCreationTaskSpec
	51, // 41: ray.rpc.TaskSpec.actor_task_spec:type_name -> ray.rpc.ActorTaskSpec
	71, // 42: ray.rpc.TaskSpec.runtime_env_info:type_name -> ray.rpc.RuntimeEnvInfo
	21, // 43: ray.rpc.TaskSpec.scheduling_strategy:type_name -> ray.rpc.SchedulingStrategy
	40, // 44: ray.rpc.TaskSpec.job_config:type_name -> ray.rpc.JobConfig
	2,  // 45: ray.rpc.TaskInfoEntry.type:type_name -> ray.rpc.TaskType
	0,  // 46: ray.rpc.TaskInfoEntry.language:type_name -> ray.rpc.Language
	4,  // 47: ray.rpc.TaskInfoEntry.scheduling_state:type_name -> ray.rpc.TaskStatus
	64, // 48: ray.rpc.TaskInfoEntry.required_resources:type_name -> ray.rpc.TaskInfoEntry.RequiredResourcesEntry
	71, // 49: ray.rpc.TaskInfoEntry.runtime_env_info:type_name -> ray.rpc.RuntimeEnvInfo
	65, // 50: ray.rpc.Bundle.bundle_id:type_name -> ray.rpc.Bundle.BundleIdentifier
	66, // 51: ray.rpc.Bundle.unit_resources:type_name -> ray.rpc.Bundle.UnitResourcesEntry
	44, // 52: ray.rpc.PlacementGroupSpec.bundles:type_name -> ray.rpc.Bundle
	6,  // 53: ray.rpc.PlacementGroupSpec.strategy:type_name -> ray.rpc.PlacementStrategy
	22, // 54: ray.rpc.ObjectReference.owner_address:type_name -> ray.rpc.Address
	46, // 55: ray.rpc.ObjectReferenceCount.reference:type_name -> ray.rpc.ObjectReference
	22, // 56: ray.rpc.ObjectReferenceCount.borrowers:type_name -> ray.rpc.Address
	46, // 57: ray.rpc.ObjectReferenceCount.stored_in_objects:type_name -> ray.rpc.ObjectReference
	46, // 58: ray.rpc.TaskArg.object_ref:type_name -> ray.rpc.ObjectReference
	46, // 59: ray.rpc.TaskArg.nested_inlined_refs:type_name -> ray.rpc.ObjectReference
	46, // 60: ray.rpc.ReturnObject.nested_inlined_refs:type_name -> ray.rpc.ObjectReference
	28, // 61: ray.rpc.ActorCreationTaskSpec.concurrency_groups:type_name -> ray.rpc.ConcurrencyGroup
	42, // 62: ray.rpc.Task.task_spec:type_name -> ray.rpc.TaskSpec
	53, // 63: ray.rpc.ResourceMapEntry.resource_ids:type_name -> ray.rpc.ResourceId
	67, // 64: ray.rpc.ViewData.measures:type_name -> ray.rpc.ViewData.Measure
	4,  // 65: ray.rpc.ObjectRefInfo.task_status:type_name -> ray.rpc.TaskStatus
	68, // 66: ray.rpc.ResourceAllocations.resource_slots:type_name -> ray.rpc.ResourceAllocations.ResourceSlot
	69, // 67: ray.rpc.CoreWorkerStats.used_resources:type_name -> ray.rpc.CoreWorkerStats.UsedResourcesEntry
	70, // 68: ray.rpc.CoreWorkerStats.webui_display:type_name -> ray.rpc.CoreWorkerStats.WebuiDisplayEntry
	56, // 69: ray.rpc.CoreWorkerStats.object_refs:type_name -> ray.rpc.ObjectRefInfo
	0,  // 70: ray.rpc.CoreWorkerStats.language:type_name -> ray.rpc.Language
	1,  // 71: ray.rpc.CoreWorkerStats.worker_type:type_name -> ray.rpc.WorkerType
	57, // 72: ray.rpc.CoreWorkerStats.UsedResourcesEntry.value:type_name -> ray.rpc.ResourceAllocations
	73, // [73:73] is the sub-list for method output_type
	73, // [73:73] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_common_proto_init() }
func file_src_ray_protobuf_common_proto_init() {
	if File_src_ray_protobuf_common_proto != nil {
		return
	}
	file_src_ray_protobuf_runtime_env_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_common_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LabelIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*LabelNotIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*LabelExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LabelDoesNotExist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*LabelOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*LabelMatchExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*LabelMatchExpressions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*NodeLabelSchedulingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*NodeAffinitySchedulingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PlacementGroupSchedulingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DefaultSchedulingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SpreadSchedulingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SchedulingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*JavaFunctionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PythonFunctionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CppFunctionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GoFunctionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*FunctionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ConcurrencyGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*RayErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*OutOfMemoryErrorContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*NodeDiedErrorContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*RayException); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*NodeDeathInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ActorDeathCause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*RuntimeEnvFailedContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ActorUnschedulableContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ActorDiedErrorContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*OomContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ActorUnavailableContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*JobConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*StreamingGeneratorReturnIdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*TaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*TaskInfoEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*PlacementGroupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectReferenceCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*TaskArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*ReturnObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*ActorCreationTaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*ActorTaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*ViewData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectRefInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceAllocations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*CoreWorkerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*NodeResourceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*NamedActorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*Bundle_BundleIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*ViewData_Measure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceAllocations_ResourceSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_src_ray_protobuf_common_proto_msgTypes[4].OneofWrappers = []any{
		(*LabelOperator_LabelIn)(nil),
		(*LabelOperator_LabelNotIn)(nil),
		(*LabelOperator_LabelExists)(nil),
		(*LabelOperator_LabelDoesNotExist)(nil),
	}
	file_src_ray_protobuf_common_proto_msgTypes[12].OneofWrappers = []any{
		(*SchedulingStrategy_DefaultSchedulingStrategy)(nil),
		(*SchedulingStrategy_PlacementGroupSchedulingStrategy)(nil),
		(*SchedulingStrategy_SpreadSchedulingStrategy)(nil),
		(*SchedulingStrategy_NodeAffinitySchedulingStrategy)(nil),
		(*SchedulingStrategy_NodeLabelSchedulingStrategy)(nil),
	}
	file_src_ray_protobuf_common_proto_msgTypes[18].OneofWrappers = []any{
		(*FunctionDescriptor_JavaFunctionDescriptor)(nil),
		(*FunctionDescriptor_PythonFunctionDescriptor)(nil),
		(*FunctionDescriptor_CppFunctionDescriptor)(nil),
		(*FunctionDescriptor_GoFunctionDescriptor)(nil),
	}
	file_src_ray_protobuf_common_proto_msgTypes[20].OneofWrappers = []any{
		(*RayErrorInfo_ActorDiedError)(nil),
		(*RayErrorInfo_RuntimeEnvSetupFailedError)(nil),
		(*RayErrorInfo_ActorUnavailableError)(nil),
	}
	file_src_ray_protobuf_common_proto_msgTypes[25].OneofWrappers = []any{
		(*ActorDeathCause_CreationTaskFailureContext)(nil),
		(*ActorDeathCause_RuntimeEnvFailedContext)(nil),
		(*ActorDeathCause_ActorDiedErrorContext)(nil),
		(*ActorDeathCause_ActorUnschedulableContext)(nil),
		(*ActorDeathCause_OomContext)(nil),
	}
	file_src_ray_protobuf_common_proto_msgTypes[28].OneofWrappers = []any{}
	file_src_ray_protobuf_common_proto_msgTypes[30].OneofWrappers = []any{}
	file_src_ray_protobuf_common_proto_msgTypes[33].OneofWrappers = []any{}
	file_src_ray_protobuf_common_proto_msgTypes[34].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_common_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_src_ray_protobuf_common_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_common_proto_depIdxs,
		EnumInfos:         file_src_ray_protobuf_common_proto_enumTypes,
		MessageInfos:      file_src_ray_protobuf_common_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_common_proto = out.File
	file_src_ray_protobuf_common_proto_rawDesc = nil
	file_src_ray_protobuf_common_proto_goTypes = nil
	file_src_ray_protobuf_common_proto_depIdxs = nil
}
