// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.16.0
// source: src/ray/protobuf/common.proto

package _go

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Language int32

const (
	Language_PYTHON Language = 0
	Language_JAVA   Language = 1
	Language_CPP    Language = 2
	Language_GO     Language = 3
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0: "PYTHON",
		1: "JAVA",
		2: "CPP",
		3: "GO",
	}
	Language_value = map[string]int32{
		"PYTHON": 0,
		"JAVA":   1,
		"CPP":    2,
		"GO":     3,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[0].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[0]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{0}
}

type WorkerType int32

const (
	WorkerType_WORKER         WorkerType = 0
	WorkerType_DRIVER         WorkerType = 1
	WorkerType_SPILL_WORKER   WorkerType = 2
	WorkerType_RESTORE_WORKER WorkerType = 3
	WorkerType_UTIL_WORKER    WorkerType = 4
)

// Enum value maps for WorkerType.
var (
	WorkerType_name = map[int32]string{
		0: "WORKER",
		1: "DRIVER",
		2: "SPILL_WORKER",
		3: "RESTORE_WORKER",
		4: "UTIL_WORKER",
	}
	WorkerType_value = map[string]int32{
		"WORKER":         0,
		"DRIVER":         1,
		"SPILL_WORKER":   2,
		"RESTORE_WORKER": 3,
		"UTIL_WORKER":    4,
	}
)

func (x WorkerType) Enum() *WorkerType {
	p := new(WorkerType)
	*p = x
	return p
}

func (x WorkerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[1].Descriptor()
}

func (WorkerType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[1]
}

func (x WorkerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerType.Descriptor instead.
func (WorkerType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{1}
}

type TaskType int32

const (
	TaskType_NORMAL_TASK         TaskType = 0
	TaskType_ACTOR_CREATION_TASK TaskType = 1
	TaskType_ACTOR_TASK          TaskType = 2
	TaskType_DRIVER_TASK         TaskType = 3
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "NORMAL_TASK",
		1: "ACTOR_CREATION_TASK",
		2: "ACTOR_TASK",
		3: "DRIVER_TASK",
	}
	TaskType_value = map[string]int32{
		"NORMAL_TASK":         0,
		"ACTOR_CREATION_TASK": 1,
		"ACTOR_TASK":          2,
		"DRIVER_TASK":         3,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[2].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[2]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{2}
}

type ErrorType int32

const (
	ErrorType_WORKER_DIED              ErrorType = 0
	ErrorType_ACTOR_DIED               ErrorType = 1
	ErrorType_OBJECT_UNRECONSTRUCTABLE ErrorType = 2
	ErrorType_TASK_EXECUTION_EXCEPTION ErrorType = 3
	ErrorType_OBJECT_IN_PLASMA         ErrorType = 4
	ErrorType_TASK_CANCELLED           ErrorType = 5
	ErrorType_ACTOR_CREATION_FAILED    ErrorType = 6
)

// Enum value maps for ErrorType.
var (
	ErrorType_name = map[int32]string{
		0: "WORKER_DIED",
		1: "ACTOR_DIED",
		2: "OBJECT_UNRECONSTRUCTABLE",
		3: "TASK_EXECUTION_EXCEPTION",
		4: "OBJECT_IN_PLASMA",
		5: "TASK_CANCELLED",
		6: "ACTOR_CREATION_FAILED",
	}
	ErrorType_value = map[string]int32{
		"WORKER_DIED":              0,
		"ACTOR_DIED":               1,
		"OBJECT_UNRECONSTRUCTABLE": 2,
		"TASK_EXECUTION_EXCEPTION": 3,
		"OBJECT_IN_PLASMA":         4,
		"TASK_CANCELLED":           5,
		"ACTOR_CREATION_FAILED":    6,
	}
)

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}

func (x ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[3].Descriptor()
}

func (ErrorType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[3]
}

func (x ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorType.Descriptor instead.
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{3}
}

type WorkerExitType int32

const (
	WorkerExitType_SYSTEM_ERROR_EXIT        WorkerExitType = 0
	WorkerExitType_INTENDED_EXIT            WorkerExitType = 1
	WorkerExitType_UNUSED_RESOURCE_RELEASED WorkerExitType = 2
	WorkerExitType_PLACEMENT_GROUP_REMOVED  WorkerExitType = 3
	WorkerExitType_CREATION_TASK_ERROR      WorkerExitType = 4
	WorkerExitType_IDLE_EXIT                WorkerExitType = 5
)

// Enum value maps for WorkerExitType.
var (
	WorkerExitType_name = map[int32]string{
		0: "SYSTEM_ERROR_EXIT",
		1: "INTENDED_EXIT",
		2: "UNUSED_RESOURCE_RELEASED",
		3: "PLACEMENT_GROUP_REMOVED",
		4: "CREATION_TASK_ERROR",
		5: "IDLE_EXIT",
	}
	WorkerExitType_value = map[string]int32{
		"SYSTEM_ERROR_EXIT":        0,
		"INTENDED_EXIT":            1,
		"UNUSED_RESOURCE_RELEASED": 2,
		"PLACEMENT_GROUP_REMOVED":  3,
		"CREATION_TASK_ERROR":      4,
		"IDLE_EXIT":                5,
	}
)

func (x WorkerExitType) Enum() *WorkerExitType {
	p := new(WorkerExitType)
	*p = x
	return p
}

func (x WorkerExitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerExitType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[4].Descriptor()
}

func (WorkerExitType) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[4]
}

func (x WorkerExitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerExitType.Descriptor instead.
func (WorkerExitType) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{4}
}

type PlacementStrategy int32

const (
	PlacementStrategy_PACK          PlacementStrategy = 0
	PlacementStrategy_SPREAD        PlacementStrategy = 1
	PlacementStrategy_STRICT_PACK   PlacementStrategy = 2
	PlacementStrategy_STRICT_SPREAD PlacementStrategy = 3
)

// Enum value maps for PlacementStrategy.
var (
	PlacementStrategy_name = map[int32]string{
		0: "PACK",
		1: "SPREAD",
		2: "STRICT_PACK",
		3: "STRICT_SPREAD",
	}
	PlacementStrategy_value = map[string]int32{
		"PACK":          0,
		"SPREAD":        1,
		"STRICT_PACK":   2,
		"STRICT_SPREAD": 3,
	}
)

func (x PlacementStrategy) Enum() *PlacementStrategy {
	p := new(PlacementStrategy)
	*p = x
	return p
}

func (x PlacementStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlacementStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_src_ray_protobuf_common_proto_enumTypes[5].Descriptor()
}

func (PlacementStrategy) Type() protoreflect.EnumType {
	return &file_src_ray_protobuf_common_proto_enumTypes[5]
}

func (x PlacementStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlacementStrategy.Descriptor instead.
func (PlacementStrategy) EnumDescriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{5}
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RayletId  []byte `protobuf:"bytes,1,opt,name=raylet_id,json=rayletId,proto3" json:"raylet_id,omitempty"`
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Port      int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	WorkerId  []byte `protobuf:"bytes,4,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetRayletId() []byte {
	if x != nil {
		return x.RayletId
	}
	return nil
}

func (x *Address) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Address) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Address) GetWorkerId() []byte {
	if x != nil {
		return x.WorkerId
	}
	return nil
}

type JavaFunctionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName    string `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	FunctionName string `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Signature    string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *JavaFunctionDescriptor) Reset() {
	*x = JavaFunctionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaFunctionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaFunctionDescriptor) ProtoMessage() {}

func (x *JavaFunctionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaFunctionDescriptor.ProtoReflect.Descriptor instead.
func (*JavaFunctionDescriptor) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{1}
}

func (x *JavaFunctionDescriptor) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *JavaFunctionDescriptor) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *JavaFunctionDescriptor) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type PythonFunctionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName   string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ClassName    string `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	FunctionName string `protobuf:"bytes,3,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	FunctionHash string `protobuf:"bytes,4,opt,name=function_hash,json=functionHash,proto3" json:"function_hash,omitempty"`
}

func (x *PythonFunctionDescriptor) Reset() {
	*x = PythonFunctionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonFunctionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonFunctionDescriptor) ProtoMessage() {}

func (x *PythonFunctionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonFunctionDescriptor.ProtoReflect.Descriptor instead.
func (*PythonFunctionDescriptor) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{2}
}

func (x *PythonFunctionDescriptor) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *PythonFunctionDescriptor) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *PythonFunctionDescriptor) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *PythonFunctionDescriptor) GetFunctionHash() string {
	if x != nil {
		return x.FunctionHash
	}
	return ""
}

type CppFunctionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionName string `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
}

func (x *CppFunctionDescriptor) Reset() {
	*x = CppFunctionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppFunctionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppFunctionDescriptor) ProtoMessage() {}

func (x *CppFunctionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppFunctionDescriptor.ProtoReflect.Descriptor instead.
func (*CppFunctionDescriptor) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{3}
}

func (x *CppFunctionDescriptor) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

type GoFunctionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionName string `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
}

func (x *GoFunctionDescriptor) Reset() {
	*x = GoFunctionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoFunctionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoFunctionDescriptor) ProtoMessage() {}

func (x *GoFunctionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoFunctionDescriptor.ProtoReflect.Descriptor instead.
func (*GoFunctionDescriptor) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{4}
}

func (x *GoFunctionDescriptor) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

type FunctionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FunctionDescriptor:
	//	*FunctionDescriptor_JavaFunctionDescriptor
	//	*FunctionDescriptor_PythonFunctionDescriptor
	//	*FunctionDescriptor_CppFunctionDescriptor
	//	*FunctionDescriptor_GoFunctionDescriptor
	FunctionDescriptor isFunctionDescriptor_FunctionDescriptor `protobuf_oneof:"function_descriptor"`
}

func (x *FunctionDescriptor) Reset() {
	*x = FunctionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionDescriptor) ProtoMessage() {}

func (x *FunctionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionDescriptor.ProtoReflect.Descriptor instead.
func (*FunctionDescriptor) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{5}
}

func (m *FunctionDescriptor) GetFunctionDescriptor() isFunctionDescriptor_FunctionDescriptor {
	if m != nil {
		return m.FunctionDescriptor
	}
	return nil
}

func (x *FunctionDescriptor) GetJavaFunctionDescriptor() *JavaFunctionDescriptor {
	if x, ok := x.GetFunctionDescriptor().(*FunctionDescriptor_JavaFunctionDescriptor); ok {
		return x.JavaFunctionDescriptor
	}
	return nil
}

func (x *FunctionDescriptor) GetPythonFunctionDescriptor() *PythonFunctionDescriptor {
	if x, ok := x.GetFunctionDescriptor().(*FunctionDescriptor_PythonFunctionDescriptor); ok {
		return x.PythonFunctionDescriptor
	}
	return nil
}

func (x *FunctionDescriptor) GetCppFunctionDescriptor() *CppFunctionDescriptor {
	if x, ok := x.GetFunctionDescriptor().(*FunctionDescriptor_CppFunctionDescriptor); ok {
		return x.CppFunctionDescriptor
	}
	return nil
}

func (x *FunctionDescriptor) GetGoFunctionDescriptor() *GoFunctionDescriptor {
	if x, ok := x.GetFunctionDescriptor().(*FunctionDescriptor_GoFunctionDescriptor); ok {
		return x.GoFunctionDescriptor
	}
	return nil
}

type isFunctionDescriptor_FunctionDescriptor interface {
	isFunctionDescriptor_FunctionDescriptor()
}

type FunctionDescriptor_JavaFunctionDescriptor struct {
	JavaFunctionDescriptor *JavaFunctionDescriptor `protobuf:"bytes,1,opt,name=java_function_descriptor,json=javaFunctionDescriptor,proto3,oneof"`
}

type FunctionDescriptor_PythonFunctionDescriptor struct {
	PythonFunctionDescriptor *PythonFunctionDescriptor `protobuf:"bytes,2,opt,name=python_function_descriptor,json=pythonFunctionDescriptor,proto3,oneof"`
}

type FunctionDescriptor_CppFunctionDescriptor struct {
	CppFunctionDescriptor *CppFunctionDescriptor `protobuf:"bytes,3,opt,name=cpp_function_descriptor,json=cppFunctionDescriptor,proto3,oneof"`
}

type FunctionDescriptor_GoFunctionDescriptor struct {
	GoFunctionDescriptor *GoFunctionDescriptor `protobuf:"bytes,4,opt,name=go_function_descriptor,json=goFunctionDescriptor,proto3,oneof"`
}

func (*FunctionDescriptor_JavaFunctionDescriptor) isFunctionDescriptor_FunctionDescriptor() {}

func (*FunctionDescriptor_PythonFunctionDescriptor) isFunctionDescriptor_FunctionDescriptor() {}

func (*FunctionDescriptor_CppFunctionDescriptor) isFunctionDescriptor_FunctionDescriptor() {}

func (*FunctionDescriptor_GoFunctionDescriptor) isFunctionDescriptor_FunctionDescriptor() {}

type RayException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language                 Language `protobuf:"varint,1,opt,name=language,proto3,enum=ray.rpc.Language" json:"language,omitempty"`
	SerializedException      []byte   `protobuf:"bytes,2,opt,name=serialized_exception,json=serializedException,proto3" json:"serialized_exception,omitempty"`
	FormattedExceptionString string   `protobuf:"bytes,3,opt,name=formatted_exception_string,json=formattedExceptionString,proto3" json:"formatted_exception_string,omitempty"`
}

func (x *RayException) Reset() {
	*x = RayException{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RayException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RayException) ProtoMessage() {}

func (x *RayException) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RayException.ProtoReflect.Descriptor instead.
func (*RayException) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{6}
}

func (x *RayException) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_PYTHON
}

func (x *RayException) GetSerializedException() []byte {
	if x != nil {
		return x.SerializedException
	}
	return nil
}

func (x *RayException) GetFormattedExceptionString() string {
	if x != nil {
		return x.FormattedExceptionString
	}
	return ""
}

type RuntimeEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawJson                string   `protobuf:"bytes,1,opt,name=raw_json,json=rawJson,proto3" json:"raw_json,omitempty"`
	Uris                   []string `protobuf:"bytes,2,rep,name=uris,proto3" json:"uris,omitempty"`
	RuntimeEnvEagerInstall bool     `protobuf:"varint,3,opt,name=runtime_env_eager_install,json=runtimeEnvEagerInstall,proto3" json:"runtime_env_eager_install,omitempty"`
}

func (x *RuntimeEnv) Reset() {
	*x = RuntimeEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeEnv) ProtoMessage() {}

func (x *RuntimeEnv) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeEnv.ProtoReflect.Descriptor instead.
func (*RuntimeEnv) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{7}
}

func (x *RuntimeEnv) GetRawJson() string {
	if x != nil {
		return x.RawJson
	}
	return ""
}

func (x *RuntimeEnv) GetUris() []string {
	if x != nil {
		return x.Uris
	}
	return nil
}

func (x *RuntimeEnv) GetRuntimeEnvEagerInstall() bool {
	if x != nil {
		return x.RuntimeEnvEagerInstall
	}
	return false
}

type TaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                            TaskType               `protobuf:"varint,1,opt,name=type,proto3,enum=ray.rpc.TaskType" json:"type,omitempty"`
	Name                            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Language                        Language               `protobuf:"varint,3,opt,name=language,proto3,enum=ray.rpc.Language" json:"language,omitempty"`
	FunctionDescriptor              *FunctionDescriptor    `protobuf:"bytes,4,opt,name=function_descriptor,json=functionDescriptor,proto3" json:"function_descriptor,omitempty"`
	JobId                           []byte                 `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	TaskId                          []byte                 `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ParentTaskId                    []byte                 `protobuf:"bytes,7,opt,name=parent_task_id,json=parentTaskId,proto3" json:"parent_task_id,omitempty"`
	ParentCounter                   uint64                 `protobuf:"varint,8,opt,name=parent_counter,json=parentCounter,proto3" json:"parent_counter,omitempty"`
	CallerId                        []byte                 `protobuf:"bytes,9,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	CallerAddress                   *Address               `protobuf:"bytes,10,opt,name=caller_address,json=callerAddress,proto3" json:"caller_address,omitempty"`
	Args                            []*TaskArg             `protobuf:"bytes,11,rep,name=args,proto3" json:"args,omitempty"`
	NumReturns                      uint64                 `protobuf:"varint,12,opt,name=num_returns,json=numReturns,proto3" json:"num_returns,omitempty"`
	RequiredResources               map[string]float64     `protobuf:"bytes,13,rep,name=required_resources,json=requiredResources,proto3" json:"required_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	RequiredPlacementResources      map[string]float64     `protobuf:"bytes,14,rep,name=required_placement_resources,json=requiredPlacementResources,proto3" json:"required_placement_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	ActorCreationTaskSpec           *ActorCreationTaskSpec `protobuf:"bytes,15,opt,name=actor_creation_task_spec,json=actorCreationTaskSpec,proto3" json:"actor_creation_task_spec,omitempty"`
	ActorTaskSpec                   *ActorTaskSpec         `protobuf:"bytes,16,opt,name=actor_task_spec,json=actorTaskSpec,proto3" json:"actor_task_spec,omitempty"`
	MaxRetries                      int32                  `protobuf:"varint,17,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	PlacementGroupId                []byte                 `protobuf:"bytes,18,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
	PlacementGroupBundleIndex       int64                  `protobuf:"varint,19,opt,name=placement_group_bundle_index,json=placementGroupBundleIndex,proto3" json:"placement_group_bundle_index,omitempty"`
	PlacementGroupCaptureChildTasks bool                   `protobuf:"varint,20,opt,name=placement_group_capture_child_tasks,json=placementGroupCaptureChildTasks,proto3" json:"placement_group_capture_child_tasks,omitempty"`
	OverrideEnvironmentVariables    map[string]string      `protobuf:"bytes,21,rep,name=override_environment_variables,json=overrideEnvironmentVariables,proto3" json:"override_environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SkipExecution                   bool                   `protobuf:"varint,22,opt,name=skip_execution,json=skipExecution,proto3" json:"skip_execution,omitempty"`
	DebuggerBreakpoint              []byte                 `protobuf:"bytes,23,opt,name=debugger_breakpoint,json=debuggerBreakpoint,proto3" json:"debugger_breakpoint,omitempty"`
	SerializedRuntimeEnv            string                 `protobuf:"bytes,24,opt,name=serialized_runtime_env,json=serializedRuntimeEnv,proto3" json:"serialized_runtime_env,omitempty"`
}

func (x *TaskSpec) Reset() {
	*x = TaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSpec) ProtoMessage() {}

func (x *TaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSpec.ProtoReflect.Descriptor instead.
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{8}
}

func (x *TaskSpec) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_NORMAL_TASK
}

func (x *TaskSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskSpec) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_PYTHON
}

func (x *TaskSpec) GetFunctionDescriptor() *FunctionDescriptor {
	if x != nil {
		return x.FunctionDescriptor
	}
	return nil
}

func (x *TaskSpec) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *TaskSpec) GetTaskId() []byte {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskSpec) GetParentTaskId() []byte {
	if x != nil {
		return x.ParentTaskId
	}
	return nil
}

func (x *TaskSpec) GetParentCounter() uint64 {
	if x != nil {
		return x.ParentCounter
	}
	return 0
}

func (x *TaskSpec) GetCallerId() []byte {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *TaskSpec) GetCallerAddress() *Address {
	if x != nil {
		return x.CallerAddress
	}
	return nil
}

func (x *TaskSpec) GetArgs() []*TaskArg {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TaskSpec) GetNumReturns() uint64 {
	if x != nil {
		return x.NumReturns
	}
	return 0
}

func (x *TaskSpec) GetRequiredResources() map[string]float64 {
	if x != nil {
		return x.RequiredResources
	}
	return nil
}

func (x *TaskSpec) GetRequiredPlacementResources() map[string]float64 {
	if x != nil {
		return x.RequiredPlacementResources
	}
	return nil
}

func (x *TaskSpec) GetActorCreationTaskSpec() *ActorCreationTaskSpec {
	if x != nil {
		return x.ActorCreationTaskSpec
	}
	return nil
}

func (x *TaskSpec) GetActorTaskSpec() *ActorTaskSpec {
	if x != nil {
		return x.ActorTaskSpec
	}
	return nil
}

func (x *TaskSpec) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *TaskSpec) GetPlacementGroupId() []byte {
	if x != nil {
		return x.PlacementGroupId
	}
	return nil
}

func (x *TaskSpec) GetPlacementGroupBundleIndex() int64 {
	if x != nil {
		return x.PlacementGroupBundleIndex
	}
	return 0
}

func (x *TaskSpec) GetPlacementGroupCaptureChildTasks() bool {
	if x != nil {
		return x.PlacementGroupCaptureChildTasks
	}
	return false
}

func (x *TaskSpec) GetOverrideEnvironmentVariables() map[string]string {
	if x != nil {
		return x.OverrideEnvironmentVariables
	}
	return nil
}

func (x *TaskSpec) GetSkipExecution() bool {
	if x != nil {
		return x.SkipExecution
	}
	return false
}

func (x *TaskSpec) GetDebuggerBreakpoint() []byte {
	if x != nil {
		return x.DebuggerBreakpoint
	}
	return nil
}

func (x *TaskSpec) GetSerializedRuntimeEnv() string {
	if x != nil {
		return x.SerializedRuntimeEnv
	}
	return ""
}

type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleId      *Bundle_BundleIdentifier `protobuf:"bytes,1,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	UnitResources map[string]float64       `protobuf:"bytes,2,rep,name=unit_resources,json=unitResources,proto3" json:"unit_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	NodeId        []byte                   `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{9}
}

func (x *Bundle) GetBundleId() *Bundle_BundleIdentifier {
	if x != nil {
		return x.BundleId
	}
	return nil
}

func (x *Bundle) GetUnitResources() map[string]float64 {
	if x != nil {
		return x.UnitResources
	}
	return nil
}

func (x *Bundle) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

type PlacementGroupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementGroupId []byte            `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
	Name             string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bundles          []*Bundle         `protobuf:"bytes,3,rep,name=bundles,proto3" json:"bundles,omitempty"`
	Strategy         PlacementStrategy `protobuf:"varint,4,opt,name=strategy,proto3,enum=ray.rpc.PlacementStrategy" json:"strategy,omitempty"`
	CreatorJobId     []byte            `protobuf:"bytes,5,opt,name=creator_job_id,json=creatorJobId,proto3" json:"creator_job_id,omitempty"`
	CreatorActorId   []byte            `protobuf:"bytes,6,opt,name=creator_actor_id,json=creatorActorId,proto3" json:"creator_actor_id,omitempty"`
	CreatorJobDead   bool              `protobuf:"varint,7,opt,name=creator_job_dead,json=creatorJobDead,proto3" json:"creator_job_dead,omitempty"`
	CreatorActorDead bool              `protobuf:"varint,8,opt,name=creator_actor_dead,json=creatorActorDead,proto3" json:"creator_actor_dead,omitempty"`
	IsDetached       bool              `protobuf:"varint,9,opt,name=is_detached,json=isDetached,proto3" json:"is_detached,omitempty"`
}

func (x *PlacementGroupSpec) Reset() {
	*x = PlacementGroupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementGroupSpec) ProtoMessage() {}

func (x *PlacementGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementGroupSpec.ProtoReflect.Descriptor instead.
func (*PlacementGroupSpec) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{10}
}

func (x *PlacementGroupSpec) GetPlacementGroupId() []byte {
	if x != nil {
		return x.PlacementGroupId
	}
	return nil
}

func (x *PlacementGroupSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlacementGroupSpec) GetBundles() []*Bundle {
	if x != nil {
		return x.Bundles
	}
	return nil
}

func (x *PlacementGroupSpec) GetStrategy() PlacementStrategy {
	if x != nil {
		return x.Strategy
	}
	return PlacementStrategy_PACK
}

func (x *PlacementGroupSpec) GetCreatorJobId() []byte {
	if x != nil {
		return x.CreatorJobId
	}
	return nil
}

func (x *PlacementGroupSpec) GetCreatorActorId() []byte {
	if x != nil {
		return x.CreatorActorId
	}
	return nil
}

func (x *PlacementGroupSpec) GetCreatorJobDead() bool {
	if x != nil {
		return x.CreatorJobDead
	}
	return false
}

func (x *PlacementGroupSpec) GetCreatorActorDead() bool {
	if x != nil {
		return x.CreatorActorDead
	}
	return false
}

func (x *PlacementGroupSpec) GetIsDetached() bool {
	if x != nil {
		return x.IsDetached
	}
	return false
}

type ObjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId     []byte   `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	OwnerAddress *Address `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
}

func (x *ObjectReference) Reset() {
	*x = ObjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectReference) ProtoMessage() {}

func (x *ObjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectReference.ProtoReflect.Descriptor instead.
func (*ObjectReference) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{11}
}

func (x *ObjectReference) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectReference) GetOwnerAddress() *Address {
	if x != nil {
		return x.OwnerAddress
	}
	return nil
}

type ObjectReferenceCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference             *ObjectReference   `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	HasLocalRef           bool               `protobuf:"varint,2,opt,name=has_local_ref,json=hasLocalRef,proto3" json:"has_local_ref,omitempty"`
	Borrowers             []*Address         `protobuf:"bytes,3,rep,name=borrowers,proto3" json:"borrowers,omitempty"`
	StoredInObjects       []*ObjectReference `protobuf:"bytes,4,rep,name=stored_in_objects,json=storedInObjects,proto3" json:"stored_in_objects,omitempty"`
	ContainedInBorrowedId []byte             `protobuf:"bytes,5,opt,name=contained_in_borrowed_id,json=containedInBorrowedId,proto3" json:"contained_in_borrowed_id,omitempty"`
	Contains              [][]byte           `protobuf:"bytes,6,rep,name=contains,proto3" json:"contains,omitempty"`
}

func (x *ObjectReferenceCount) Reset() {
	*x = ObjectReferenceCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectReferenceCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectReferenceCount) ProtoMessage() {}

func (x *ObjectReferenceCount) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectReferenceCount.ProtoReflect.Descriptor instead.
func (*ObjectReferenceCount) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{12}
}

func (x *ObjectReferenceCount) GetReference() *ObjectReference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *ObjectReferenceCount) GetHasLocalRef() bool {
	if x != nil {
		return x.HasLocalRef
	}
	return false
}

func (x *ObjectReferenceCount) GetBorrowers() []*Address {
	if x != nil {
		return x.Borrowers
	}
	return nil
}

func (x *ObjectReferenceCount) GetStoredInObjects() []*ObjectReference {
	if x != nil {
		return x.StoredInObjects
	}
	return nil
}

func (x *ObjectReferenceCount) GetContainedInBorrowedId() []byte {
	if x != nil {
		return x.ContainedInBorrowedId
	}
	return nil
}

func (x *ObjectReferenceCount) GetContains() [][]byte {
	if x != nil {
		return x.Contains
	}
	return nil
}

type TaskArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectRef        *ObjectReference `protobuf:"bytes,1,opt,name=object_ref,json=objectRef,proto3" json:"object_ref,omitempty"`
	Data             []byte           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Metadata         []byte           `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	NestedInlinedIds [][]byte         `protobuf:"bytes,4,rep,name=nested_inlined_ids,json=nestedInlinedIds,proto3" json:"nested_inlined_ids,omitempty"`
}

func (x *TaskArg) Reset() {
	*x = TaskArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskArg) ProtoMessage() {}

func (x *TaskArg) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskArg.ProtoReflect.Descriptor instead.
func (*TaskArg) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{13}
}

func (x *TaskArg) GetObjectRef() *ObjectReference {
	if x != nil {
		return x.ObjectRef
	}
	return nil
}

func (x *TaskArg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskArg) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaskArg) GetNestedInlinedIds() [][]byte {
	if x != nil {
		return x.NestedInlinedIds
	}
	return nil
}

type ActorCreationTaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId               []byte   `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	MaxActorRestarts      int64    `protobuf:"varint,3,opt,name=max_actor_restarts,json=maxActorRestarts,proto3" json:"max_actor_restarts,omitempty"`
	MaxTaskRetries        int64    `protobuf:"varint,4,opt,name=max_task_retries,json=maxTaskRetries,proto3" json:"max_task_retries,omitempty"`
	DynamicWorkerOptions  []string `protobuf:"bytes,5,rep,name=dynamic_worker_options,json=dynamicWorkerOptions,proto3" json:"dynamic_worker_options,omitempty"`
	MaxConcurrency        int32    `protobuf:"varint,6,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	IsDetached            bool     `protobuf:"varint,7,opt,name=is_detached,json=isDetached,proto3" json:"is_detached,omitempty"`
	Name                  string   `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	RayNamespace          string   `protobuf:"bytes,9,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
	IsAsyncio             bool     `protobuf:"varint,10,opt,name=is_asyncio,json=isAsyncio,proto3" json:"is_asyncio,omitempty"`
	ExtensionData         string   `protobuf:"bytes,11,opt,name=extension_data,json=extensionData,proto3" json:"extension_data,omitempty"`
	SerializedActorHandle []byte   `protobuf:"bytes,12,opt,name=serialized_actor_handle,json=serializedActorHandle,proto3" json:"serialized_actor_handle,omitempty"`
}

func (x *ActorCreationTaskSpec) Reset() {
	*x = ActorCreationTaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorCreationTaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorCreationTaskSpec) ProtoMessage() {}

func (x *ActorCreationTaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorCreationTaskSpec.ProtoReflect.Descriptor instead.
func (*ActorCreationTaskSpec) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{14}
}

func (x *ActorCreationTaskSpec) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ActorCreationTaskSpec) GetMaxActorRestarts() int64 {
	if x != nil {
		return x.MaxActorRestarts
	}
	return 0
}

func (x *ActorCreationTaskSpec) GetMaxTaskRetries() int64 {
	if x != nil {
		return x.MaxTaskRetries
	}
	return 0
}

func (x *ActorCreationTaskSpec) GetDynamicWorkerOptions() []string {
	if x != nil {
		return x.DynamicWorkerOptions
	}
	return nil
}

func (x *ActorCreationTaskSpec) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *ActorCreationTaskSpec) GetIsDetached() bool {
	if x != nil {
		return x.IsDetached
	}
	return false
}

func (x *ActorCreationTaskSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActorCreationTaskSpec) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

func (x *ActorCreationTaskSpec) GetIsAsyncio() bool {
	if x != nil {
		return x.IsAsyncio
	}
	return false
}

func (x *ActorCreationTaskSpec) GetExtensionData() string {
	if x != nil {
		return x.ExtensionData
	}
	return ""
}

func (x *ActorCreationTaskSpec) GetSerializedActorHandle() []byte {
	if x != nil {
		return x.SerializedActorHandle
	}
	return nil
}

type ActorTaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId                        []byte `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorCreationDummyObjectId     []byte `protobuf:"bytes,4,opt,name=actor_creation_dummy_object_id,json=actorCreationDummyObjectId,proto3" json:"actor_creation_dummy_object_id,omitempty"`
	ActorCounter                   uint64 `protobuf:"varint,5,opt,name=actor_counter,json=actorCounter,proto3" json:"actor_counter,omitempty"`
	PreviousActorTaskDummyObjectId []byte `protobuf:"bytes,7,opt,name=previous_actor_task_dummy_object_id,json=previousActorTaskDummyObjectId,proto3" json:"previous_actor_task_dummy_object_id,omitempty"`
}

func (x *ActorTaskSpec) Reset() {
	*x = ActorTaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorTaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorTaskSpec) ProtoMessage() {}

func (x *ActorTaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorTaskSpec.ProtoReflect.Descriptor instead.
func (*ActorTaskSpec) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{15}
}

func (x *ActorTaskSpec) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ActorTaskSpec) GetActorCreationDummyObjectId() []byte {
	if x != nil {
		return x.ActorCreationDummyObjectId
	}
	return nil
}

func (x *ActorTaskSpec) GetActorCounter() uint64 {
	if x != nil {
		return x.ActorCounter
	}
	return 0
}

func (x *ActorTaskSpec) GetPreviousActorTaskDummyObjectId() []byte {
	if x != nil {
		return x.PreviousActorTaskDummyObjectId
	}
	return nil
}

type TaskExecutionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastTimestamp float64 `protobuf:"fixed64,2,opt,name=last_timestamp,json=lastTimestamp,proto3" json:"last_timestamp,omitempty"`
	NumForwards   uint64  `protobuf:"varint,3,opt,name=num_forwards,json=numForwards,proto3" json:"num_forwards,omitempty"`
}

func (x *TaskExecutionSpec) Reset() {
	*x = TaskExecutionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskExecutionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecutionSpec) ProtoMessage() {}

func (x *TaskExecutionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecutionSpec.ProtoReflect.Descriptor instead.
func (*TaskExecutionSpec) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{16}
}

func (x *TaskExecutionSpec) GetLastTimestamp() float64 {
	if x != nil {
		return x.LastTimestamp
	}
	return 0
}

func (x *TaskExecutionSpec) GetNumForwards() uint64 {
	if x != nil {
		return x.NumForwards
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskSpec          *TaskSpec          `protobuf:"bytes,1,opt,name=task_spec,json=taskSpec,proto3" json:"task_spec,omitempty"`
	TaskExecutionSpec *TaskExecutionSpec `protobuf:"bytes,2,opt,name=task_execution_spec,json=taskExecutionSpec,proto3" json:"task_execution_spec,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{17}
}

func (x *Task) GetTaskSpec() *TaskSpec {
	if x != nil {
		return x.TaskSpec
	}
	return nil
}

func (x *Task) GetTaskExecutionSpec() *TaskExecutionSpec {
	if x != nil {
		return x.TaskExecutionSpec
	}
	return nil
}

type ResourceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    int64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Quantity float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *ResourceId) Reset() {
	*x = ResourceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceId) ProtoMessage() {}

func (x *ResourceId) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceId.ProtoReflect.Descriptor instead.
func (*ResourceId) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{18}
}

func (x *ResourceId) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ResourceId) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type ResourceMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ResourceIds []*ResourceId `protobuf:"bytes,2,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
}

func (x *ResourceMapEntry) Reset() {
	*x = ResourceMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMapEntry) ProtoMessage() {}

func (x *ResourceMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMapEntry.ProtoReflect.Descriptor instead.
func (*ResourceMapEntry) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{19}
}

func (x *ResourceMapEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceMapEntry) GetResourceIds() []*ResourceId {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

type ViewData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewName string              `protobuf:"bytes,1,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	Measures []*ViewData_Measure `protobuf:"bytes,2,rep,name=measures,proto3" json:"measures,omitempty"`
}

func (x *ViewData) Reset() {
	*x = ViewData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewData) ProtoMessage() {}

func (x *ViewData) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewData.ProtoReflect.Descriptor instead.
func (*ViewData) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{20}
}

func (x *ViewData) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *ViewData) GetMeasures() []*ViewData_Measure {
	if x != nil {
		return x.Measures
	}
	return nil
}

type ObjectRefInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId              []byte   `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	CallSite              string   `protobuf:"bytes,2,opt,name=call_site,json=callSite,proto3" json:"call_site,omitempty"`
	ObjectSize            int64    `protobuf:"varint,3,opt,name=object_size,json=objectSize,proto3" json:"object_size,omitempty"`
	LocalRefCount         int64    `protobuf:"varint,4,opt,name=local_ref_count,json=localRefCount,proto3" json:"local_ref_count,omitempty"`
	SubmittedTaskRefCount int64    `protobuf:"varint,5,opt,name=submitted_task_ref_count,json=submittedTaskRefCount,proto3" json:"submitted_task_ref_count,omitempty"`
	ContainedInOwned      [][]byte `protobuf:"bytes,6,rep,name=contained_in_owned,json=containedInOwned,proto3" json:"contained_in_owned,omitempty"`
	PinnedInMemory        bool     `protobuf:"varint,7,opt,name=pinned_in_memory,json=pinnedInMemory,proto3" json:"pinned_in_memory,omitempty"`
}

func (x *ObjectRefInfo) Reset() {
	*x = ObjectRefInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectRefInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectRefInfo) ProtoMessage() {}

func (x *ObjectRefInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectRefInfo.ProtoReflect.Descriptor instead.
func (*ObjectRefInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{21}
}

func (x *ObjectRefInfo) GetObjectId() []byte {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectRefInfo) GetCallSite() string {
	if x != nil {
		return x.CallSite
	}
	return ""
}

func (x *ObjectRefInfo) GetObjectSize() int64 {
	if x != nil {
		return x.ObjectSize
	}
	return 0
}

func (x *ObjectRefInfo) GetLocalRefCount() int64 {
	if x != nil {
		return x.LocalRefCount
	}
	return 0
}

func (x *ObjectRefInfo) GetSubmittedTaskRefCount() int64 {
	if x != nil {
		return x.SubmittedTaskRefCount
	}
	return 0
}

func (x *ObjectRefInfo) GetContainedInOwned() [][]byte {
	if x != nil {
		return x.ContainedInOwned
	}
	return nil
}

func (x *ObjectRefInfo) GetPinnedInMemory() bool {
	if x != nil {
		return x.PinnedInMemory
	}
	return false
}

type ResourceAllocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceSlots []*ResourceAllocations_ResourceSlot `protobuf:"bytes,1,rep,name=resource_slots,json=resourceSlots,proto3" json:"resource_slots,omitempty"`
}

func (x *ResourceAllocations) Reset() {
	*x = ResourceAllocations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAllocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAllocations) ProtoMessage() {}

func (x *ResourceAllocations) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAllocations.ProtoReflect.Descriptor instead.
func (*ResourceAllocations) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{22}
}

func (x *ResourceAllocations) GetResourceSlots() []*ResourceAllocations_ResourceSlot {
	if x != nil {
		return x.ResourceSlots
	}
	return nil
}

type CoreWorkerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentTaskDesc       string                          `protobuf:"bytes,1,opt,name=current_task_desc,json=currentTaskDesc,proto3" json:"current_task_desc,omitempty"`
	NumPendingTasks       int32                           `protobuf:"varint,2,opt,name=num_pending_tasks,json=numPendingTasks,proto3" json:"num_pending_tasks,omitempty"`
	NumObjectRefsInScope  int32                           `protobuf:"varint,3,opt,name=num_object_refs_in_scope,json=numObjectRefsInScope,proto3" json:"num_object_refs_in_scope,omitempty"`
	CurrentTaskName       string                          `protobuf:"bytes,4,opt,name=current_task_name,json=currentTaskName,proto3" json:"current_task_name,omitempty"`
	CurrentTaskFuncDesc   string                          `protobuf:"bytes,5,opt,name=current_task_func_desc,json=currentTaskFuncDesc,proto3" json:"current_task_func_desc,omitempty"`
	IpAddress             string                          `protobuf:"bytes,7,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Port                  int64                           `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty"`
	ActorId               []byte                          `protobuf:"bytes,9,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	UsedResources         map[string]*ResourceAllocations `protobuf:"bytes,10,rep,name=used_resources,json=usedResources,proto3" json:"used_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WebuiDisplay          map[string]string               `protobuf:"bytes,11,rep,name=webui_display,json=webuiDisplay,proto3" json:"webui_display,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumInPlasma           int32                           `protobuf:"varint,12,opt,name=num_in_plasma,json=numInPlasma,proto3" json:"num_in_plasma,omitempty"`
	NumLocalObjects       int32                           `protobuf:"varint,13,opt,name=num_local_objects,json=numLocalObjects,proto3" json:"num_local_objects,omitempty"`
	UsedObjectStoreMemory int64                           `protobuf:"varint,14,opt,name=used_object_store_memory,json=usedObjectStoreMemory,proto3" json:"used_object_store_memory,omitempty"`
	TaskQueueLength       int32                           `protobuf:"varint,15,opt,name=task_queue_length,json=taskQueueLength,proto3" json:"task_queue_length,omitempty"`
	NumExecutedTasks      int32                           `protobuf:"varint,16,opt,name=num_executed_tasks,json=numExecutedTasks,proto3" json:"num_executed_tasks,omitempty"`
	ActorTitle            string                          `protobuf:"bytes,17,opt,name=actor_title,json=actorTitle,proto3" json:"actor_title,omitempty"`
	ObjectRefs            []*ObjectRefInfo                `protobuf:"bytes,18,rep,name=object_refs,json=objectRefs,proto3" json:"object_refs,omitempty"`
	JobId                 []byte                          `protobuf:"bytes,19,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	WorkerId              []byte                          `protobuf:"bytes,20,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Language              Language                        `protobuf:"varint,21,opt,name=language,proto3,enum=ray.rpc.Language" json:"language,omitempty"`
	Pid                   uint32                          `protobuf:"varint,22,opt,name=pid,proto3" json:"pid,omitempty"`
	WorkerType            WorkerType                      `protobuf:"varint,23,opt,name=worker_type,json=workerType,proto3,enum=ray.rpc.WorkerType" json:"worker_type,omitempty"`
}

func (x *CoreWorkerStats) Reset() {
	*x = CoreWorkerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreWorkerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreWorkerStats) ProtoMessage() {}

func (x *CoreWorkerStats) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreWorkerStats.ProtoReflect.Descriptor instead.
func (*CoreWorkerStats) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{23}
}

func (x *CoreWorkerStats) GetCurrentTaskDesc() string {
	if x != nil {
		return x.CurrentTaskDesc
	}
	return ""
}

func (x *CoreWorkerStats) GetNumPendingTasks() int32 {
	if x != nil {
		return x.NumPendingTasks
	}
	return 0
}

func (x *CoreWorkerStats) GetNumObjectRefsInScope() int32 {
	if x != nil {
		return x.NumObjectRefsInScope
	}
	return 0
}

func (x *CoreWorkerStats) GetCurrentTaskName() string {
	if x != nil {
		return x.CurrentTaskName
	}
	return ""
}

func (x *CoreWorkerStats) GetCurrentTaskFuncDesc() string {
	if x != nil {
		return x.CurrentTaskFuncDesc
	}
	return ""
}

func (x *CoreWorkerStats) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *CoreWorkerStats) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CoreWorkerStats) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *CoreWorkerStats) GetUsedResources() map[string]*ResourceAllocations {
	if x != nil {
		return x.UsedResources
	}
	return nil
}

func (x *CoreWorkerStats) GetWebuiDisplay() map[string]string {
	if x != nil {
		return x.WebuiDisplay
	}
	return nil
}

func (x *CoreWorkerStats) GetNumInPlasma() int32 {
	if x != nil {
		return x.NumInPlasma
	}
	return 0
}

func (x *CoreWorkerStats) GetNumLocalObjects() int32 {
	if x != nil {
		return x.NumLocalObjects
	}
	return 0
}

func (x *CoreWorkerStats) GetUsedObjectStoreMemory() int64 {
	if x != nil {
		return x.UsedObjectStoreMemory
	}
	return 0
}

func (x *CoreWorkerStats) GetTaskQueueLength() int32 {
	if x != nil {
		return x.TaskQueueLength
	}
	return 0
}

func (x *CoreWorkerStats) GetNumExecutedTasks() int32 {
	if x != nil {
		return x.NumExecutedTasks
	}
	return 0
}

func (x *CoreWorkerStats) GetActorTitle() string {
	if x != nil {
		return x.ActorTitle
	}
	return ""
}

func (x *CoreWorkerStats) GetObjectRefs() []*ObjectRefInfo {
	if x != nil {
		return x.ObjectRefs
	}
	return nil
}

func (x *CoreWorkerStats) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *CoreWorkerStats) GetWorkerId() []byte {
	if x != nil {
		return x.WorkerId
	}
	return nil
}

func (x *CoreWorkerStats) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_PYTHON
}

func (x *CoreWorkerStats) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *CoreWorkerStats) GetWorkerType() WorkerType {
	if x != nil {
		return x.WorkerType
	}
	return WorkerType_WORKER
}

type MetricPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName  string            `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Timestamp   int64             `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value       float64           `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Tags        map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Units       string            `protobuf:"bytes,6,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *MetricPoint) Reset() {
	*x = MetricPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricPoint) ProtoMessage() {}

func (x *MetricPoint) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricPoint.ProtoReflect.Descriptor instead.
func (*MetricPoint) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{24}
}

func (x *MetricPoint) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *MetricPoint) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MetricPoint) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MetricPoint) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MetricPoint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MetricPoint) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

type NamedActorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RayNamespace string `protobuf:"bytes,1,opt,name=ray_namespace,json=rayNamespace,proto3" json:"ray_namespace,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NamedActorInfo) Reset() {
	*x = NamedActorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedActorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedActorInfo) ProtoMessage() {}

func (x *NamedActorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedActorInfo.ProtoReflect.Descriptor instead.
func (*NamedActorInfo) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{25}
}

func (x *NamedActorInfo) GetRayNamespace() string {
	if x != nil {
		return x.RayNamespace
	}
	return ""
}

func (x *NamedActorInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Bundle_BundleIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementGroupId []byte `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
	BundleIndex      int32  `protobuf:"varint,2,opt,name=bundle_index,json=bundleIndex,proto3" json:"bundle_index,omitempty"`
}

func (x *Bundle_BundleIdentifier) Reset() {
	*x = Bundle_BundleIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle_BundleIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle_BundleIdentifier) ProtoMessage() {}

func (x *Bundle_BundleIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle_BundleIdentifier.ProtoReflect.Descriptor instead.
func (*Bundle_BundleIdentifier) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Bundle_BundleIdentifier) GetPlacementGroupId() []byte {
	if x != nil {
		return x.PlacementGroupId
	}
	return nil
}

func (x *Bundle_BundleIdentifier) GetBundleIndex() int32 {
	if x != nil {
		return x.BundleIndex
	}
	return 0
}

type ViewData_Measure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags                         string    `protobuf:"bytes,1,opt,name=tags,proto3" json:"tags,omitempty"`
	IntValue                     int64     `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3" json:"int_value,omitempty"`
	DoubleValue                  float64   `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	DistributionMin              float64   `protobuf:"fixed64,4,opt,name=distribution_min,json=distributionMin,proto3" json:"distribution_min,omitempty"`
	DistributionMean             float64   `protobuf:"fixed64,5,opt,name=distribution_mean,json=distributionMean,proto3" json:"distribution_mean,omitempty"`
	DistributionMax              float64   `protobuf:"fixed64,6,opt,name=distribution_max,json=distributionMax,proto3" json:"distribution_max,omitempty"`
	DistributionCount            float64   `protobuf:"fixed64,7,opt,name=distribution_count,json=distributionCount,proto3" json:"distribution_count,omitempty"`
	DistributionBucketBoundaries []float64 `protobuf:"fixed64,8,rep,packed,name=distribution_bucket_boundaries,json=distributionBucketBoundaries,proto3" json:"distribution_bucket_boundaries,omitempty"`
	DistributionBucketCounts     []float64 `protobuf:"fixed64,9,rep,packed,name=distribution_bucket_counts,json=distributionBucketCounts,proto3" json:"distribution_bucket_counts,omitempty"`
}

func (x *ViewData_Measure) Reset() {
	*x = ViewData_Measure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewData_Measure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewData_Measure) ProtoMessage() {}

func (x *ViewData_Measure) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewData_Measure.ProtoReflect.Descriptor instead.
func (*ViewData_Measure) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{20, 0}
}

func (x *ViewData_Measure) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *ViewData_Measure) GetIntValue() int64 {
	if x != nil {
		return x.IntValue
	}
	return 0
}

func (x *ViewData_Measure) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *ViewData_Measure) GetDistributionMin() float64 {
	if x != nil {
		return x.DistributionMin
	}
	return 0
}

func (x *ViewData_Measure) GetDistributionMean() float64 {
	if x != nil {
		return x.DistributionMean
	}
	return 0
}

func (x *ViewData_Measure) GetDistributionMax() float64 {
	if x != nil {
		return x.DistributionMax
	}
	return 0
}

func (x *ViewData_Measure) GetDistributionCount() float64 {
	if x != nil {
		return x.DistributionCount
	}
	return 0
}

func (x *ViewData_Measure) GetDistributionBucketBoundaries() []float64 {
	if x != nil {
		return x.DistributionBucketBoundaries
	}
	return nil
}

func (x *ViewData_Measure) GetDistributionBucketCounts() []float64 {
	if x != nil {
		return x.DistributionBucketCounts
	}
	return nil
}

type ResourceAllocations_ResourceSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot       int64   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Allocation float64 `protobuf:"fixed64,2,opt,name=allocation,proto3" json:"allocation,omitempty"`
}

func (x *ResourceAllocations_ResourceSlot) Reset() {
	*x = ResourceAllocations_ResourceSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_ray_protobuf_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAllocations_ResourceSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAllocations_ResourceSlot) ProtoMessage() {}

func (x *ResourceAllocations_ResourceSlot) ProtoReflect() protoreflect.Message {
	mi := &file_src_ray_protobuf_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAllocations_ResourceSlot.ProtoReflect.Descriptor instead.
func (*ResourceAllocations_ResourceSlot) Descriptor() ([]byte, []int) {
	return file_src_ray_protobuf_common_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ResourceAllocations_ResourceSlot) GetSlot() int64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ResourceAllocations_ResourceSlot) GetAllocation() float64 {
	if x != nil {
		return x.Allocation
	}
	return 0
}

var File_src_ray_protobuf_common_proto protoreflect.FileDescriptor

var file_src_ray_protobuf_common_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x22, 0x76, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x79, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x7a, 0x0a, 0x16, 0x4a, 0x61, 0x76, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa4, 0x01, 0x0a,
	0x18, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x3c, 0x0a, 0x15, 0x43, 0x70, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3b, 0x0a, 0x14, 0x47, 0x6f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9c,
	0x03, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x18, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x16, 0x6a, 0x61, 0x76, 0x61,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x61, 0x0a, 0x1a, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x18, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x17, 0x63, 0x70, 0x70, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x70, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x15, 0x63, 0x70, 0x70, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x55, 0x0a, 0x16, 0x67, 0x6f, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6f, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x14, 0x67, 0x6f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0xae, 0x01,
	0x0a, 0x0c, 0x52, 0x61, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x76,
	0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x77, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x69, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x69, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x65, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x45, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x22, 0x90, 0x0c, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a,
	0x13, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x67, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x73,
	0x0a, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x15, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x0f,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x23,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x79, 0x0a, 0x1e, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1c, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x6b, 0x69, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x67, 0x65, 0x72, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x76, 0x1a, 0x44, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x1f, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x21, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x02, 0x0a, 0x06, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x61,
	0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x1a, 0x63, 0x0a, 0x10, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x40, 0x0a, 0x12,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82,
	0x03, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4a, 0x6f, 0x62,
	0x44, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x14, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68,
	0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12,
	0x2e, 0x0a, 0x09, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12,
	0x44, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x07, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x72, 0x67, 0x12, 0x37, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0xc1, 0x03,
	0x0a, 0x15, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x69,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x69, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x1e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x23, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4a, 0x0a, 0x13,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x79, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x22, 0x3e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x5e, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0xf4, 0x03, 0x0a, 0x08, 0x56, 0x69, 0x65,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x93, 0x03, 0x0a, 0x07, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x2d, 0x0a, 0x12,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1e, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x01, 0x52, 0x18, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0xa3, 0x02, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x1a,
	0x42, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x08, 0x0a, 0x0f, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6e, 0x75, 0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x36, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x73,
	0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x46, 0x75, 0x6e, 0x63, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x77, 0x65,
	0x62, 0x75, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x75,
	0x69, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x77,
	0x65, 0x62, 0x75, 0x69, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x73, 0x6d, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x73, 0x6d, 0x61, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x75,
	0x73, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75,
	0x6d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0x5e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x79,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x75, 0x69, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49,
	0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x31, 0x0a, 0x08, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x41, 0x56, 0x41, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x50, 0x50, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x4f, 0x10, 0x03, 0x2a, 0x5b, 0x0a, 0x0a,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x4f,
	0x52, 0x4b, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x49, 0x4c, 0x4c, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x54, 0x49, 0x4c,
	0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x55, 0x0a, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03,
	0x2a, 0xad, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x53, 0x4d, 0x41, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x2a, 0x9d, 0x01, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x05,
	0x2a, 0x4d, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x42,
	0x20, 0x0a, 0x18, 0x69, 0x6f, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5a, 0x04, 0x2e, 0x2f, 0x67,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_ray_protobuf_common_proto_rawDescOnce sync.Once
	file_src_ray_protobuf_common_proto_rawDescData = file_src_ray_protobuf_common_proto_rawDesc
)

func file_src_ray_protobuf_common_proto_rawDescGZIP() []byte {
	file_src_ray_protobuf_common_proto_rawDescOnce.Do(func() {
		file_src_ray_protobuf_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_ray_protobuf_common_proto_rawDescData)
	})
	return file_src_ray_protobuf_common_proto_rawDescData
}

var file_src_ray_protobuf_common_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_src_ray_protobuf_common_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_src_ray_protobuf_common_proto_goTypes = []interface{}{
	(Language)(0),                            // 0: ray.rpc.Language
	(WorkerType)(0),                          // 1: ray.rpc.WorkerType
	(TaskType)(0),                            // 2: ray.rpc.TaskType
	(ErrorType)(0),                           // 3: ray.rpc.ErrorType
	(WorkerExitType)(0),                      // 4: ray.rpc.WorkerExitType
	(PlacementStrategy)(0),                   // 5: ray.rpc.PlacementStrategy
	(*Address)(nil),                          // 6: ray.rpc.Address
	(*JavaFunctionDescriptor)(nil),           // 7: ray.rpc.JavaFunctionDescriptor
	(*PythonFunctionDescriptor)(nil),         // 8: ray.rpc.PythonFunctionDescriptor
	(*CppFunctionDescriptor)(nil),            // 9: ray.rpc.CppFunctionDescriptor
	(*GoFunctionDescriptor)(nil),             // 10: ray.rpc.GoFunctionDescriptor
	(*FunctionDescriptor)(nil),               // 11: ray.rpc.FunctionDescriptor
	(*RayException)(nil),                     // 12: ray.rpc.RayException
	(*RuntimeEnv)(nil),                       // 13: ray.rpc.RuntimeEnv
	(*TaskSpec)(nil),                         // 14: ray.rpc.TaskSpec
	(*Bundle)(nil),                           // 15: ray.rpc.Bundle
	(*PlacementGroupSpec)(nil),               // 16: ray.rpc.PlacementGroupSpec
	(*ObjectReference)(nil),                  // 17: ray.rpc.ObjectReference
	(*ObjectReferenceCount)(nil),             // 18: ray.rpc.ObjectReferenceCount
	(*TaskArg)(nil),                          // 19: ray.rpc.TaskArg
	(*ActorCreationTaskSpec)(nil),            // 20: ray.rpc.ActorCreationTaskSpec
	(*ActorTaskSpec)(nil),                    // 21: ray.rpc.ActorTaskSpec
	(*TaskExecutionSpec)(nil),                // 22: ray.rpc.TaskExecutionSpec
	(*Task)(nil),                             // 23: ray.rpc.Task
	(*ResourceId)(nil),                       // 24: ray.rpc.ResourceId
	(*ResourceMapEntry)(nil),                 // 25: ray.rpc.ResourceMapEntry
	(*ViewData)(nil),                         // 26: ray.rpc.ViewData
	(*ObjectRefInfo)(nil),                    // 27: ray.rpc.ObjectRefInfo
	(*ResourceAllocations)(nil),              // 28: ray.rpc.ResourceAllocations
	(*CoreWorkerStats)(nil),                  // 29: ray.rpc.CoreWorkerStats
	(*MetricPoint)(nil),                      // 30: ray.rpc.MetricPoint
	(*NamedActorInfo)(nil),                   // 31: ray.rpc.NamedActorInfo
	nil,                                      // 32: ray.rpc.TaskSpec.RequiredResourcesEntry
	nil,                                      // 33: ray.rpc.TaskSpec.RequiredPlacementResourcesEntry
	nil,                                      // 34: ray.rpc.TaskSpec.OverrideEnvironmentVariablesEntry
	(*Bundle_BundleIdentifier)(nil),          // 35: ray.rpc.Bundle.BundleIdentifier
	nil,                                      // 36: ray.rpc.Bundle.UnitResourcesEntry
	(*ViewData_Measure)(nil),                 // 37: ray.rpc.ViewData.Measure
	(*ResourceAllocations_ResourceSlot)(nil), // 38: ray.rpc.ResourceAllocations.ResourceSlot
	nil,                                      // 39: ray.rpc.CoreWorkerStats.UsedResourcesEntry
	nil,                                      // 40: ray.rpc.CoreWorkerStats.WebuiDisplayEntry
	nil,                                      // 41: ray.rpc.MetricPoint.TagsEntry
}
var file_src_ray_protobuf_common_proto_depIdxs = []int32{
	7,  // 0: ray.rpc.FunctionDescriptor.java_function_descriptor:type_name -> ray.rpc.JavaFunctionDescriptor
	8,  // 1: ray.rpc.FunctionDescriptor.python_function_descriptor:type_name -> ray.rpc.PythonFunctionDescriptor
	9,  // 2: ray.rpc.FunctionDescriptor.cpp_function_descriptor:type_name -> ray.rpc.CppFunctionDescriptor
	10, // 3: ray.rpc.FunctionDescriptor.go_function_descriptor:type_name -> ray.rpc.GoFunctionDescriptor
	0,  // 4: ray.rpc.RayException.language:type_name -> ray.rpc.Language
	2,  // 5: ray.rpc.TaskSpec.type:type_name -> ray.rpc.TaskType
	0,  // 6: ray.rpc.TaskSpec.language:type_name -> ray.rpc.Language
	11, // 7: ray.rpc.TaskSpec.function_descriptor:type_name -> ray.rpc.FunctionDescriptor
	6,  // 8: ray.rpc.TaskSpec.caller_address:type_name -> ray.rpc.Address
	19, // 9: ray.rpc.TaskSpec.args:type_name -> ray.rpc.TaskArg
	32, // 10: ray.rpc.TaskSpec.required_resources:type_name -> ray.rpc.TaskSpec.RequiredResourcesEntry
	33, // 11: ray.rpc.TaskSpec.required_placement_resources:type_name -> ray.rpc.TaskSpec.RequiredPlacementResourcesEntry
	20, // 12: ray.rpc.TaskSpec.actor_creation_task_spec:type_name -> ray.rpc.ActorCreationTaskSpec
	21, // 13: ray.rpc.TaskSpec.actor_task_spec:type_name -> ray.rpc.ActorTaskSpec
	34, // 14: ray.rpc.TaskSpec.override_environment_variables:type_name -> ray.rpc.TaskSpec.OverrideEnvironmentVariablesEntry
	35, // 15: ray.rpc.Bundle.bundle_id:type_name -> ray.rpc.Bundle.BundleIdentifier
	36, // 16: ray.rpc.Bundle.unit_resources:type_name -> ray.rpc.Bundle.UnitResourcesEntry
	15, // 17: ray.rpc.PlacementGroupSpec.bundles:type_name -> ray.rpc.Bundle
	5,  // 18: ray.rpc.PlacementGroupSpec.strategy:type_name -> ray.rpc.PlacementStrategy
	6,  // 19: ray.rpc.ObjectReference.owner_address:type_name -> ray.rpc.Address
	17, // 20: ray.rpc.ObjectReferenceCount.reference:type_name -> ray.rpc.ObjectReference
	6,  // 21: ray.rpc.ObjectReferenceCount.borrowers:type_name -> ray.rpc.Address
	17, // 22: ray.rpc.ObjectReferenceCount.stored_in_objects:type_name -> ray.rpc.ObjectReference
	17, // 23: ray.rpc.TaskArg.object_ref:type_name -> ray.rpc.ObjectReference
	14, // 24: ray.rpc.Task.task_spec:type_name -> ray.rpc.TaskSpec
	22, // 25: ray.rpc.Task.task_execution_spec:type_name -> ray.rpc.TaskExecutionSpec
	24, // 26: ray.rpc.ResourceMapEntry.resource_ids:type_name -> ray.rpc.ResourceId
	37, // 27: ray.rpc.ViewData.measures:type_name -> ray.rpc.ViewData.Measure
	38, // 28: ray.rpc.ResourceAllocations.resource_slots:type_name -> ray.rpc.ResourceAllocations.ResourceSlot
	39, // 29: ray.rpc.CoreWorkerStats.used_resources:type_name -> ray.rpc.CoreWorkerStats.UsedResourcesEntry
	40, // 30: ray.rpc.CoreWorkerStats.webui_display:type_name -> ray.rpc.CoreWorkerStats.WebuiDisplayEntry
	27, // 31: ray.rpc.CoreWorkerStats.object_refs:type_name -> ray.rpc.ObjectRefInfo
	0,  // 32: ray.rpc.CoreWorkerStats.language:type_name -> ray.rpc.Language
	1,  // 33: ray.rpc.CoreWorkerStats.worker_type:type_name -> ray.rpc.WorkerType
	41, // 34: ray.rpc.MetricPoint.tags:type_name -> ray.rpc.MetricPoint.TagsEntry
	28, // 35: ray.rpc.CoreWorkerStats.UsedResourcesEntry.value:type_name -> ray.rpc.ResourceAllocations
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_src_ray_protobuf_common_proto_init() }
func file_src_ray_protobuf_common_proto_init() {
	if File_src_ray_protobuf_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_ray_protobuf_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaFunctionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonFunctionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CppFunctionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoFunctionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RayException); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementGroupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectReferenceCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorCreationTaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorTaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskExecutionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectRefInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceAllocations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreWorkerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedActorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle_BundleIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewData_Measure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_ray_protobuf_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceAllocations_ResourceSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_src_ray_protobuf_common_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*FunctionDescriptor_JavaFunctionDescriptor)(nil),
		(*FunctionDescriptor_PythonFunctionDescriptor)(nil),
		(*FunctionDescriptor_CppFunctionDescriptor)(nil),
		(*FunctionDescriptor_GoFunctionDescriptor)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_ray_protobuf_common_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_src_ray_protobuf_common_proto_goTypes,
		DependencyIndexes: file_src_ray_protobuf_common_proto_depIdxs,
		EnumInfos:         file_src_ray_protobuf_common_proto_enumTypes,
		MessageInfos:      file_src_ray_protobuf_common_proto_msgTypes,
	}.Build()
	File_src_ray_protobuf_common_proto = out.File
	file_src_ray_protobuf_common_proto_rawDesc = nil
	file_src_ray_protobuf_common_proto_goTypes = nil
	file_src_ray_protobuf_common_proto_depIdxs = nil
}
